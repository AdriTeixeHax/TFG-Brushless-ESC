
TFG-Brushless-ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008508  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080086a0  080086a0  000096a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008700  08008700  0000a100  2**0
                  CONTENTS
  4 .ARM          00000008  08008700  08008700  00009700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008708  08008708  0000a100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008708  08008708  00009708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800870c  0800870c  0000970c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08008710  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015bc  20000100  08008810  0000a100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016bc  08008810  0000a6bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162f0  00000000  00000000  0000a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035e6  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00023a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fef  00000000  00000000  00024ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8cc  00000000  00000000  00025e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197eb  00000000  00000000  0004075b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e0a1  00000000  00000000  00059f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005770  00000000  00000000  000f802c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000fd79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008688 	.word	0x08008688

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08008688 	.word	0x08008688

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <PWMSet>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PWMSet(mosfet_pins pin, uint16_t value)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	80bb      	strh	r3, [r7, #4]
    // TIM 3 Channel 4 - LO_U
    // TIM 3 Channel 1 - HI_V
    // TIM 2 Channel 1 - LO_V
    // TIM 4 Channel 2 - HI_W
    // TIM 4 Channel 1 - LO_W
	switch(pin)
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2b05      	cmp	r3, #5
 80004dc:	d82c      	bhi.n	8000538 <PWMSet+0x70>
 80004de:	a201      	add	r2, pc, #4	@ (adr r2, 80004e4 <PWMSet+0x1c>)
 80004e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e4:	080004fd 	.word	0x080004fd
 80004e8:	08000511 	.word	0x08000511
 80004ec:	08000525 	.word	0x08000525
 80004f0:	08000507 	.word	0x08000507
 80004f4:	0800051b 	.word	0x0800051b
 80004f8:	0800052f 	.word	0x0800052f
	{
	case HI_U:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, value);
 80004fc:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <PWMSet+0x80>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	88ba      	ldrh	r2, [r7, #4]
 8000502:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8000504:	e019      	b.n	800053a <PWMSet+0x72>
	case LO_U:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, value);
 8000506:	4b11      	ldr	r3, [pc, #68]	@ (800054c <PWMSet+0x84>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	88ba      	ldrh	r2, [r7, #4]
 800050c:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 800050e:	e014      	b.n	800053a <PWMSet+0x72>
	case HI_V:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 8000510:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <PWMSet+0x84>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	88ba      	ldrh	r2, [r7, #4]
 8000516:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000518:	e00f      	b.n	800053a <PWMSet+0x72>
	case LO_V:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 800051a:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <PWMSet+0x80>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	88ba      	ldrh	r2, [r7, #4]
 8000520:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000522:	e00a      	b.n	800053a <PWMSet+0x72>
	case HI_W:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, value);
 8000524:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <PWMSet+0x88>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	88ba      	ldrh	r2, [r7, #4]
 800052a:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 800052c:	e005      	b.n	800053a <PWMSet+0x72>
	case LO_W:
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, value);
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <PWMSet+0x88>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	88ba      	ldrh	r2, [r7, #4]
 8000534:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000536:	e000      	b.n	800053a <PWMSet+0x72>
	default:
		break;
 8000538:	bf00      	nop
	}
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200001b8 	.word	0x200001b8
 800054c:	20000200 	.word	0x20000200
 8000550:	20000248 	.word	0x20000248

08000554 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_8)
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000564:	d10f      	bne.n	8000586 <HAL_GPIO_EXTI_Callback+0x32>
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET)
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	4619      	mov	r1, r3
 800056a:	481c      	ldr	r0, [pc, #112]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x88>)
 800056c:	f001 fc0a 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d103      	bne.n	800057e <HAL_GPIO_EXTI_Callback+0x2a>
		  Hall_U_State = 1;
 8000576:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET)
		  Hall_W_State = 1;
	  else
		  Hall_W_State = 0;
  }
}
 800057c:	e02a      	b.n	80005d4 <HAL_GPIO_EXTI_Callback+0x80>
		  Hall_U_State = 0;
 800057e:	4b18      	ldr	r3, [pc, #96]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
}
 8000584:	e026      	b.n	80005d4 <HAL_GPIO_EXTI_Callback+0x80>
  else if(GPIO_Pin == GPIO_PIN_9)
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800058c:	d10f      	bne.n	80005ae <HAL_GPIO_EXTI_Callback+0x5a>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET)
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4619      	mov	r1, r3
 8000592:	4812      	ldr	r0, [pc, #72]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x88>)
 8000594:	f001 fbf6 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d103      	bne.n	80005a6 <HAL_GPIO_EXTI_Callback+0x52>
		  Hall_V_State = 1;
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x90>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
}
 80005a4:	e016      	b.n	80005d4 <HAL_GPIO_EXTI_Callback+0x80>
		  Hall_V_State = 0;
 80005a6:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x90>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
}
 80005ac:	e012      	b.n	80005d4 <HAL_GPIO_EXTI_Callback+0x80>
  else if(GPIO_Pin == GPIO_PIN_10)
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005b4:	d10e      	bne.n	80005d4 <HAL_GPIO_EXTI_Callback+0x80>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET)
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	4619      	mov	r1, r3
 80005ba:	4808      	ldr	r0, [pc, #32]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x88>)
 80005bc:	f001 fbe2 	bl	8001d84 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d103      	bne.n	80005ce <HAL_GPIO_EXTI_Callback+0x7a>
		  Hall_W_State = 1;
 80005c6:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <HAL_GPIO_EXTI_Callback+0x94>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
}
 80005cc:	e002      	b.n	80005d4 <HAL_GPIO_EXTI_Callback+0x80>
		  Hall_W_State = 0;
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <HAL_GPIO_EXTI_Callback+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40020000 	.word	0x40020000
 80005e0:	20000290 	.word	0x20000290
 80005e4:	20000291 	.word	0x20000291
 80005e8:	20000292 	.word	0x20000292

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fe2a 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f90e 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 fb22 	bl	8000c40 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005fc:	f007 fb2e 	bl	8007c5c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000600:	f000 f974 	bl	80008ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8000604:	f000 f9c4 	bl	8000990 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000608:	f000 f9f0 	bl	80009ec <MX_TIM2_Init>
  MX_TIM3_Init();
 800060c:	f000 fa50 	bl	8000ab0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000610:	f000 fab2 	bl	8000b78 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // LO_V
 8000614:	2100      	movs	r1, #0
 8000616:	4877      	ldr	r0, [pc, #476]	@ (80007f4 <main+0x208>)
 8000618:	f003 fc28 	bl	8003e6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // HI_U
 800061c:	2108      	movs	r1, #8
 800061e:	4875      	ldr	r0, [pc, #468]	@ (80007f4 <main+0x208>)
 8000620:	f003 fc24 	bl	8003e6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // HI_V
 8000624:	2100      	movs	r1, #0
 8000626:	4874      	ldr	r0, [pc, #464]	@ (80007f8 <main+0x20c>)
 8000628:	f003 fc20 	bl	8003e6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // LO_U
 800062c:	210c      	movs	r1, #12
 800062e:	4872      	ldr	r0, [pc, #456]	@ (80007f8 <main+0x20c>)
 8000630:	f003 fc1c 	bl	8003e6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // LO_W
 8000634:	2100      	movs	r1, #0
 8000636:	4871      	ldr	r0, [pc, #452]	@ (80007fc <main+0x210>)
 8000638:	f003 fc18 	bl	8003e6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // HI_W
 800063c:	2104      	movs	r1, #4
 800063e:	486f      	ldr	r0, [pc, #444]	@ (80007fc <main+0x210>)
 8000640:	f003 fc14 	bl	8003e6c <HAL_TIM_PWM_Start>
    /* USER CODE BEGIN 3 */

	// U = Yellow
	// V = Blue
	// W = Green
	state = (Hall_U_State << 2) | (Hall_V_State << 1) | (Hall_W_State);
 8000644:	4b6e      	ldr	r3, [pc, #440]	@ (8000800 <main+0x214>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	b25a      	sxtb	r2, r3
 800064c:	4b6d      	ldr	r3, [pc, #436]	@ (8000804 <main+0x218>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	b25b      	sxtb	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	b25a      	sxtb	r2, r3
 8000658:	4b6b      	ldr	r3, [pc, #428]	@ (8000808 <main+0x21c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b25b      	sxtb	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b25b      	sxtb	r3, r3
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b69      	ldr	r3, [pc, #420]	@ (800080c <main+0x220>)
 8000666:	701a      	strb	r2, [r3, #0]

	switch(state)
 8000668:	4b68      	ldr	r3, [pc, #416]	@ (800080c <main+0x220>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	2b05      	cmp	r3, #5
 8000670:	f200 80be 	bhi.w	80007f0 <main+0x204>
 8000674:	a201      	add	r2, pc, #4	@ (adr r2, 800067c <main+0x90>)
 8000676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067a:	bf00      	nop
 800067c:	0800077d 	.word	0x0800077d
 8000680:	08000709 	.word	0x08000709
 8000684:	08000743 	.word	0x08000743
 8000688:	08000695 	.word	0x08000695
 800068c:	080007b7 	.word	0x080007b7
 8000690:	080006cf 	.word	0x080006cf
	{
	case 0b100:
		PWMSet(HI_U, 0);
 8000694:	2100      	movs	r1, #0
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff16 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 0);
 800069c:	2100      	movs	r1, #0
 800069e:	2003      	movs	r0, #3
 80006a0:	f7ff ff12 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, speed);
 80006a4:	4b5a      	ldr	r3, [pc, #360]	@ (8000810 <main+0x224>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff ff0b 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 0);
 80006b2:	2100      	movs	r1, #0
 80006b4:	2004      	movs	r0, #4
 80006b6:	f7ff ff07 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, 0);
 80006ba:	2100      	movs	r1, #0
 80006bc:	2002      	movs	r0, #2
 80006be:	f7ff ff03 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 256);
 80006c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c6:	2005      	movs	r0, #5
 80006c8:	f7ff fefe 	bl	80004c8 <PWMSet>
		break;
 80006cc:	e091      	b.n	80007f2 <main+0x206>
	case 0b110:
		PWMSet(HI_U, 0);
 80006ce:	2100      	movs	r1, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff fef9 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 256);
 80006d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006da:	2003      	movs	r0, #3
 80006dc:	f7ff fef4 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, speed);
 80006e0:	4b4b      	ldr	r3, [pc, #300]	@ (8000810 <main+0x224>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	4619      	mov	r1, r3
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff feed 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 0);
 80006ee:	2100      	movs	r1, #0
 80006f0:	2004      	movs	r0, #4
 80006f2:	f7ff fee9 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, 0);
 80006f6:	2100      	movs	r1, #0
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff fee5 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 0);
 80006fe:	2100      	movs	r1, #0
 8000700:	2005      	movs	r0, #5
 8000702:	f7ff fee1 	bl	80004c8 <PWMSet>
		break;
 8000706:	e074      	b.n	80007f2 <main+0x206>
	case 0b010:
		PWMSet(HI_U, 0);
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff fedc 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 256);
 8000710:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000714:	2003      	movs	r0, #3
 8000716:	f7ff fed7 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, 0);
 800071a:	2100      	movs	r1, #0
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff fed3 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 0);
 8000722:	2100      	movs	r1, #0
 8000724:	2004      	movs	r0, #4
 8000726:	f7ff fecf 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, speed);
 800072a:	4b39      	ldr	r3, [pc, #228]	@ (8000810 <main+0x224>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	b29b      	uxth	r3, r3
 8000730:	4619      	mov	r1, r3
 8000732:	2002      	movs	r0, #2
 8000734:	f7ff fec8 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 0);
 8000738:	2100      	movs	r1, #0
 800073a:	2005      	movs	r0, #5
 800073c:	f7ff fec4 	bl	80004c8 <PWMSet>
		break;
 8000740:	e057      	b.n	80007f2 <main+0x206>
	case 0b011:
		PWMSet(HI_U, 0);
 8000742:	2100      	movs	r1, #0
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff febf 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 0);
 800074a:	2100      	movs	r1, #0
 800074c:	2003      	movs	r0, #3
 800074e:	f7ff febb 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, 0);
 8000752:	2100      	movs	r1, #0
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff feb7 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 256);
 800075a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075e:	2004      	movs	r0, #4
 8000760:	f7ff feb2 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, speed);
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <main+0x224>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	b29b      	uxth	r3, r3
 800076a:	4619      	mov	r1, r3
 800076c:	2002      	movs	r0, #2
 800076e:	f7ff feab 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 0);
 8000772:	2100      	movs	r1, #0
 8000774:	2005      	movs	r0, #5
 8000776:	f7ff fea7 	bl	80004c8 <PWMSet>
		break;
 800077a:	e03a      	b.n	80007f2 <main+0x206>
	case 0b001:
		PWMSet(HI_U, speed);
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <main+0x224>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	b29b      	uxth	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fe9f 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 0);
 800078a:	2100      	movs	r1, #0
 800078c:	2003      	movs	r0, #3
 800078e:	f7ff fe9b 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, 0);
 8000792:	2100      	movs	r1, #0
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fe97 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 256);
 800079a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079e:	2004      	movs	r0, #4
 80007a0:	f7ff fe92 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, 0);
 80007a4:	2100      	movs	r1, #0
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff fe8e 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2005      	movs	r0, #5
 80007b0:	f7ff fe8a 	bl	80004c8 <PWMSet>
		break;
 80007b4:	e01d      	b.n	80007f2 <main+0x206>
	case 0b101:
		PWMSet(HI_U, speed);
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <main+0x224>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff fe82 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 0);
 80007c4:	2100      	movs	r1, #0
 80007c6:	2003      	movs	r0, #3
 80007c8:	f7ff fe7e 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, 0);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff fe7a 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 0);
 80007d4:	2100      	movs	r1, #0
 80007d6:	2004      	movs	r0, #4
 80007d8:	f7ff fe76 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, 0);
 80007dc:	2100      	movs	r1, #0
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff fe72 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 256);
 80007e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e8:	2005      	movs	r0, #5
 80007ea:	f7ff fe6d 	bl	80004c8 <PWMSet>
		break;
 80007ee:	e000      	b.n	80007f2 <main+0x206>
	default:
		break;
 80007f0:	bf00      	nop
	state = (Hall_U_State << 2) | (Hall_V_State << 1) | (Hall_W_State);
 80007f2:	e727      	b.n	8000644 <main+0x58>
 80007f4:	200001b8 	.word	0x200001b8
 80007f8:	20000200 	.word	0x20000200
 80007fc:	20000248 	.word	0x20000248
 8000800:	20000290 	.word	0x20000290
 8000804:	20000291 	.word	0x20000291
 8000808:	20000292 	.word	0x20000292
 800080c:	20000293 	.word	0x20000293
 8000810:	20000000 	.word	0x20000000

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	@ 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 ff04 	bl	8008630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <SystemClock_Config+0xd0>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	4a28      	ldr	r2, [pc, #160]	@ (80008e4 <SystemClock_Config+0xd0>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	@ 0x40
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <SystemClock_Config+0xd0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <SystemClock_Config+0xd4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a22      	ldr	r2, [pc, #136]	@ (80008e8 <SystemClock_Config+0xd4>)
 800085e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <SystemClock_Config+0xd4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000870:	2303      	movs	r3, #3
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087a:	2301      	movs	r3, #1
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	2310      	movs	r3, #16
 8000880:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800088c:	2319      	movs	r3, #25
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000890:	2390      	movs	r3, #144	@ 0x90
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000894:	2306      	movs	r3, #6
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000898:	2303      	movs	r3, #3
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fe4f 	bl	8003544 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008ac:	f000 fa5e 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f8b1 	bl	8003a34 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008d8:	f000 fa48 	bl	8000d6c <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	@ 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008fe:	4b21      	ldr	r3, [pc, #132]	@ (8000984 <MX_ADC1_Init+0x98>)
 8000900:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <MX_ADC1_Init+0x9c>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000904:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <MX_ADC1_Init+0x98>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090a:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <MX_ADC1_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000910:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <MX_ADC1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_ADC1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <MX_ADC1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <MX_ADC1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_ADC1_Init+0x98>)
 800092c:	4a17      	ldr	r2, [pc, #92]	@ (800098c <MX_ADC1_Init+0xa0>)
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000930:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_ADC1_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <MX_ADC1_Init+0x98>)
 8000938:	2201      	movs	r2, #1
 800093a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_ADC1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_ADC1_Init+0x98>)
 8000946:	2201      	movs	r2, #1
 8000948:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094a:	480e      	ldr	r0, [pc, #56]	@ (8000984 <MX_ADC1_Init+0x98>)
 800094c:	f000 fd12 	bl	8001374 <HAL_ADC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 fa09 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800095a:	2303      	movs	r3, #3
 800095c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800095e:	2301      	movs	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000966:	463b      	mov	r3, r7
 8000968:	4619      	mov	r1, r3
 800096a:	4806      	ldr	r0, [pc, #24]	@ (8000984 <MX_ADC1_Init+0x98>)
 800096c:	f000 fd46 	bl	80013fc <HAL_ADC_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000976:	f000 f9f9 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000011c 	.word	0x2000011c
 8000988:	40012000 	.word	0x40012000
 800098c:	0f000001 	.word	0x0f000001

08000990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C1_Init+0x50>)
 8000996:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <MX_I2C1_Init+0x54>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_I2C1_Init+0x50>)
 800099c:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_I2C1_Init+0x58>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009ce:	f001 fa23 	bl	8001e18 <HAL_I2C_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d8:	f000 f9c8 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000164 	.word	0x20000164
 80009e4:	40005400 	.word	0x40005400
 80009e8:	000186a0 	.word	0x000186a0

080009ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	@ 0x28
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000a10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a16:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000a22:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000a24:	22ff      	movs	r2, #255	@ 0xff
 8000a26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a34:	481d      	ldr	r0, [pc, #116]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000a36:	f003 f9c9 	bl	8003dcc <HAL_TIM_PWM_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a40:	f000 f994 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4619      	mov	r1, r3
 8000a52:	4816      	ldr	r0, [pc, #88]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000a54:	f003 fdba 	bl	80045cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000a5e:	f000 f985 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a62:	2360      	movs	r3, #96	@ 0x60
 8000a64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000a7a:	f003 faa7 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000a84:	f000 f972 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4807      	ldr	r0, [pc, #28]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000a90:	f003 fa9c 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a9a:	f000 f967 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a9e:	4803      	ldr	r0, [pc, #12]	@ (8000aac <MX_TIM2_Init+0xc0>)
 8000aa0:	f000 fa86 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	@ 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001b8 	.word	0x200001b8

08000ab0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	@ 0x28
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000ad4:	4a27      	ldr	r2, [pc, #156]	@ (8000b74 <MX_TIM3_Init+0xc4>)
 8000ad6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ad8:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000ae6:	22ff      	movs	r2, #255	@ 0xff
 8000ae8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000af6:	481e      	ldr	r0, [pc, #120]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000af8:	f003 f968 	bl	8003dcc <HAL_TIM_PWM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000b02:	f000 f933 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	4619      	mov	r1, r3
 8000b14:	4816      	ldr	r0, [pc, #88]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000b16:	f003 fd59 	bl	80045cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000b20:	f000 f924 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b24:	2360      	movs	r3, #96	@ 0x60
 8000b26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000b3c:	f003 fa46 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b46:	f000 f911 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4807      	ldr	r0, [pc, #28]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000b52:	f003 fa3b 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b5c:	f000 f906 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b60:	4803      	ldr	r0, [pc, #12]	@ (8000b70 <MX_TIM3_Init+0xc0>)
 8000b62:	f000 fa25 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	@ 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000200 	.word	0x20000200
 8000b74:	40000400 	.word	0x40000400

08000b78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
 8000b96:	615a      	str	r2, [r3, #20]
 8000b98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b9a:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000b9c:	4a27      	ldr	r2, [pc, #156]	@ (8000c3c <MX_TIM4_Init+0xc4>)
 8000b9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ba0:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000bae:	22ff      	movs	r2, #255	@ 0xff
 8000bb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bbe:	481e      	ldr	r0, [pc, #120]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000bc0:	f003 f904 	bl	8003dcc <HAL_TIM_PWM_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000bca:	f000 f8cf 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4816      	ldr	r0, [pc, #88]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000bde:	f003 fcf5 	bl	80045cc <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000be8:	f000 f8c0 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bec:	2360      	movs	r3, #96	@ 0x60
 8000bee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000c04:	f003 f9e2 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c0e:	f000 f8ad 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2204      	movs	r2, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000c1a:	f003 f9d7 	bl	8003fcc <HAL_TIM_PWM_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000c24:	f000 f8a2 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c28:	4803      	ldr	r0, [pc, #12]	@ (8000c38 <MX_TIM4_Init+0xc0>)
 8000c2a:	f000 f9c1 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000248 	.word	0x20000248
 8000c3c:	40000800 	.word	0x40000800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b41      	ldr	r3, [pc, #260]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a40      	ldr	r2, [pc, #256]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b3e      	ldr	r3, [pc, #248]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b3a      	ldr	r3, [pc, #232]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a39      	ldr	r2, [pc, #228]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b37      	ldr	r3, [pc, #220]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b33      	ldr	r3, [pc, #204]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a32      	ldr	r2, [pc, #200]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b30      	ldr	r3, [pc, #192]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b2c      	ldr	r3, [pc, #176]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b29      	ldr	r3, [pc, #164]	@ (8000d60 <MX_GPIO_Init+0x120>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(N_USER_LED_GPIO_Port, N_USER_LED_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ccc:	4825      	ldr	r0, [pc, #148]	@ (8000d64 <MX_GPIO_Init+0x124>)
 8000cce:	f001 f871 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(N_USER_LEDA15_GPIO_Port, N_USER_LEDA15_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cd8:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <MX_GPIO_Init+0x128>)
 8000cda:	f001 f86b 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : N_USER_LED_Pin */
  GPIO_InitStruct.Pin = N_USER_LED_Pin;
 8000cde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(N_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481b      	ldr	r0, [pc, #108]	@ (8000d64 <MX_GPIO_Init+0x124>)
 8000cf8:	f000 fec0 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_U_Pin HALL_V_Pin HALL_W_Pin */
  GPIO_InitStruct.Pin = HALL_U_Pin|HALL_V_Pin|HALL_W_Pin;
 8000cfc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d02:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4815      	ldr	r0, [pc, #84]	@ (8000d68 <MX_GPIO_Init+0x128>)
 8000d14:	f000 feb2 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : N_USER_LEDA15_Pin */
  GPIO_InitStruct.Pin = N_USER_LEDA15_Pin;
 8000d18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(N_USER_LEDA15_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <MX_GPIO_Init+0x128>)
 8000d32:	f000 fea3 	bl	8001a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2017      	movs	r0, #23
 8000d3c:	f000 fe67 	bl	8001a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d40:	2017      	movs	r0, #23
 8000d42:	f000 fe80 	bl	8001a46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2028      	movs	r0, #40	@ 0x28
 8000d4c:	f000 fe5f 	bl	8001a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d50:	2028      	movs	r0, #40	@ 0x28
 8000d52:	f000 fe78 	bl	8001a46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	@ 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020000 	.word	0x40020000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <Error_Handler+0x8>

08000d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a24      	ldr	r2, [pc, #144]	@ (8000e78 <HAL_ADC_MspInit+0xb0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d141      	bne.n	8000e6e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b23      	ldr	r3, [pc, #140]	@ (8000e7c <HAL_ADC_MspInit+0xb4>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	4a22      	ldr	r2, [pc, #136]	@ (8000e7c <HAL_ADC_MspInit+0xb4>)
 8000df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfa:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <HAL_ADC_MspInit+0xb4>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_ADC_MspInit+0xb4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <HAL_ADC_MspInit+0xb4>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_ADC_MspInit+0xb4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_ADC_MspInit+0xb4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <HAL_ADC_MspInit+0xb4>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_ADC_MspInit+0xb4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = I_SENSE_W_Pin|V_SENSE_W_Pin|I_SENSE_V_Pin|V_SENSE_V_Pin
 8000e3e:	239b      	movs	r3, #155	@ 0x9b
 8000e40:	617b      	str	r3, [r7, #20]
                          |I_SENSE_U_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e42:	2303      	movs	r3, #3
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480b      	ldr	r0, [pc, #44]	@ (8000e80 <HAL_ADC_MspInit+0xb8>)
 8000e52:	f000 fe13 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_SENSE_U_Pin;
 8000e56:	2301      	movs	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_SENSE_U_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <HAL_ADC_MspInit+0xbc>)
 8000e6a:	f000 fe07 	bl	8001a7c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	@ 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40012000 	.word	0x40012000
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000
 8000e84:	40020400 	.word	0x40020400

08000e88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	@ (8000f0c <HAL_I2C_MspInit+0x84>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12c      	bne.n	8000f04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <HAL_I2C_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a17      	ldr	r2, [pc, #92]	@ (8000f10 <HAL_I2C_MspInit+0x88>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_I2C_MspInit+0x88>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ecc:	2312      	movs	r3, #18
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <HAL_I2C_MspInit+0x8c>)
 8000ee4:	f000 fdca 	bl	8001a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <HAL_I2C_MspInit+0x88>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <HAL_I2C_MspInit+0x88>)
 8000ef2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <HAL_I2C_MspInit+0x88>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	@ 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40005400 	.word	0x40005400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020400 	.word	0x40020400

08000f18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f28:	d10e      	bne.n	8000f48 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f46:	e026      	b.n	8000f96 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a16      	ldr	r2, [pc, #88]	@ (8000fa8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10e      	bne.n	8000f70 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
}
 8000f6e:	e012      	b.n	8000f96 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <HAL_TIM_PWM_MspInit+0x94>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10d      	bne.n	8000f96 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
}
 8000f96:	bf00      	nop
 8000f98:	371c      	adds	r7, #28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40000400 	.word	0x40000400
 8000fac:	40000800 	.word	0x40000800

08000fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	@ 0x30
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fd0:	d13d      	bne.n	800104e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
 8000fd6:	4b52      	ldr	r3, [pc, #328]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a51      	ldr	r2, [pc, #324]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
 8000fec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b48      	ldr	r3, [pc, #288]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LO_V_Pin;
 800100a:	2320      	movs	r3, #32
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800101a:	2301      	movs	r3, #1
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LO_V_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	483f      	ldr	r0, [pc, #252]	@ (8001124 <HAL_TIM_MspPostInit+0x174>)
 8001026:	f000 fd29 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HI_U_Pin;
 800102a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(HI_U_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4838      	ldr	r0, [pc, #224]	@ (8001128 <HAL_TIM_MspPostInit+0x178>)
 8001048:	f000 fd18 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800104c:	e064      	b.n	8001118 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM3)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a36      	ldr	r2, [pc, #216]	@ (800112c <HAL_TIM_MspPostInit+0x17c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d13c      	bne.n	80010d2 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	4a2f      	ldr	r2, [pc, #188]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6313      	str	r3, [r2, #48]	@ 0x30
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	4a28      	ldr	r2, [pc, #160]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	6313      	str	r3, [r2, #48]	@ 0x30
 8001084:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HI_V_Pin;
 8001090:	2340      	movs	r3, #64	@ 0x40
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010a0:	2302      	movs	r3, #2
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(HI_V_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	481e      	ldr	r0, [pc, #120]	@ (8001124 <HAL_TIM_MspPostInit+0x174>)
 80010ac:	f000 fce6 	bl	8001a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LO_U_Pin;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c0:	2302      	movs	r3, #2
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LO_U_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4817      	ldr	r0, [pc, #92]	@ (8001128 <HAL_TIM_MspPostInit+0x178>)
 80010cc:	f000 fcd6 	bl	8001a7c <HAL_GPIO_Init>
}
 80010d0:	e022      	b.n	8001118 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <HAL_TIM_MspPostInit+0x180>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d11d      	bne.n	8001118 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <HAL_TIM_MspPostInit+0x170>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LO_W_Pin|HI_W_Pin;
 80010f8:	23c0      	movs	r3, #192	@ 0xc0
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001108:	2302      	movs	r3, #2
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <HAL_TIM_MspPostInit+0x178>)
 8001114:	f000 fcb2 	bl	8001a7c <HAL_GPIO_Init>
}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	@ 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40000400 	.word	0x40000400
 8001130:	40000800 	.word	0x40000800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <UsageFault_Handler+0x4>

0800115c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f000 f8af 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}

08001192 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_U_Pin);
 8001196:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800119a:	f000 fe25 	bl	8001de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HALL_V_Pin);
 800119e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011a2:	f000 fe21 	bl	8001de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}

080011aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_W_Pin);
 80011ae:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80011b2:	f000 fe19 	bl	8001de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <OTG_FS_IRQHandler+0x10>)
 80011c2:	f001 f8b1 	bl	8002328 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000fb8 	.word	0x20000fb8

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800122c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f8:	f7ff ffea 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011fe:	490d      	ldr	r1, [pc, #52]	@ (8001234 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001214:	4c0a      	ldr	r4, [pc, #40]	@ (8001240 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f007 fa0d 	bl	8008640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff f9e1 	bl	80005ec <main>
  bx  lr    
 800122a:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 800122c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001238:	08008710 	.word	0x08008710
  ldr r2, =_sbss
 800123c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001240:	200016bc 	.word	0x200016bc

08001244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800124c:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <HAL_Init+0x40>)
 8001252:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_Init+0x40>)
 800125e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <HAL_Init+0x40>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 fbc1 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	200f      	movs	r0, #15
 8001278:	f000 f808 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fd7c 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023c00 	.word	0x40023c00

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fbd9 	bl	8001a62 <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c8:	f000 fba1 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000004 	.word	0x20000004
 80012e4:	2000000c 	.word	0x2000000c
 80012e8:	20000008 	.word	0x20000008

080012ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_IncTick+0x20>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_IncTick+0x24>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <HAL_IncTick+0x24>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000000c 	.word	0x2000000c
 8001310:	20000294 	.word	0x20000294

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000294 	.word	0x20000294

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff ffee 	bl	8001314 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_Delay+0x44>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001352:	bf00      	nop
 8001354:	f7ff ffde 	bl	8001314 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000000c 	.word	0x2000000c

08001374 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e033      	b.n	80013f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	2b00      	cmp	r3, #0
 8001390:	d109      	bne.n	80013a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fd18 	bl	8000dc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d118      	bne.n	80013e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013ba:	f023 0302 	bic.w	r3, r3, #2
 80013be:	f043 0202 	orr.w	r2, r3, #2
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f94a 	bl	8001660 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	f023 0303 	bic.w	r3, r3, #3
 80013da:	f043 0201 	orr.w	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80013e2:	e001      	b.n	80013e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x1c>
 8001414:	2302      	movs	r3, #2
 8001416:	e113      	b.n	8001640 <HAL_ADC_ConfigChannel+0x244>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b09      	cmp	r3, #9
 8001426:	d925      	bls.n	8001474 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68d9      	ldr	r1, [r3, #12]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	3b1e      	subs	r3, #30
 800143e:	2207      	movs	r2, #7
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43da      	mvns	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	400a      	ands	r2, r1
 800144c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68d9      	ldr	r1, [r3, #12]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	4603      	mov	r3, r0
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4403      	add	r3, r0
 8001466:	3b1e      	subs	r3, #30
 8001468:	409a      	lsls	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	e022      	b.n	80014ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6919      	ldr	r1, [r3, #16]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	2207      	movs	r2, #7
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6919      	ldr	r1, [r3, #16]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4403      	add	r3, r0
 80014b0:	409a      	lsls	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d824      	bhi.n	800150c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	3b05      	subs	r3, #5
 80014d4:	221f      	movs	r2, #31
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	400a      	ands	r2, r1
 80014e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	3b05      	subs	r3, #5
 80014fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	635a      	str	r2, [r3, #52]	@ 0x34
 800150a:	e04c      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b0c      	cmp	r3, #12
 8001512:	d824      	bhi.n	800155e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	3b23      	subs	r3, #35	@ 0x23
 8001526:	221f      	movs	r2, #31
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43da      	mvns	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	400a      	ands	r2, r1
 8001534:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	3b23      	subs	r3, #35	@ 0x23
 8001550:	fa00 f203 	lsl.w	r2, r0, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	631a      	str	r2, [r3, #48]	@ 0x30
 800155c:	e023      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	3b41      	subs	r3, #65	@ 0x41
 8001570:	221f      	movs	r2, #31
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	400a      	ands	r2, r1
 800157e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	3b41      	subs	r3, #65	@ 0x41
 800159a:	fa00 f203 	lsl.w	r2, r0, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a6:	4b29      	ldr	r3, [pc, #164]	@ (800164c <HAL_ADC_ConfigChannel+0x250>)
 80015a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a28      	ldr	r2, [pc, #160]	@ (8001650 <HAL_ADC_ConfigChannel+0x254>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d10f      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1d8>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b12      	cmp	r3, #18
 80015ba:	d10b      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001650 <HAL_ADC_ConfigChannel+0x254>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12b      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x23a>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_ADC_ConfigChannel+0x258>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d003      	beq.n	80015f0 <HAL_ADC_ConfigChannel+0x1f4>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b11      	cmp	r3, #17
 80015ee:	d122      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a11      	ldr	r2, [pc, #68]	@ (8001654 <HAL_ADC_ConfigChannel+0x258>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d111      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_ADC_ConfigChannel+0x25c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a11      	ldr	r2, [pc, #68]	@ (800165c <HAL_ADC_ConfigChannel+0x260>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	0c9a      	lsrs	r2, r3, #18
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001628:	e002      	b.n	8001630 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3b01      	subs	r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f9      	bne.n	800162a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40012300 	.word	0x40012300
 8001650:	40012000 	.word	0x40012000
 8001654:	10000012 	.word	0x10000012
 8001658:	20000004 	.word	0x20000004
 800165c:	431bde83 	.word	0x431bde83

08001660 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001668:	4b79      	ldr	r3, [pc, #484]	@ (8001850 <ADC_Init+0x1f0>)
 800166a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	431a      	orrs	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	021a      	lsls	r2, r3, #8
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6899      	ldr	r1, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f2:	4a58      	ldr	r2, [pc, #352]	@ (8001854 <ADC_Init+0x1f4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d022      	beq.n	800173e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6899      	ldr	r1, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6899      	ldr	r1, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	e00f      	b.n	800175e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800174c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800175c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0202 	bic.w	r2, r2, #2
 800176c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6899      	ldr	r1, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7e1b      	ldrb	r3, [r3, #24]
 8001778:	005a      	lsls	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01b      	beq.n	80017c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800179a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	3b01      	subs	r3, #1
 80017b8:	035a      	lsls	r2, r3, #13
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	e007      	b.n	80017d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	051a      	lsls	r2, r3, #20
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6899      	ldr	r1, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001816:	025a      	lsls	r2, r3, #9
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800182e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6899      	ldr	r1, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	029a      	lsls	r2, r3, #10
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	609a      	str	r2, [r3, #8]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40012300 	.word	0x40012300
 8001854:	0f000001 	.word	0x0f000001

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4907      	ldr	r1, [pc, #28]	@ (80018f4 <__NVIC_EnableIRQ+0x38>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	@ (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	@ (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	@ 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	@ 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019d8:	f7ff ff8e 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff29 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff3e 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff8e 	bl	800194c <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5d 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff31 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e159      	b.n	8001d4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 8148 	bne.w	8001d46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d005      	beq.n	8001ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d017      	beq.n	8001b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80a2 	beq.w	8001d46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b57      	ldr	r3, [pc, #348]	@ (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	4a56      	ldr	r2, [pc, #344]	@ (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c12:	4b54      	ldr	r3, [pc, #336]	@ (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a52      	ldr	r2, [pc, #328]	@ (8001d68 <HAL_GPIO_Init+0x2ec>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a49      	ldr	r2, [pc, #292]	@ (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x202>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a48      	ldr	r2, [pc, #288]	@ (8001d70 <HAL_GPIO_Init+0x2f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x1fe>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a47      	ldr	r2, [pc, #284]	@ (8001d74 <HAL_GPIO_Init+0x2f8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x1fa>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a46      	ldr	r2, [pc, #280]	@ (8001d78 <HAL_GPIO_Init+0x2fc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x1f6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a45      	ldr	r2, [pc, #276]	@ (8001d7c <HAL_GPIO_Init+0x300>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x1f2>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e008      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c90:	4935      	ldr	r1, [pc, #212]	@ (8001d68 <HAL_GPIO_Init+0x2ec>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b38      	ldr	r3, [pc, #224]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cec:	4a24      	ldr	r2, [pc, #144]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf2:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d16:	4a1a      	ldr	r2, [pc, #104]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d40:	4a0f      	ldr	r2, [pc, #60]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	f67f aea2 	bls.w	8001a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3724      	adds	r7, #36	@ 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40013c00 	.word	0x40013c00

08001d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	887b      	ldrh	r3, [r7, #2]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e001      	b.n	8001da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001df2:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dfe:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fba4 	bl	8000554 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e12b      	b.n	8002082 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff f822 	bl	8000e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2224      	movs	r2, #36	@ 0x24
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e7c:	f001 ff92 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8001e80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4a81      	ldr	r2, [pc, #516]	@ (800208c <HAL_I2C_Init+0x274>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d807      	bhi.n	8001e9c <HAL_I2C_Init+0x84>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a80      	ldr	r2, [pc, #512]	@ (8002090 <HAL_I2C_Init+0x278>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	bf94      	ite	ls
 8001e94:	2301      	movls	r3, #1
 8001e96:	2300      	movhi	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	e006      	b.n	8001eaa <HAL_I2C_Init+0x92>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8002094 <HAL_I2C_Init+0x27c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	bf94      	ite	ls
 8001ea4:	2301      	movls	r3, #1
 8001ea6:	2300      	movhi	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0e7      	b.n	8002082 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4a78      	ldr	r2, [pc, #480]	@ (8002098 <HAL_I2C_Init+0x280>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0c9b      	lsrs	r3, r3, #18
 8001ebc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4a6a      	ldr	r2, [pc, #424]	@ (800208c <HAL_I2C_Init+0x274>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d802      	bhi.n	8001eec <HAL_I2C_Init+0xd4>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	e009      	b.n	8001f00 <HAL_I2C_Init+0xe8>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	4a69      	ldr	r2, [pc, #420]	@ (800209c <HAL_I2C_Init+0x284>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	3301      	adds	r3, #1
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	495c      	ldr	r1, [pc, #368]	@ (800208c <HAL_I2C_Init+0x274>)
 8001f1c:	428b      	cmp	r3, r1
 8001f1e:	d819      	bhi.n	8001f54 <HAL_I2C_Init+0x13c>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e59      	subs	r1, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f2e:	1c59      	adds	r1, r3, #1
 8001f30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f34:	400b      	ands	r3, r1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_I2C_Init+0x138>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e59      	subs	r1, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4e:	e051      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001f50:	2304      	movs	r3, #4
 8001f52:	e04f      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d111      	bne.n	8001f80 <HAL_I2C_Init+0x168>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1e58      	subs	r0, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	440b      	add	r3, r1
 8001f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e012      	b.n	8001fa6 <HAL_I2C_Init+0x18e>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e58      	subs	r0, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	0099      	lsls	r1, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Init+0x196>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e022      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_I2C_Init+0x1bc>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1e58      	subs	r0, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	440b      	add	r3, r1
 8001fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fd2:	e00f      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1e58      	subs	r0, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	0099      	lsls	r1, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	6809      	ldr	r1, [r1, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002022:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6911      	ldr	r1, [r2, #16]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68d2      	ldr	r2, [r2, #12]
 800202e:	4311      	orrs	r1, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	430b      	orrs	r3, r1
 8002036:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	000186a0 	.word	0x000186a0
 8002090:	001e847f 	.word	0x001e847f
 8002094:	003d08ff 	.word	0x003d08ff
 8002098:	431bde83 	.word	0x431bde83
 800209c:	10624dd3 	.word	0x10624dd3

080020a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e101      	b.n	80022b6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d106      	bne.n	80020d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f005 ffa5 	bl	800801c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2203      	movs	r2, #3
 80020d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020e0:	d102      	bne.n	80020e8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fbf2 	bl	80048d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7c1a      	ldrb	r2, [r3, #16]
 80020fa:	f88d 2000 	strb.w	r2, [sp]
 80020fe:	3304      	adds	r3, #4
 8002100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002102:	f002 fad1 	bl	80046a8 <USB_CoreInit>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0ce      	b.n	80022b6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f002 fbea 	bl	80048f8 <USB_SetCurrentMode>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e0bf      	b.n	80022b6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e04a      	b.n	80021d2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3315      	adds	r3, #21
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3314      	adds	r3, #20
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	b298      	uxth	r0, r3
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	332e      	adds	r3, #46	@ 0x2e
 8002178:	4602      	mov	r2, r0
 800217a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3318      	adds	r3, #24
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	331c      	adds	r3, #28
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3320      	adds	r3, #32
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3324      	adds	r3, #36	@ 0x24
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	3301      	adds	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d3af      	bcc.n	800213c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e044      	b.n	800226c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	3301      	adds	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	791b      	ldrb	r3, [r3, #4]
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	429a      	cmp	r2, r3
 8002274:	d3b5      	bcc.n	80021e2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7c1a      	ldrb	r2, [r3, #16]
 800227e:	f88d 2000 	strb.w	r2, [sp]
 8002282:	3304      	adds	r3, #4
 8002284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002286:	f002 fb83 	bl	8004990 <USB_DevInit>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e00c      	b.n	80022b6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 fbcd 	bl	8005a4e <USB_DevDisconnect>

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_PCD_Start+0x1c>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e022      	b.n	8002320 <HAL_PCD_Start+0x62>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f002 fad4 	bl	80048b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f003 fb7b 	bl	8005a0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b08d      	sub	sp, #52	@ 0x34
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fc39 	bl	8005bb6 <USB_GetMode>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 848c 	bne.w	8002c64 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f003 fb9d 	bl	8005a90 <USB_ReadInterrupts>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8482 	beq.w	8002c62 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fb8a 	bl	8005a90 <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d107      	bne.n	8002396 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f002 0202 	and.w	r2, r2, #2
 8002394:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fb78 	bl	8005a90 <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d161      	bne.n	800246e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0210 	bic.w	r2, r2, #16
 80023b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 020f 	and.w	r2, r3, #15
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	3304      	adds	r3, #4
 80023d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	0c5b      	lsrs	r3, r3, #17
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d124      	bne.n	8002430 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d035      	beq.n	800245e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	6a38      	ldr	r0, [r7, #32]
 8002406:	f003 f9af 	bl	8005768 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002416:	441a      	add	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002428:	441a      	add	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	615a      	str	r2, [r3, #20]
 800242e:	e016      	b.n	800245e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	0c5b      	lsrs	r3, r3, #17
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	2b06      	cmp	r3, #6
 800243a:	d110      	bne.n	800245e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002442:	2208      	movs	r2, #8
 8002444:	4619      	mov	r1, r3
 8002446:	6a38      	ldr	r0, [r7, #32]
 8002448:	f003 f98e 	bl	8005768 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002458:	441a      	add	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699a      	ldr	r2, [r3, #24]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0210 	orr.w	r2, r2, #16
 800246c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fb0c 	bl	8005a90 <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800247e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002482:	f040 80a7 	bne.w	80025d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 fb11 	bl	8005ab6 <USB_ReadDevAllOutEpInterrupt>
 8002494:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002496:	e099      	b.n	80025cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 808e 	beq.w	80025c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 fb35 	bl	8005b1e <USB_ReadDevOutEPInterrupt>
 80024b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024cc:	461a      	mov	r2, r3
 80024ce:	2301      	movs	r3, #1
 80024d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fea3 	bl	8003220 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	2308      	movs	r3, #8
 80024f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 ff79 	bl	80033f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002514:	461a      	mov	r2, r3
 8002516:	2310      	movs	r3, #16
 8002518:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d030      	beq.n	8002586 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252c:	2b80      	cmp	r3, #128	@ 0x80
 800252e:	d109      	bne.n	8002544 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800253e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002542:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	3304      	adds	r3, #4
 8002558:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	78db      	ldrb	r3, [r3, #3]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d108      	bne.n	8002574 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2200      	movs	r2, #0
 8002566:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f005 fe50 	bl	8008214 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	4413      	add	r3, r2
 800257c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002580:	461a      	mov	r2, r3
 8002582:	2302      	movs	r3, #2
 8002584:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	4413      	add	r3, r2
 8002598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800259c:	461a      	mov	r2, r3
 800259e:	2320      	movs	r3, #32
 80025a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	3301      	adds	r3, #1
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80025cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f47f af62 	bne.w	8002498 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fa59 	bl	8005a90 <USB_ReadInterrupts>
 80025de:	4603      	mov	r3, r0
 80025e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025e8:	f040 80db 	bne.w	80027a2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 fa7a 	bl	8005aea <USB_ReadDevAllInEpInterrupt>
 80025f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80025fc:	e0cd      	b.n	800279a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80c2 	beq.w	800278e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f003 faa0 	bl	8005b5a <USB_ReadDevInEPInterrupt>
 800261a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d057      	beq.n	80026d6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	2201      	movs	r2, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800263a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43db      	mvns	r3, r3
 8002640:	69f9      	ldr	r1, [r7, #28]
 8002642:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002646:	4013      	ands	r3, r2
 8002648:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002656:	461a      	mov	r2, r3
 8002658:	2301      	movs	r3, #1
 800265a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	799b      	ldrb	r3, [r3, #6]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d132      	bne.n	80026ca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3320      	adds	r3, #32
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4403      	add	r3, r0
 8002684:	331c      	adds	r3, #28
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4419      	add	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4403      	add	r3, r0
 8002698:	3320      	adds	r3, #32
 800269a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800269c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d113      	bne.n	80026ca <HAL_PCD_IRQHandler+0x3a2>
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	3324      	adds	r3, #36	@ 0x24
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d108      	bne.n	80026ca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026c2:	461a      	mov	r2, r3
 80026c4:	2101      	movs	r1, #1
 80026c6:	f003 faa7 	bl	8005c18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4619      	mov	r1, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f005 fd24 	bl	800811e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026ec:	461a      	mov	r2, r3
 80026ee:	2308      	movs	r3, #8
 80026f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002708:	461a      	mov	r2, r3
 800270a:	2310      	movs	r3, #16
 800270c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002724:	461a      	mov	r2, r3
 8002726:	2340      	movs	r3, #64	@ 0x40
 8002728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002734:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002736:	6a38      	ldr	r0, [r7, #32]
 8002738:	f002 fa8e 	bl	8004c58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800273c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	3310      	adds	r3, #16
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	3304      	adds	r3, #4
 800274e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	78db      	ldrb	r3, [r3, #3]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d108      	bne.n	800276a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2200      	movs	r2, #0
 800275c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	b2db      	uxtb	r3, r3
 8002762:	4619      	mov	r1, r3
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f005 fd67 	bl	8008238 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002776:	461a      	mov	r2, r3
 8002778:	2302      	movs	r3, #2
 800277a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002786:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fcbd 	bl	8003108 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	3301      	adds	r3, #1
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800279a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	f47f af2e 	bne.w	80025fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 f972 	bl	8005a90 <USB_ReadInterrupts>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027b6:	d122      	bne.n	80027fe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d108      	bne.n	80027e8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027de:	2100      	movs	r1, #0
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fea3 	bl	800352c <HAL_PCDEx_LPM_Callback>
 80027e6:	e002      	b.n	80027ee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f005 fd05 	bl	80081f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80027fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 f944 	bl	8005a90 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800280e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002812:	d112      	bne.n	800283a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d102      	bne.n	800282a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f005 fcc1 	bl	80081ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002838:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f003 f926 	bl	8005a90 <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800284e:	f040 80b7 	bne.w	80029c0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2110      	movs	r1, #16
 800286c:	4618      	mov	r0, r3
 800286e:	f002 f9f3 	bl	8004c58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002876:	e046      	b.n	8002906 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002884:	461a      	mov	r2, r3
 8002886:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800288a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800289c:	0151      	lsls	r1, r2, #5
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	440a      	add	r2, r1
 80028a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80028a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028b8:	461a      	mov	r2, r3
 80028ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d0:	0151      	lsls	r1, r2, #5
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	440a      	add	r2, r1
 80028d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80028da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028f0:	0151      	lsls	r1, r2, #5
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	440a      	add	r2, r1
 80028f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80028fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80028fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002902:	3301      	adds	r3, #1
 8002904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	791b      	ldrb	r3, [r3, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290e:	4293      	cmp	r3, r2
 8002910:	d3b2      	bcc.n	8002878 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002920:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002924:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7bdb      	ldrb	r3, [r3, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800293e:	f043 030b 	orr.w	r3, r3, #11
 8002942:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002954:	f043 030b 	orr.w	r3, r3, #11
 8002958:	6453      	str	r3, [r2, #68]	@ 0x44
 800295a:	e015      	b.n	8002988 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800296a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800296e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002972:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002982:	f043 030b 	orr.w	r3, r3, #11
 8002986:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002996:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800299a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029aa:	461a      	mov	r2, r3
 80029ac:	f003 f934 	bl	8005c18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80029be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 f863 	bl	8005a90 <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029d4:	d123      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 f8f9 	bl	8005bd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f002 f9b0 	bl	8004d4a <USB_GetDevSpeed>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681c      	ldr	r4, [r3, #0]
 80029f6:	f001 f9c9 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 80029fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a00:	461a      	mov	r2, r3
 8002a02:	4620      	mov	r0, r4
 8002a04:	f001 feb4 	bl	8004770 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f005 fbb0 	bl	800816e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 f834 	bl	8005a90 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d10a      	bne.n	8002a48 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f005 fb8d 	bl	8008152 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f002 0208 	and.w	r2, r2, #8
 8002a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f003 f81f 	bl	8005a90 <USB_ReadInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a58:	2b80      	cmp	r3, #128	@ 0x80
 8002a5a:	d123      	bne.n	8002aa4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a68:	2301      	movs	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6c:	e014      	b.n	8002a98 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d105      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fb0a 	bl	80030a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	791b      	ldrb	r3, [r3, #4]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d3e4      	bcc.n	8002a6e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f002 fff1 	bl	8005a90 <USB_ReadInterrupts>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ab4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ab8:	d13c      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aba:	2301      	movs	r3, #1
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002abe:	e02b      	b.n	8002b18 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	3318      	adds	r3, #24
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d115      	bne.n	8002b12 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	da12      	bge.n	8002b12 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3317      	adds	r3, #23
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 faca 	bl	80030a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	3301      	adds	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	791b      	ldrb	r3, [r3, #4]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d3cd      	bcc.n	8002ac0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 ffa9 	bl	8005a90 <USB_ReadInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b48:	d156      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b4e:	e045      	b.n	8002bdc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d12e      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	da2b      	bge.n	8002bd6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002b8a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d121      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bd2:	6053      	str	r3, [r2, #4]
            break;
 8002bd4:	e008      	b.n	8002be8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	3301      	adds	r3, #1
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	791b      	ldrb	r3, [r3, #4]
 8002be0:	461a      	mov	r2, r3
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d3b3      	bcc.n	8002b50 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f002 ff47 	bl	8005a90 <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0c:	d10a      	bne.n	8002c24 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f005 fb24 	bl	800825c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f002 ff31 	bl	8005a90 <USB_ReadInterrupts>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d115      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f005 fb14 	bl	8008278 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	e000      	b.n	8002c64 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002c62:	bf00      	nop
    }
  }
}
 8002c64:	3734      	adds	r7, #52	@ 0x34
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd90      	pop	{r4, r7, pc}

08002c6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_PCD_SetAddress+0x1a>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e012      	b.n	8002caa <HAL_PCD_SetAddress+0x40>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 fe90 	bl	80059c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	4608      	mov	r0, r1
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	70fb      	strb	r3, [r7, #3]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	803b      	strh	r3, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	da0f      	bge.n	8002cf8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	f003 020f 	and.w	r2, r3, #15
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	3310      	adds	r3, #16
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4413      	add	r3, r2
 8002cec:	3304      	adds	r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	705a      	strb	r2, [r3, #1]
 8002cf6:	e00f      	b.n	8002d18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 020f 	and.w	r2, r3, #15
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3304      	adds	r3, #4
 8002d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002d24:	883b      	ldrh	r3, [r7, #0]
 8002d26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	78ba      	ldrb	r2, [r7, #2]
 8002d32:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	785b      	ldrb	r3, [r3, #1]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d46:	78bb      	ldrb	r3, [r7, #2]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d102      	bne.n	8002d52 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_PCD_EP_Open+0xae>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e00e      	b.n	8002d7e <HAL_PCD_EP_Open+0xcc>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68f9      	ldr	r1, [r7, #12]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f002 f810 	bl	8004d94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da0f      	bge.n	8002dba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 020f 	and.w	r2, r3, #15
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	3310      	adds	r3, #16
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	705a      	strb	r2, [r3, #1]
 8002db8:	e00f      	b.n	8002dda <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	f003 020f 	and.w	r2, r3, #15
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_PCD_EP_Close+0x6e>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e00e      	b.n	8002e12 <HAL_PCD_EP_Close+0x8c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 f84e 	bl	8004ea4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	460b      	mov	r3, r1
 8002e28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5c:	7afb      	ldrb	r3, [r7, #11]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	799b      	ldrb	r3, [r3, #6]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d102      	bne.n	8002e76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	799b      	ldrb	r3, [r3, #6]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	6979      	ldr	r1, [r7, #20]
 8002e82:	f002 f8eb 	bl	800505c <USB_EPStartXfer>

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 020f 	and.w	r2, r3, #15
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed0:	7afb      	ldrb	r3, [r7, #11]
 8002ed2:	f003 020f 	and.w	r2, r3, #15
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	3310      	adds	r3, #16
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2201      	movs	r2, #1
 8002efe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	799b      	ldrb	r3, [r3, #6]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d102      	bne.n	8002f1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	799b      	ldrb	r3, [r3, #6]
 8002f22:	461a      	mov	r2, r3
 8002f24:	6979      	ldr	r1, [r7, #20]
 8002f26:	f002 f899 	bl	800505c <USB_EPStartXfer>

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	7912      	ldrb	r2, [r2, #4]
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e04f      	b.n	8002ff2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da0f      	bge.n	8002f7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 020f 	and.w	r2, r3, #15
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	3310      	adds	r3, #16
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	705a      	strb	r2, [r3, #1]
 8002f78:	e00d      	b.n	8002f96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_PCD_EP_SetStall+0x82>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e01d      	b.n	8002ff2 <HAL_PCD_EP_SetStall+0xbe>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68f9      	ldr	r1, [r7, #12]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 fc27 	bl	8005818 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7999      	ldrb	r1, [r3, #6]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f002 fe18 	bl	8005c18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	7912      	ldrb	r2, [r2, #4]
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e042      	b.n	800309e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301c:	2b00      	cmp	r3, #0
 800301e:	da0f      	bge.n	8003040 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	f003 020f 	and.w	r2, r3, #15
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	3310      	adds	r3, #16
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4413      	add	r3, r2
 8003034:	3304      	adds	r3, #4
 8003036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	705a      	strb	r2, [r3, #1]
 800303e:	e00f      	b.n	8003060 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	3304      	adds	r3, #4
 8003058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	b2da      	uxtb	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_PCD_EP_ClrStall+0x86>
 800307c:	2302      	movs	r3, #2
 800307e:	e00e      	b.n	800309e <HAL_PCD_EP_ClrStall+0xa4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68f9      	ldr	r1, [r7, #12]
 800308e:	4618      	mov	r0, r3
 8003090:	f002 fc30 	bl	80058f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da0c      	bge.n	80030d4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 020f 	and.w	r2, r3, #15
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	3310      	adds	r3, #16
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	e00c      	b.n	80030ee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 020f 	and.w	r2, r3, #15
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	3304      	adds	r3, #4
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f002 fa4f 	bl	8005598 <USB_EPStopXfer>
 80030fa:	4603      	mov	r3, r0
 80030fc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af02      	add	r7, sp, #8
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	3310      	adds	r3, #16
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	3304      	adds	r3, #4
 800312e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d901      	bls.n	8003140 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e06b      	b.n	8003218 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	429a      	cmp	r2, r3
 8003154:	d902      	bls.n	800315c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	3303      	adds	r3, #3
 8003160:	089b      	lsrs	r3, r3, #2
 8003162:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003164:	e02a      	b.n	80031bc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	429a      	cmp	r2, r3
 800317a:	d902      	bls.n	8003182 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3303      	adds	r3, #3
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68d9      	ldr	r1, [r3, #12]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4603      	mov	r3, r0
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f002 faa4 	bl	80056ec <USB_WritePacket>

    ep->xfer_buff  += len;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	441a      	add	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	441a      	add	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d809      	bhi.n	80031e6 <PCD_WriteEmptyTxFifo+0xde>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031da:	429a      	cmp	r2, r3
 80031dc:	d203      	bcs.n	80031e6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1bf      	bne.n	8003166 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d811      	bhi.n	8003216 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	2201      	movs	r2, #1
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	43db      	mvns	r3, r3
 800320c:	6939      	ldr	r1, [r7, #16]
 800320e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003212:	4013      	ands	r3, r2
 8003214:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	333c      	adds	r3, #60	@ 0x3c
 8003238:	3304      	adds	r3, #4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	799b      	ldrb	r3, [r3, #6]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d17b      	bne.n	800334e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d015      	beq.n	800328c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	4a61      	ldr	r2, [pc, #388]	@ (80033e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	f240 80b9 	bls.w	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80b3 	beq.w	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003282:	461a      	mov	r2, r3
 8003284:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003288:	6093      	str	r3, [r2, #8]
 800328a:	e0a7      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a2:	461a      	mov	r2, r3
 80032a4:	2320      	movs	r3, #32
 80032a6:	6093      	str	r3, [r2, #8]
 80032a8:	e098      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f040 8093 	bne.w	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	4a4b      	ldr	r2, [pc, #300]	@ (80033e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d90f      	bls.n	80032de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d4:	461a      	mov	r2, r3
 80032d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032da:	6093      	str	r3, [r2, #8]
 80032dc:	e07e      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	0159      	lsls	r1, r3, #5
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	440b      	add	r3, r1
 8003300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330a:	1ad2      	subs	r2, r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d114      	bne.n	8003340 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003328:	461a      	mov	r2, r3
 800332a:	2101      	movs	r1, #1
 800332c:	f002 fc74 	bl	8005c18 <USB_EP0_OutStart>
 8003330:	e006      	b.n	8003340 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	441a      	add	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	4619      	mov	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f004 fece 	bl	80080e8 <HAL_PCD_DataOutStageCallback>
 800334c:	e046      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	4a26      	ldr	r2, [pc, #152]	@ (80033ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d124      	bne.n	80033a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003372:	6093      	str	r3, [r2, #8]
 8003374:	e032      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800338c:	461a      	mov	r2, r3
 800338e:	2320      	movs	r3, #32
 8003390:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f004 fea5 	bl	80080e8 <HAL_PCD_DataOutStageCallback>
 800339e:	e01d      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d114      	bne.n	80033d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d108      	bne.n	80033d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033c8:	461a      	mov	r2, r3
 80033ca:	2100      	movs	r1, #0
 80033cc:	f002 fc24 	bl	8005c18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f004 fe86 	bl	80080e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	4f54300a 	.word	0x4f54300a
 80033ec:	4f54310a 	.word	0x4f54310a

080033f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	333c      	adds	r3, #60	@ 0x3c
 8003408:	3304      	adds	r3, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a15      	ldr	r2, [pc, #84]	@ (8003478 <PCD_EP_OutSetupPacket_int+0x88>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d90e      	bls.n	8003444 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	d009      	beq.n	8003444 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343c:	461a      	mov	r2, r3
 800343e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003442:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f004 fe3d 	bl	80080c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a0a      	ldr	r2, [pc, #40]	@ (8003478 <PCD_EP_OutSetupPacket_int+0x88>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d90c      	bls.n	800346c <PCD_EP_OutSetupPacket_int+0x7c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	799b      	ldrb	r3, [r3, #6]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003464:	461a      	mov	r2, r3
 8003466:	2101      	movs	r1, #1
 8003468:	f002 fbd6 	bl	8005c18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	4f54300a 	.word	0x4f54300a

0800347c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
 8003488:	4613      	mov	r3, r2
 800348a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d107      	bne.n	80034aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800349a:	883b      	ldrh	r3, [r7, #0]
 800349c:	0419      	lsls	r1, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80034a8:	e028      	b.n	80034fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4413      	add	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e00d      	b.n	80034da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	3340      	adds	r3, #64	@ 0x40
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	4413      	add	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	3301      	adds	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	3b01      	subs	r3, #1
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3ec      	bcc.n	80034be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034e4:	883b      	ldrh	r3, [r7, #0]
 80034e6:	0418      	lsls	r0, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	4302      	orrs	r2, r0
 80034f4:	3340      	adds	r3, #64	@ 0x40
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e267      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d075      	beq.n	800364e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003562:	4b88      	ldr	r3, [pc, #544]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b04      	cmp	r3, #4
 800356c:	d00c      	beq.n	8003588 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356e:	4b85      	ldr	r3, [pc, #532]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003576:	2b08      	cmp	r3, #8
 8003578:	d112      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357a:	4b82      	ldr	r3, [pc, #520]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003582:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003586:	d10b      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	4b7e      	ldr	r3, [pc, #504]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d05b      	beq.n	800364c <HAL_RCC_OscConfig+0x108>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d157      	bne.n	800364c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e242      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x74>
 80035aa:	4b76      	ldr	r3, [pc, #472]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a75      	ldr	r2, [pc, #468]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x98>
 80035c2:	4b70      	ldr	r3, [pc, #448]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035dc:	4b69      	ldr	r3, [pc, #420]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a68      	ldr	r2, [pc, #416]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b66      	ldr	r3, [pc, #408]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a65      	ldr	r2, [pc, #404]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd fe8a 	bl	8001314 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7fd fe86 	bl	8001314 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	@ 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e207      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b5b      	ldr	r3, [pc, #364]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0xc0>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7fd fe76 	bl	8001314 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7fd fe72 	bl	8001314 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	@ 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1f3      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	4b51      	ldr	r3, [pc, #324]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0xe8>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d063      	beq.n	8003722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800365a:	4b4a      	ldr	r3, [pc, #296]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003666:	4b47      	ldr	r3, [pc, #284]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800366e:	2b08      	cmp	r3, #8
 8003670:	d11c      	bne.n	80036ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003672:	4b44      	ldr	r3, [pc, #272]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d116      	bne.n	80036ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	4b41      	ldr	r3, [pc, #260]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_RCC_OscConfig+0x152>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e1c7      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003696:	4b3b      	ldr	r3, [pc, #236]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4937      	ldr	r1, [pc, #220]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	e03a      	b.n	8003722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b4:	4b34      	ldr	r3, [pc, #208]	@ (8003788 <HAL_RCC_OscConfig+0x244>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fd fe2b 	bl	8001314 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fd fe27 	bl	8001314 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e1a8      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4b28      	ldr	r3, [pc, #160]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4925      	ldr	r1, [pc, #148]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
 80036f4:	e015      	b.n	8003722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f6:	4b24      	ldr	r3, [pc, #144]	@ (8003788 <HAL_RCC_OscConfig+0x244>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fd fe0a 	bl	8001314 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003704:	f7fd fe06 	bl	8001314 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e187      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	4b1b      	ldr	r3, [pc, #108]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d036      	beq.n	800379c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003736:	4b15      	ldr	r3, [pc, #84]	@ (800378c <HAL_RCC_OscConfig+0x248>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fd fdea 	bl	8001314 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003744:	f7fd fde6 	bl	8001314 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e167      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_OscConfig+0x240>)
 8003758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x200>
 8003762:	e01b      	b.n	800379c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003764:	4b09      	ldr	r3, [pc, #36]	@ (800378c <HAL_RCC_OscConfig+0x248>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376a:	f7fd fdd3 	bl	8001314 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	e00e      	b.n	8003790 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003772:	f7fd fdcf 	bl	8001314 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d907      	bls.n	8003790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e150      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
 8003784:	40023800 	.word	0x40023800
 8003788:	42470000 	.word	0x42470000
 800378c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003790:	4b88      	ldr	r3, [pc, #544]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ea      	bne.n	8003772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8097 	beq.w	80038d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ae:	4b81      	ldr	r3, [pc, #516]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	4b7d      	ldr	r3, [pc, #500]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	4a7c      	ldr	r2, [pc, #496]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ca:	4b7a      	ldr	r3, [pc, #488]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	4b77      	ldr	r3, [pc, #476]	@ (80039b8 <HAL_RCC_OscConfig+0x474>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d118      	bne.n	8003818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e6:	4b74      	ldr	r3, [pc, #464]	@ (80039b8 <HAL_RCC_OscConfig+0x474>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a73      	ldr	r2, [pc, #460]	@ (80039b8 <HAL_RCC_OscConfig+0x474>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f2:	f7fd fd8f 	bl	8001314 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fa:	f7fd fd8b 	bl	8001314 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e10c      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	4b6a      	ldr	r3, [pc, #424]	@ (80039b8 <HAL_RCC_OscConfig+0x474>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x2ea>
 8003820:	4b64      	ldr	r3, [pc, #400]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003824:	4a63      	ldr	r2, [pc, #396]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6713      	str	r3, [r2, #112]	@ 0x70
 800382c:	e01c      	b.n	8003868 <HAL_RCC_OscConfig+0x324>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b05      	cmp	r3, #5
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x30c>
 8003836:	4b5f      	ldr	r3, [pc, #380]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	4a5e      	ldr	r2, [pc, #376]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	6713      	str	r3, [r2, #112]	@ 0x70
 8003842:	4b5c      	ldr	r3, [pc, #368]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	4a5b      	ldr	r2, [pc, #364]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6713      	str	r3, [r2, #112]	@ 0x70
 800384e:	e00b      	b.n	8003868 <HAL_RCC_OscConfig+0x324>
 8003850:	4b58      	ldr	r3, [pc, #352]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003854:	4a57      	ldr	r2, [pc, #348]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	6713      	str	r3, [r2, #112]	@ 0x70
 800385c:	4b55      	ldr	r3, [pc, #340]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	4a54      	ldr	r2, [pc, #336]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003862:	f023 0304 	bic.w	r3, r3, #4
 8003866:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d015      	beq.n	800389c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fd fd50 	bl	8001314 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fd fd4c 	bl	8001314 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e0cb      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	4b49      	ldr	r3, [pc, #292]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ee      	beq.n	8003878 <HAL_RCC_OscConfig+0x334>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7fd fd3a 	bl	8001314 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fd fd36 	bl	8001314 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0b5      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ba:	4b3e      	ldr	r3, [pc, #248]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ee      	bne.n	80038a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4b39      	ldr	r3, [pc, #228]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d0:	4a38      	ldr	r2, [pc, #224]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80a1 	beq.w	8003a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038e2:	4b34      	ldr	r3, [pc, #208]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d05c      	beq.n	80039a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d141      	bne.n	800397a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b31      	ldr	r3, [pc, #196]	@ (80039bc <HAL_RCC_OscConfig+0x478>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fd fd0a 	bl	8001314 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fd06 	bl	8001314 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e087      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b27      	ldr	r3, [pc, #156]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	019b      	lsls	r3, r3, #6
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	3b01      	subs	r3, #1
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	061b      	lsls	r3, r3, #24
 8003946:	491b      	ldr	r1, [pc, #108]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800394c:	4b1b      	ldr	r3, [pc, #108]	@ (80039bc <HAL_RCC_OscConfig+0x478>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fd fcdf 	bl	8001314 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395a:	f7fd fcdb 	bl	8001314 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e05c      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396c:	4b11      	ldr	r3, [pc, #68]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x416>
 8003978:	e054      	b.n	8003a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397a:	4b10      	ldr	r3, [pc, #64]	@ (80039bc <HAL_RCC_OscConfig+0x478>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fd fcc8 	bl	8001314 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003988:	f7fd fcc4 	bl	8001314 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e045      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <HAL_RCC_OscConfig+0x470>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x444>
 80039a6:	e03d      	b.n	8003a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e038      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40007000 	.word	0x40007000
 80039bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <HAL_RCC_OscConfig+0x4ec>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d028      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d121      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d11a      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039f0:	4013      	ands	r3, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d111      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800

08003a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0cc      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b68      	ldr	r3, [pc, #416]	@ (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d90c      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b65      	ldr	r3, [pc, #404]	@ (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b63      	ldr	r3, [pc, #396]	@ (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0b8      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a88:	4b59      	ldr	r3, [pc, #356]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a58      	ldr	r2, [pc, #352]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa0:	4b53      	ldr	r3, [pc, #332]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aac:	4b50      	ldr	r3, [pc, #320]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	494d      	ldr	r1, [pc, #308]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d044      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	4b47      	ldr	r3, [pc, #284]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d119      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e06f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b02:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e067      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b37      	ldr	r3, [pc, #220]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4934      	ldr	r1, [pc, #208]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b24:	f7fd fbf6 	bl	8001314 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fd fbf2 	bl	8001314 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e04f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b25      	ldr	r3, [pc, #148]	@ (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d20c      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b22      	ldr	r3, [pc, #136]	@ (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b20      	ldr	r3, [pc, #128]	@ (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e032      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	4b19      	ldr	r3, [pc, #100]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4916      	ldr	r1, [pc, #88]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba6:	4b12      	ldr	r3, [pc, #72]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	490e      	ldr	r1, [pc, #56]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bba:	f000 f821 	bl	8003c00 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	490a      	ldr	r1, [pc, #40]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	5ccb      	ldrb	r3, [r1, r3]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a09      	ldr	r2, [pc, #36]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bd6:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fb56 	bl	800128c <HAL_InitTick>

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023c00 	.word	0x40023c00
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	080086e8 	.word	0x080086e8
 8003bf8:	20000004 	.word	0x20000004
 8003bfc:	20000008 	.word	0x20000008

08003c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c04:	b090      	sub	sp, #64	@ 0x40
 8003c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c18:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d00d      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x40>
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	f200 80a1 	bhi.w	8003d6c <HAL_RCC_GetSysClockFreq+0x16c>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x34>
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c32:	e09b      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b53      	ldr	r3, [pc, #332]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c38:	e09b      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c3a:	4b53      	ldr	r3, [pc, #332]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c3e:	e098      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c40:	4b4f      	ldr	r3, [pc, #316]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4a:	4b4d      	ldr	r3, [pc, #308]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d028      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c56:	4b4a      	ldr	r3, [pc, #296]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	099b      	lsrs	r3, r3, #6
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	623b      	str	r3, [r7, #32]
 8003c60:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c6c:	fb03 f201 	mul.w	r2, r3, r1
 8003c70:	2300      	movs	r3, #0
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	4a43      	ldr	r2, [pc, #268]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c80:	460a      	mov	r2, r1
 8003c82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c86:	4413      	add	r3, r2
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	61fa      	str	r2, [r7, #28]
 8003c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c9a:	f7fc fa9d 	bl	80001d8 <__aeabi_uldivmod>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ca6:	e053      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca8:	4b35      	ldr	r3, [pc, #212]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	2200      	movs	r2, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	617a      	str	r2, [r7, #20]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cba:	f04f 0b00 	mov.w	fp, #0
 8003cbe:	4652      	mov	r2, sl
 8003cc0:	465b      	mov	r3, fp
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	0159      	lsls	r1, r3, #5
 8003ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd0:	0150      	lsls	r0, r2, #5
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	ebb2 080a 	subs.w	r8, r2, sl
 8003cda:	eb63 090b 	sbc.w	r9, r3, fp
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cf2:	ebb2 0408 	subs.w	r4, r2, r8
 8003cf6:	eb63 0509 	sbc.w	r5, r3, r9
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	00eb      	lsls	r3, r5, #3
 8003d04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d08:	00e2      	lsls	r2, r4, #3
 8003d0a:	4614      	mov	r4, r2
 8003d0c:	461d      	mov	r5, r3
 8003d0e:	eb14 030a 	adds.w	r3, r4, sl
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	eb45 030b 	adc.w	r3, r5, fp
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d26:	4629      	mov	r1, r5
 8003d28:	028b      	lsls	r3, r1, #10
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d30:	4621      	mov	r1, r4
 8003d32:	028a      	lsls	r2, r1, #10
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	60fa      	str	r2, [r7, #12]
 8003d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d44:	f7fc fa48 	bl	80001d8 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d50:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003d60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d6a:	e002      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3740      	adds	r7, #64	@ 0x40
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	017d7840 	.word	0x017d7840

08003d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b03      	ldr	r3, [pc, #12]	@ (8003da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000004 	.word	0x20000004

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003da8:	f7ff fff0 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0a9b      	lsrs	r3, r3, #10
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	@ (8003dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	080086f8 	.word	0x080086f8

08003dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e041      	b.n	8003e62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd f890 	bl	8000f18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 f9a0 	bl	8004150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <HAL_TIM_PWM_Start+0x24>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e022      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d109      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x3e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	e015      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d109      	bne.n	8003ec4 <HAL_TIM_PWM_Start+0x58>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e008      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e068      	b.n	8003fb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <HAL_TIM_PWM_Start+0x82>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eec:	e013      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d104      	bne.n	8003efe <HAL_TIM_PWM_Start+0x92>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003efc:	e00b      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d104      	bne.n	8003f0e <HAL_TIM_PWM_Start+0xa2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f0c:	e003      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fb2e 	bl	8004580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a23      	ldr	r2, [pc, #140]	@ (8003fb8 <HAL_TIM_PWM_Start+0x14c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <HAL_TIM_PWM_Start+0x14c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f50:	d013      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a19      	ldr	r2, [pc, #100]	@ (8003fbc <HAL_TIM_PWM_Start+0x150>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a17      	ldr	r2, [pc, #92]	@ (8003fc0 <HAL_TIM_PWM_Start+0x154>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a16      	ldr	r2, [pc, #88]	@ (8003fc4 <HAL_TIM_PWM_Start+0x158>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a14      	ldr	r2, [pc, #80]	@ (8003fc8 <HAL_TIM_PWM_Start+0x15c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d111      	bne.n	8003f9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d010      	beq.n	8003fae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	e007      	b.n	8003fae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40014000 	.word	0x40014000

08003fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e0ae      	b.n	8004148 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	f200 809f 	bhi.w	8004138 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8004000 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004035 	.word	0x08004035
 8004004:	08004139 	.word	0x08004139
 8004008:	08004139 	.word	0x08004139
 800400c:	08004139 	.word	0x08004139
 8004010:	08004075 	.word	0x08004075
 8004014:	08004139 	.word	0x08004139
 8004018:	08004139 	.word	0x08004139
 800401c:	08004139 	.word	0x08004139
 8004020:	080040b7 	.word	0x080040b7
 8004024:	08004139 	.word	0x08004139
 8004028:	08004139 	.word	0x08004139
 800402c:	08004139 	.word	0x08004139
 8004030:	080040f7 	.word	0x080040f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f914 	bl	8004268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0208 	orr.w	r2, r2, #8
 800404e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0204 	bic.w	r2, r2, #4
 800405e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6999      	ldr	r1, [r3, #24]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	619a      	str	r2, [r3, #24]
      break;
 8004072:	e064      	b.n	800413e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f95a 	bl	8004334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800408e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6999      	ldr	r1, [r3, #24]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	021a      	lsls	r2, r3, #8
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	619a      	str	r2, [r3, #24]
      break;
 80040b4:	e043      	b.n	800413e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f9a5 	bl	800440c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0208 	orr.w	r2, r2, #8
 80040d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0204 	bic.w	r2, r2, #4
 80040e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69d9      	ldr	r1, [r3, #28]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	61da      	str	r2, [r3, #28]
      break;
 80040f4:	e023      	b.n	800413e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f9ef 	bl	80044e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69d9      	ldr	r1, [r3, #28]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	021a      	lsls	r2, r3, #8
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	61da      	str	r2, [r3, #28]
      break;
 8004136:	e002      	b.n	800413e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	75fb      	strb	r3, [r7, #23]
      break;
 800413c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004146:	7dfb      	ldrb	r3, [r7, #23]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a3a      	ldr	r2, [pc, #232]	@ (800424c <TIM_Base_SetConfig+0xfc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00f      	beq.n	8004188 <TIM_Base_SetConfig+0x38>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416e:	d00b      	beq.n	8004188 <TIM_Base_SetConfig+0x38>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a37      	ldr	r2, [pc, #220]	@ (8004250 <TIM_Base_SetConfig+0x100>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <TIM_Base_SetConfig+0x38>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a36      	ldr	r2, [pc, #216]	@ (8004254 <TIM_Base_SetConfig+0x104>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_Base_SetConfig+0x38>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a35      	ldr	r2, [pc, #212]	@ (8004258 <TIM_Base_SetConfig+0x108>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d108      	bne.n	800419a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a2b      	ldr	r2, [pc, #172]	@ (800424c <TIM_Base_SetConfig+0xfc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01b      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a8:	d017      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a28      	ldr	r2, [pc, #160]	@ (8004250 <TIM_Base_SetConfig+0x100>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a27      	ldr	r2, [pc, #156]	@ (8004254 <TIM_Base_SetConfig+0x104>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00f      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a26      	ldr	r2, [pc, #152]	@ (8004258 <TIM_Base_SetConfig+0x108>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00b      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a25      	ldr	r2, [pc, #148]	@ (800425c <TIM_Base_SetConfig+0x10c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d007      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a24      	ldr	r2, [pc, #144]	@ (8004260 <TIM_Base_SetConfig+0x110>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <TIM_Base_SetConfig+0x8a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a23      	ldr	r2, [pc, #140]	@ (8004264 <TIM_Base_SetConfig+0x114>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d108      	bne.n	80041ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a0e      	ldr	r2, [pc, #56]	@ (800424c <TIM_Base_SetConfig+0xfc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d103      	bne.n	8004220 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	611a      	str	r2, [r3, #16]
  }
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40014000 	.word	0x40014000
 8004260:	40014400 	.word	0x40014400
 8004264:	40014800 	.word	0x40014800

08004268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f023 0201 	bic.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 0302 	bic.w	r3, r3, #2
 80042b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1c      	ldr	r2, [pc, #112]	@ (8004330 <TIM_OC1_SetConfig+0xc8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d10c      	bne.n	80042de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0308 	bic.w	r3, r3, #8
 80042ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a13      	ldr	r2, [pc, #76]	@ (8004330 <TIM_OC1_SetConfig+0xc8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d111      	bne.n	800430a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	621a      	str	r2, [r3, #32]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40010000 	.word	0x40010000

08004334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f023 0210 	bic.w	r2, r3, #16
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800436a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0320 	bic.w	r3, r3, #32
 800437e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a1e      	ldr	r2, [pc, #120]	@ (8004408 <TIM_OC2_SetConfig+0xd4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10d      	bne.n	80043b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800439a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <TIM_OC2_SetConfig+0xd4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d113      	bne.n	80043e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000

0800440c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1d      	ldr	r2, [pc, #116]	@ (80044dc <TIM_OC3_SetConfig+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d10d      	bne.n	8004486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a14      	ldr	r2, [pc, #80]	@ (80044dc <TIM_OC3_SetConfig+0xd0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d113      	bne.n	80044b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800449c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40010000 	.word	0x40010000

080044e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800452a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	031b      	lsls	r3, r3, #12
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a10      	ldr	r2, [pc, #64]	@ (800457c <TIM_OC4_SetConfig+0x9c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d109      	bne.n	8004554 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	019b      	lsls	r3, r3, #6
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40010000 	.word	0x40010000

08004580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2201      	movs	r2, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	401a      	ands	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1a      	ldr	r2, [r3, #32]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e050      	b.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1c      	ldr	r2, [pc, #112]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d018      	beq.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004630:	d013      	beq.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a18      	ldr	r2, [pc, #96]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a16      	ldr	r2, [pc, #88]	@ (800469c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d009      	beq.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a15      	ldr	r2, [pc, #84]	@ (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a13      	ldr	r2, [pc, #76]	@ (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d10c      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	4313      	orrs	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40010000 	.word	0x40010000
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800
 80046a0:	40000c00 	.word	0x40000c00
 80046a4:	40014000 	.word	0x40014000

080046a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046a8:	b084      	sub	sp, #16
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	f107 001c 	add.w	r0, r7, #28
 80046b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d123      	bne.n	800470a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80046d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f001 fae8 	bl	8005cd4 <USB_CoreReset>
 8004704:	4603      	mov	r3, r0
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e01b      	b.n	8004742 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f001 fadc 	bl	8005cd4 <USB_CoreReset>
 800471c:	4603      	mov	r3, r0
 800471e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004720:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	639a      	str	r2, [r3, #56]	@ 0x38
 8004734:	e005      	b.n	8004742 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004742:	7fbb      	ldrb	r3, [r7, #30]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d10b      	bne.n	8004760 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f043 0206 	orr.w	r2, r3, #6
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800476c:	b004      	add	sp, #16
 800476e:	4770      	bx	lr

08004770 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d165      	bne.n	8004850 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4a41      	ldr	r2, [pc, #260]	@ (800488c <USB_SetTurnaroundTime+0x11c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d906      	bls.n	800479a <USB_SetTurnaroundTime+0x2a>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4a40      	ldr	r2, [pc, #256]	@ (8004890 <USB_SetTurnaroundTime+0x120>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d202      	bcs.n	800479a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004794:	230f      	movs	r3, #15
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e062      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4a3c      	ldr	r2, [pc, #240]	@ (8004890 <USB_SetTurnaroundTime+0x120>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d306      	bcc.n	80047b0 <USB_SetTurnaroundTime+0x40>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4a3b      	ldr	r2, [pc, #236]	@ (8004894 <USB_SetTurnaroundTime+0x124>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d202      	bcs.n	80047b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047aa:	230e      	movs	r3, #14
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e057      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4a38      	ldr	r2, [pc, #224]	@ (8004894 <USB_SetTurnaroundTime+0x124>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d306      	bcc.n	80047c6 <USB_SetTurnaroundTime+0x56>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4a37      	ldr	r2, [pc, #220]	@ (8004898 <USB_SetTurnaroundTime+0x128>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d202      	bcs.n	80047c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047c0:	230d      	movs	r3, #13
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	e04c      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4a33      	ldr	r2, [pc, #204]	@ (8004898 <USB_SetTurnaroundTime+0x128>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d306      	bcc.n	80047dc <USB_SetTurnaroundTime+0x6c>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	4a32      	ldr	r2, [pc, #200]	@ (800489c <USB_SetTurnaroundTime+0x12c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d802      	bhi.n	80047dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047d6:	230c      	movs	r3, #12
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e041      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4a2f      	ldr	r2, [pc, #188]	@ (800489c <USB_SetTurnaroundTime+0x12c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d906      	bls.n	80047f2 <USB_SetTurnaroundTime+0x82>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4a2e      	ldr	r2, [pc, #184]	@ (80048a0 <USB_SetTurnaroundTime+0x130>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d802      	bhi.n	80047f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047ec:	230b      	movs	r3, #11
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	e036      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4a2a      	ldr	r2, [pc, #168]	@ (80048a0 <USB_SetTurnaroundTime+0x130>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d906      	bls.n	8004808 <USB_SetTurnaroundTime+0x98>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4a29      	ldr	r2, [pc, #164]	@ (80048a4 <USB_SetTurnaroundTime+0x134>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d802      	bhi.n	8004808 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004802:	230a      	movs	r3, #10
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e02b      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4a26      	ldr	r2, [pc, #152]	@ (80048a4 <USB_SetTurnaroundTime+0x134>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d906      	bls.n	800481e <USB_SetTurnaroundTime+0xae>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4a25      	ldr	r2, [pc, #148]	@ (80048a8 <USB_SetTurnaroundTime+0x138>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d202      	bcs.n	800481e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004818:	2309      	movs	r3, #9
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e020      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4a21      	ldr	r2, [pc, #132]	@ (80048a8 <USB_SetTurnaroundTime+0x138>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d306      	bcc.n	8004834 <USB_SetTurnaroundTime+0xc4>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4a20      	ldr	r2, [pc, #128]	@ (80048ac <USB_SetTurnaroundTime+0x13c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d802      	bhi.n	8004834 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800482e:	2308      	movs	r3, #8
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	e015      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4a1d      	ldr	r2, [pc, #116]	@ (80048ac <USB_SetTurnaroundTime+0x13c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d906      	bls.n	800484a <USB_SetTurnaroundTime+0xda>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4a1c      	ldr	r2, [pc, #112]	@ (80048b0 <USB_SetTurnaroundTime+0x140>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d202      	bcs.n	800484a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004844:	2307      	movs	r3, #7
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e00a      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800484a:	2306      	movs	r3, #6
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e007      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004856:	2309      	movs	r3, #9
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e001      	b.n	8004860 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800485c:	2309      	movs	r3, #9
 800485e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	029b      	lsls	r3, r3, #10
 8004874:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004878:	431a      	orrs	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	00d8acbf 	.word	0x00d8acbf
 8004890:	00e4e1c0 	.word	0x00e4e1c0
 8004894:	00f42400 	.word	0x00f42400
 8004898:	01067380 	.word	0x01067380
 800489c:	011a499f 	.word	0x011a499f
 80048a0:	01312cff 	.word	0x01312cff
 80048a4:	014ca43f 	.word	0x014ca43f
 80048a8:	016e3600 	.word	0x016e3600
 80048ac:	01a6ab1f 	.word	0x01a6ab1f
 80048b0:	01e84800 	.word	0x01e84800

080048b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f043 0201 	orr.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d115      	bne.n	8004946 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004926:	200a      	movs	r0, #10
 8004928:	f7fc fd00 	bl	800132c <HAL_Delay>
      ms += 10U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	330a      	adds	r3, #10
 8004930:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f001 f93f 	bl	8005bb6 <USB_GetMode>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d01e      	beq.n	800497c <USB_SetCurrentMode+0x84>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2bc7      	cmp	r3, #199	@ 0xc7
 8004942:	d9f0      	bls.n	8004926 <USB_SetCurrentMode+0x2e>
 8004944:	e01a      	b.n	800497c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d115      	bne.n	8004978 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004958:	200a      	movs	r0, #10
 800495a:	f7fc fce7 	bl	800132c <HAL_Delay>
      ms += 10U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	330a      	adds	r3, #10
 8004962:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f001 f926 	bl	8005bb6 <USB_GetMode>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <USB_SetCurrentMode+0x84>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2bc7      	cmp	r3, #199	@ 0xc7
 8004974:	d9f0      	bls.n	8004958 <USB_SetCurrentMode+0x60>
 8004976:	e001      	b.n	800497c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e005      	b.n	8004988 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004980:	d101      	bne.n	8004986 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004990:	b084      	sub	sp, #16
 8004992:	b580      	push	{r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800499e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	e009      	b.n	80049c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	3340      	adds	r3, #64	@ 0x40
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	2200      	movs	r2, #0
 80049bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	3301      	adds	r3, #1
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b0e      	cmp	r3, #14
 80049c8:	d9f2      	bls.n	80049b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d11c      	bne.n	8004a0c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a0a:	e00b      	b.n	8004a24 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a10:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a30:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10d      	bne.n	8004a54 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d104      	bne.n	8004a4a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a40:	2100      	movs	r1, #0
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f968 	bl	8004d18 <USB_SetDevSpeed>
 8004a48:	e008      	b.n	8004a5c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f963 	bl	8004d18 <USB_SetDevSpeed>
 8004a52:	e003      	b.n	8004a5c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a54:	2103      	movs	r1, #3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f95e 	bl	8004d18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a5c:	2110      	movs	r1, #16
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8fa 	bl	8004c58 <USB_FlushTxFifo>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f924 	bl	8004cbc <USB_FlushRxFifo>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a84:	461a      	mov	r2, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	e043      	b.n	8004b30 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004aba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004abe:	d118      	bne.n	8004af2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e013      	b.n	8004b04 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e008      	b.n	8004b04 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afe:	461a      	mov	r2, r3
 8004b00:	2300      	movs	r3, #0
 8004b02:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b10:	461a      	mov	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b22:	461a      	mov	r2, r3
 8004b24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b34:	461a      	mov	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d3b5      	bcc.n	8004aa8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e043      	b.n	8004bca <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b58:	d118      	bne.n	8004b8c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	e013      	b.n	8004b9e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b82:	461a      	mov	r2, r3
 8004b84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e008      	b.n	8004b9e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004baa:	461a      	mov	r2, r3
 8004bac:	2300      	movs	r3, #0
 8004bae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004bc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bce:	461a      	mov	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d3b5      	bcc.n	8004b42 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004be8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004bf6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f043 0210 	orr.w	r2, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	4b10      	ldr	r3, [pc, #64]	@ (8004c54 <USB_DevInit+0x2c4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f043 0208 	orr.w	r2, r3, #8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d107      	bne.n	8004c44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c3c:	f043 0304 	orr.w	r3, r3, #4
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c50:	b004      	add	sp, #16
 8004c52:	4770      	bx	lr
 8004c54:	803c3800 	.word	0x803c3800

08004c58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c72:	d901      	bls.n	8004c78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e01b      	b.n	8004cb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	daf2      	bge.n	8004c66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	019b      	lsls	r3, r3, #6
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c9c:	d901      	bls.n	8004ca2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e006      	b.n	8004cb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d0f0      	beq.n	8004c90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cd4:	d901      	bls.n	8004cda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e018      	b.n	8004d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	daf2      	bge.n	8004cc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2210      	movs	r2, #16
 8004cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cf8:	d901      	bls.n	8004cfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e006      	b.n	8004d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d0f0      	beq.n	8004cec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0306 	and.w	r3, r3, #6
 8004d62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d102      	bne.n	8004d70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	75fb      	strb	r3, [r7, #23]
 8004d6e:	e00a      	b.n	8004d86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d002      	beq.n	8004d7c <USB_GetDevSpeed+0x32>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b06      	cmp	r3, #6
 8004d7a:	d102      	bne.n	8004d82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	75fb      	strb	r3, [r7, #23]
 8004d80:	e001      	b.n	8004d86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d82:	230f      	movs	r3, #15
 8004d84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d13a      	bne.n	8004e26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	68f9      	ldr	r1, [r7, #12]
 8004dca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d155      	bne.n	8004e94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	791b      	ldrb	r3, [r3, #4]
 8004e02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	059b      	lsls	r3, r3, #22
 8004e0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	e036      	b.n	8004e94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	2101      	movs	r1, #1
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	041b      	lsls	r3, r3, #16
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d11a      	bne.n	8004e94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	791b      	ldrb	r3, [r3, #4]
 8004e78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d161      	bne.n	8004f84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ed6:	d11f      	bne.n	8004f18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ef2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ef6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	2101      	movs	r1, #1
 8004f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f38:	4013      	ands	r3, r2
 8004f3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	43db      	mvns	r3, r3
 8004f56:	68f9      	ldr	r1, [r7, #12]
 8004f58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	0159      	lsls	r1, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	440b      	add	r3, r1
 8004f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4b35      	ldr	r3, [pc, #212]	@ (8005054 <USB_DeactivateEndpoint+0x1b0>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	600b      	str	r3, [r1, #0]
 8004f82:	e060      	b.n	8005046 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f9a:	d11f      	bne.n	8004fdc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	0151      	lsls	r1, r2, #5
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	2101      	movs	r1, #1
 8004fee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	68f9      	ldr	r1, [r7, #12]
 8004ff8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	2101      	movs	r1, #1
 8005012:	fa01 f303 	lsl.w	r3, r1, r3
 8005016:	041b      	lsls	r3, r3, #16
 8005018:	43db      	mvns	r3, r3
 800501a:	68f9      	ldr	r1, [r7, #12]
 800501c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005020:	4013      	ands	r3, r2
 8005022:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	0159      	lsls	r1, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	440b      	add	r3, r1
 800503a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503e:	4619      	mov	r1, r3
 8005040:	4b05      	ldr	r3, [pc, #20]	@ (8005058 <USB_DeactivateEndpoint+0x1b4>)
 8005042:	4013      	ands	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	ec337800 	.word	0xec337800
 8005058:	eff37800 	.word	0xeff37800

0800505c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	@ 0x28
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b01      	cmp	r3, #1
 800507a:	f040 817f 	bne.w	800537c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d132      	bne.n	80050ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	440a      	add	r2, r1
 800509c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050a0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80050a4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80050a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	0151      	lsls	r1, r2, #5
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	440a      	add	r2, r1
 80050c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	69fa      	ldr	r2, [r7, #28]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050e4:	0cdb      	lsrs	r3, r3, #19
 80050e6:	04db      	lsls	r3, r3, #19
 80050e8:	6113      	str	r3, [r2, #16]
 80050ea:	e097      	b.n	800521c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	440a      	add	r2, r1
 8005102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005106:	0cdb      	lsrs	r3, r3, #19
 8005108:	04db      	lsls	r3, r3, #19
 800510a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005126:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800512a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800512e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d11a      	bne.n	800516c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	d903      	bls.n	800514a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	440a      	add	r2, r1
 8005160:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005164:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005168:	6113      	str	r3, [r2, #16]
 800516a:	e044      	b.n	80051f6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4413      	add	r3, r2
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	8afb      	ldrh	r3, [r7, #22]
 8005192:	04d9      	lsls	r1, r3, #19
 8005194:	4ba4      	ldr	r3, [pc, #656]	@ (8005428 <USB_EPStartXfer+0x3cc>)
 8005196:	400b      	ands	r3, r1
 8005198:	69b9      	ldr	r1, [r7, #24]
 800519a:	0148      	lsls	r0, r1, #5
 800519c:	69f9      	ldr	r1, [r7, #28]
 800519e:	4401      	add	r1, r0
 80051a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80051a4:	4313      	orrs	r3, r2
 80051a6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	791b      	ldrb	r3, [r3, #4]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d122      	bne.n	80051f6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ca:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80051ce:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	8afb      	ldrh	r3, [r7, #22]
 80051e0:	075b      	lsls	r3, r3, #29
 80051e2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80051e6:	69b9      	ldr	r1, [r7, #24]
 80051e8:	0148      	lsls	r0, r1, #5
 80051ea:	69f9      	ldr	r1, [r7, #28]
 80051ec:	4401      	add	r1, r0
 80051ee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80051f2:	4313      	orrs	r3, r2
 80051f4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520c:	69b9      	ldr	r1, [r7, #24]
 800520e:	0148      	lsls	r0, r1, #5
 8005210:	69f9      	ldr	r1, [r7, #28]
 8005212:	4401      	add	r1, r0
 8005214:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005218:	4313      	orrs	r3, r2
 800521a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d14b      	bne.n	80052ba <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005236:	461a      	mov	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	791b      	ldrb	r3, [r3, #4]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d128      	bne.n	8005298 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d110      	bne.n	8005278 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005270:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e00f      	b.n	8005298 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005296:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	e166      	b.n	8005588 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	0151      	lsls	r1, r2, #5
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	440a      	add	r2, r1
 80052d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80052d8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	791b      	ldrb	r3, [r3, #4]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d015      	beq.n	800530e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 814e 	beq.w	8005588 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	2101      	movs	r1, #1
 80052fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005302:	69f9      	ldr	r1, [r7, #28]
 8005304:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005308:	4313      	orrs	r3, r2
 800530a:	634b      	str	r3, [r1, #52]	@ 0x34
 800530c:	e13c      	b.n	8005588 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d110      	bne.n	8005340 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005338:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e00f      	b.n	8005360 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800535a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800535e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	68d9      	ldr	r1, [r3, #12]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	781a      	ldrb	r2, [r3, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	b298      	uxth	r0, r3
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	4603      	mov	r3, r0
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f9b9 	bl	80056ec <USB_WritePacket>
 800537a:	e105      	b.n	8005588 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005396:	0cdb      	lsrs	r3, r3, #19
 8005398:	04db      	lsls	r3, r3, #19
 800539a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80053ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80053be:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d132      	bne.n	800542c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f4:	69b9      	ldr	r1, [r7, #24]
 80053f6:	0148      	lsls	r0, r1, #5
 80053f8:	69f9      	ldr	r1, [r7, #28]
 80053fa:	4401      	add	r1, r0
 80053fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005400:	4313      	orrs	r3, r2
 8005402:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800541e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005422:	6113      	str	r3, [r2, #16]
 8005424:	e062      	b.n	80054ec <USB_EPStartXfer+0x490>
 8005426:	bf00      	nop
 8005428:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d123      	bne.n	800547c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544a:	69b9      	ldr	r1, [r7, #24]
 800544c:	0148      	lsls	r0, r1, #5
 800544e:	69f9      	ldr	r1, [r7, #28]
 8005450:	4401      	add	r1, r0
 8005452:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005456:	4313      	orrs	r3, r2
 8005458:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005474:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005478:	6113      	str	r3, [r2, #16]
 800547a:	e037      	b.n	80054ec <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4413      	add	r3, r2
 8005486:	1e5a      	subs	r2, r3, #1
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005490:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	8afa      	ldrh	r2, [r7, #22]
 8005498:	fb03 f202 	mul.w	r2, r3, r2
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	8afb      	ldrh	r3, [r7, #22]
 80054b0:	04d9      	lsls	r1, r3, #19
 80054b2:	4b38      	ldr	r3, [pc, #224]	@ (8005594 <USB_EPStartXfer+0x538>)
 80054b4:	400b      	ands	r3, r1
 80054b6:	69b9      	ldr	r1, [r7, #24]
 80054b8:	0148      	lsls	r0, r1, #5
 80054ba:	69f9      	ldr	r1, [r7, #28]
 80054bc:	4401      	add	r1, r0
 80054be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054dc:	69b9      	ldr	r1, [r7, #24]
 80054de:	0148      	lsls	r0, r1, #5
 80054e0:	69f9      	ldr	r1, [r7, #28]
 80054e2:	4401      	add	r1, r0
 80054e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054e8:	4313      	orrs	r3, r2
 80054ea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d10d      	bne.n	800550e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	68d9      	ldr	r1, [r3, #12]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550a:	460a      	mov	r2, r1
 800550c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	791b      	ldrb	r3, [r3, #4]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d128      	bne.n	8005568 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d110      	bne.n	8005548 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005540:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e00f      	b.n	8005568 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005566:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005582:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	1ff80000 	.word	0x1ff80000

08005598 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d14a      	bne.n	800564c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ce:	f040 8086 	bne.w	80056de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	7812      	ldrb	r2, [r2, #0]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	7812      	ldrb	r2, [r2, #0]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005614:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005618:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3301      	adds	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005626:	4293      	cmp	r3, r2
 8005628:	d902      	bls.n	8005630 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]
          break;
 800562e:	e056      	b.n	80056de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005644:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005648:	d0e7      	beq.n	800561a <USB_EPStopXfer+0x82>
 800564a:	e048      	b.n	80056de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005660:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005664:	d13b      	bne.n	80056de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	7812      	ldrb	r2, [r2, #0]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005684:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005688:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d902      	bls.n	80056c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	75fb      	strb	r3, [r7, #23]
          break;
 80056c2:	e00c      	b.n	80056de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056dc:	d0e7      	beq.n	80056ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80056de:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b089      	sub	sp, #36	@ 0x24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	460b      	mov	r3, r1
 80056fc:	71fb      	strb	r3, [r7, #7]
 80056fe:	4613      	mov	r3, r2
 8005700:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800570a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d123      	bne.n	800575a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005712:	88bb      	ldrh	r3, [r7, #4]
 8005714:	3303      	adds	r3, #3
 8005716:	089b      	lsrs	r3, r3, #2
 8005718:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800571a:	2300      	movs	r3, #0
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e018      	b.n	8005752 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	031a      	lsls	r2, r3, #12
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800572c:	461a      	mov	r2, r3
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	3301      	adds	r3, #1
 8005738:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3301      	adds	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3301      	adds	r3, #1
 800574a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	3301      	adds	r3, #1
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	429a      	cmp	r2, r3
 8005758:	d3e2      	bcc.n	8005720 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3724      	adds	r7, #36	@ 0x24
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005768:	b480      	push	{r7}
 800576a:	b08b      	sub	sp, #44	@ 0x2c
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	089b      	lsrs	r3, r3, #2
 8005782:	b29b      	uxth	r3, r3
 8005784:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800578e:	2300      	movs	r3, #0
 8005790:	623b      	str	r3, [r7, #32]
 8005792:	e014      	b.n	80057be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	601a      	str	r2, [r3, #0]
    pDest++;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	3301      	adds	r3, #1
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	3301      	adds	r3, #1
 80057aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ae:	3301      	adds	r3, #1
 80057b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	3301      	adds	r3, #1
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	3301      	adds	r3, #1
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	6a3a      	ldr	r2, [r7, #32]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d3e6      	bcc.n	8005794 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057c6:	8bfb      	ldrh	r3, [r7, #30]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01e      	beq.n	800580a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057d6:	461a      	mov	r2, r3
 80057d8:	f107 0310 	add.w	r3, r7, #16
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	701a      	strb	r2, [r3, #0]
      i++;
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	3301      	adds	r3, #1
 80057f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	3301      	adds	r3, #1
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80057fe:	8bfb      	ldrh	r3, [r7, #30]
 8005800:	3b01      	subs	r3, #1
 8005802:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005804:	8bfb      	ldrh	r3, [r7, #30]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1ea      	bne.n	80057e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800580c:	4618      	mov	r0, r3
 800580e:	372c      	adds	r7, #44	@ 0x2c
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d12c      	bne.n	800588e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	db12      	blt.n	800586c <USB_EPSetStall+0x54>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00f      	beq.n	800586c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005866:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800586a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005886:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e02b      	b.n	80058e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	db12      	blt.n	80058c6 <USB_EPSetStall+0xae>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00f      	beq.n	80058c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d128      	bne.n	8005962 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800592a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800592e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	791b      	ldrb	r3, [r3, #4]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d003      	beq.n	8005940 <USB_EPClearStall+0x4c>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	791b      	ldrb	r3, [r3, #4]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d138      	bne.n	80059b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800595a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	e027      	b.n	80059b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800597c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005980:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	791b      	ldrb	r3, [r3, #4]
 8005986:	2b03      	cmp	r3, #3
 8005988:	d003      	beq.n	8005992 <USB_EPClearStall+0x9e>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	791b      	ldrb	r3, [r3, #4]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d10f      	bne.n	80059b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80059e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80059f4:	68f9      	ldr	r1, [r7, #12]
 80059f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059fa:	4313      	orrs	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a3a:	f023 0302 	bic.w	r3, r3, #2
 8005a3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a68:	f023 0303 	bic.w	r3, r3, #3
 8005a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a7c:	f043 0302 	orr.w	r3, r3, #2
 8005a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	0c1b      	lsrs	r3, r3, #16
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	b29b      	uxth	r3, r3
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	460b      	mov	r3, r1
 8005b28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	460b      	mov	r3, r1
 8005b64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8a:	01db      	lsls	r3, r3, #7
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005bf0:	f023 0307 	bic.w	r3, r3, #7
 8005bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	460b      	mov	r3, r1
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	333c      	adds	r3, #60	@ 0x3c
 8005c2e:	3304      	adds	r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4a26      	ldr	r2, [pc, #152]	@ (8005cd0 <USB_EP0_OutStart+0xb8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d90a      	bls.n	8005c52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c4c:	d101      	bne.n	8005c52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e037      	b.n	8005cc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c58:	461a      	mov	r2, r3
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c80:	f043 0318 	orr.w	r3, r3, #24
 8005c84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c94:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005c98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10f      	bne.n	8005cc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005cbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	4f54300a 	.word	0x4f54300a

08005cd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cec:	d901      	bls.n	8005cf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e01b      	b.n	8005d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	daf2      	bge.n	8005ce0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f043 0201 	orr.w	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d16:	d901      	bls.n	8005d1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e006      	b.n	8005d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d0f0      	beq.n	8005d0a <USB_CoreReset+0x36>

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
	...

08005d38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d44:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005d48:	f002 fc2e 	bl	80085a8 <USBD_static_malloc>
 8005d4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d109      	bne.n	8005d68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	32b0      	adds	r2, #176	@ 0xb0
 8005d5e:	2100      	movs	r1, #0
 8005d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d64:	2302      	movs	r3, #2
 8005d66:	e0d4      	b.n	8005f12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d68:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f002 fc5e 	bl	8008630 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	32b0      	adds	r2, #176	@ 0xb0
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	32b0      	adds	r2, #176	@ 0xb0
 8005d8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7c1b      	ldrb	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d138      	bne.n	8005e12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005da0:	4b5e      	ldr	r3, [pc, #376]	@ (8005f1c <USBD_CDC_Init+0x1e4>)
 8005da2:	7819      	ldrb	r1, [r3, #0]
 8005da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005da8:	2202      	movs	r2, #2
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f002 fad9 	bl	8008362 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005db0:	4b5a      	ldr	r3, [pc, #360]	@ (8005f1c <USBD_CDC_Init+0x1e4>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3324      	adds	r3, #36	@ 0x24
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005dca:	4b55      	ldr	r3, [pc, #340]	@ (8005f20 <USBD_CDC_Init+0x1e8>)
 8005dcc:	7819      	ldrb	r1, [r3, #0]
 8005dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f002 fac4 	bl	8008362 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005dda:	4b51      	ldr	r3, [pc, #324]	@ (8005f20 <USBD_CDC_Init+0x1e8>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f003 020f 	and.w	r2, r3, #15
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005df2:	2201      	movs	r2, #1
 8005df4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005df6:	4b4b      	ldr	r3, [pc, #300]	@ (8005f24 <USBD_CDC_Init+0x1ec>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	f003 020f 	and.w	r2, r3, #15
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	3326      	adds	r3, #38	@ 0x26
 8005e0c:	2210      	movs	r2, #16
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	e035      	b.n	8005e7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e12:	4b42      	ldr	r3, [pc, #264]	@ (8005f1c <USBD_CDC_Init+0x1e4>)
 8005e14:	7819      	ldrb	r1, [r3, #0]
 8005e16:	2340      	movs	r3, #64	@ 0x40
 8005e18:	2202      	movs	r2, #2
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f002 faa1 	bl	8008362 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e20:	4b3e      	ldr	r3, [pc, #248]	@ (8005f1c <USBD_CDC_Init+0x1e4>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 020f 	and.w	r2, r3, #15
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	3324      	adds	r3, #36	@ 0x24
 8005e36:	2201      	movs	r2, #1
 8005e38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e3a:	4b39      	ldr	r3, [pc, #228]	@ (8005f20 <USBD_CDC_Init+0x1e8>)
 8005e3c:	7819      	ldrb	r1, [r3, #0]
 8005e3e:	2340      	movs	r3, #64	@ 0x40
 8005e40:	2202      	movs	r2, #2
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f002 fa8d 	bl	8008362 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e48:	4b35      	ldr	r3, [pc, #212]	@ (8005f20 <USBD_CDC_Init+0x1e8>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f003 020f 	and.w	r2, r3, #15
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005e60:	2201      	movs	r2, #1
 8005e62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e64:	4b2f      	ldr	r3, [pc, #188]	@ (8005f24 <USBD_CDC_Init+0x1ec>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3326      	adds	r3, #38	@ 0x26
 8005e7a:	2210      	movs	r2, #16
 8005e7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e7e:	4b29      	ldr	r3, [pc, #164]	@ (8005f24 <USBD_CDC_Init+0x1ec>)
 8005e80:	7819      	ldrb	r1, [r3, #0]
 8005e82:	2308      	movs	r3, #8
 8005e84:	2203      	movs	r2, #3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f002 fa6b 	bl	8008362 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e8c:	4b25      	ldr	r3, [pc, #148]	@ (8005f24 <USBD_CDC_Init+0x1ec>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3324      	adds	r3, #36	@ 0x24
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	33b0      	adds	r3, #176	@ 0xb0
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005edc:	2302      	movs	r3, #2
 8005ede:	e018      	b.n	8005f12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	7c1b      	ldrb	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <USBD_CDC_Init+0x1e8>)
 8005eea:	7819      	ldrb	r1, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f002 fb22 	bl	8008540 <USBD_LL_PrepareReceive>
 8005efc:	e008      	b.n	8005f10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005efe:	4b08      	ldr	r3, [pc, #32]	@ (8005f20 <USBD_CDC_Init+0x1e8>)
 8005f00:	7819      	ldrb	r1, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f08:	2340      	movs	r3, #64	@ 0x40
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f002 fb18 	bl	8008540 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000097 	.word	0x20000097
 8005f20:	20000098 	.word	0x20000098
 8005f24:	20000099 	.word	0x20000099

08005f28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f34:	4b3a      	ldr	r3, [pc, #232]	@ (8006020 <USBD_CDC_DeInit+0xf8>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f002 fa37 	bl	80083ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f40:	4b37      	ldr	r3, [pc, #220]	@ (8006020 <USBD_CDC_DeInit+0xf8>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	f003 020f 	and.w	r2, r3, #15
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	3324      	adds	r3, #36	@ 0x24
 8005f56:	2200      	movs	r2, #0
 8005f58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f5a:	4b32      	ldr	r3, [pc, #200]	@ (8006024 <USBD_CDC_DeInit+0xfc>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f002 fa24 	bl	80083ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f66:	4b2f      	ldr	r3, [pc, #188]	@ (8006024 <USBD_CDC_DeInit+0xfc>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	f003 020f 	and.w	r2, r3, #15
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f7e:	2200      	movs	r2, #0
 8005f80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f82:	4b29      	ldr	r3, [pc, #164]	@ (8006028 <USBD_CDC_DeInit+0x100>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f002 fa10 	bl	80083ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f8e:	4b26      	ldr	r3, [pc, #152]	@ (8006028 <USBD_CDC_DeInit+0x100>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f003 020f 	and.w	r2, r3, #15
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3324      	adds	r3, #36	@ 0x24
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8006028 <USBD_CDC_DeInit+0x100>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	3326      	adds	r3, #38	@ 0x26
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	32b0      	adds	r2, #176	@ 0xb0
 8005fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01f      	beq.n	8006014 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	33b0      	adds	r3, #176	@ 0xb0
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	32b0      	adds	r2, #176	@ 0xb0
 8005ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f002 fae4 	bl	80085c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	32b0      	adds	r2, #176	@ 0xb0
 8006006:	2100      	movs	r1, #0
 8006008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000097 	.word	0x20000097
 8006024:	20000098 	.word	0x20000098
 8006028:	20000099 	.word	0x20000099

0800602c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	32b0      	adds	r2, #176	@ 0xb0
 8006040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006044:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006058:	2303      	movs	r3, #3
 800605a:	e0bf      	b.n	80061dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006064:	2b00      	cmp	r3, #0
 8006066:	d050      	beq.n	800610a <USBD_CDC_Setup+0xde>
 8006068:	2b20      	cmp	r3, #32
 800606a:	f040 80af 	bne.w	80061cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	88db      	ldrh	r3, [r3, #6]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d03a      	beq.n	80060ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b25b      	sxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	da1b      	bge.n	80060b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	33b0      	adds	r3, #176	@ 0xb0
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006096:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	88d2      	ldrh	r2, [r2, #6]
 800609c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	88db      	ldrh	r3, [r3, #6]
 80060a2:	2b07      	cmp	r3, #7
 80060a4:	bf28      	it	cs
 80060a6:	2307      	movcs	r3, #7
 80060a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	89fa      	ldrh	r2, [r7, #14]
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 fd53 	bl	8007b5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80060b6:	e090      	b.n	80061da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	785a      	ldrb	r2, [r3, #1]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	88db      	ldrh	r3, [r3, #6]
 80060c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80060c8:	d803      	bhi.n	80060d2 <USBD_CDC_Setup+0xa6>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	88db      	ldrh	r3, [r3, #6]
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	e000      	b.n	80060d4 <USBD_CDC_Setup+0xa8>
 80060d2:	2240      	movs	r2, #64	@ 0x40
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80060da:	6939      	ldr	r1, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80060e2:	461a      	mov	r2, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fd65 	bl	8007bb4 <USBD_CtlPrepareRx>
      break;
 80060ea:	e076      	b.n	80061da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	33b0      	adds	r3, #176	@ 0xb0
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	7850      	ldrb	r0, [r2, #1]
 8006102:	2200      	movs	r2, #0
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	4798      	blx	r3
      break;
 8006108:	e067      	b.n	80061da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	2b0b      	cmp	r3, #11
 8006110:	d851      	bhi.n	80061b6 <USBD_CDC_Setup+0x18a>
 8006112:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <USBD_CDC_Setup+0xec>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	08006149 	.word	0x08006149
 800611c:	080061c5 	.word	0x080061c5
 8006120:	080061b7 	.word	0x080061b7
 8006124:	080061b7 	.word	0x080061b7
 8006128:	080061b7 	.word	0x080061b7
 800612c:	080061b7 	.word	0x080061b7
 8006130:	080061b7 	.word	0x080061b7
 8006134:	080061b7 	.word	0x080061b7
 8006138:	080061b7 	.word	0x080061b7
 800613c:	080061b7 	.word	0x080061b7
 8006140:	08006173 	.word	0x08006173
 8006144:	0800619d 	.word	0x0800619d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b03      	cmp	r3, #3
 8006152:	d107      	bne.n	8006164 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006154:	f107 030a 	add.w	r3, r7, #10
 8006158:	2202      	movs	r2, #2
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fcfd 	bl	8007b5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006162:	e032      	b.n	80061ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 fc7b 	bl	8007a62 <USBD_CtlError>
            ret = USBD_FAIL;
 800616c:	2303      	movs	r3, #3
 800616e:	75fb      	strb	r3, [r7, #23]
          break;
 8006170:	e02b      	b.n	80061ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b03      	cmp	r3, #3
 800617c:	d107      	bne.n	800618e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800617e:	f107 030d 	add.w	r3, r7, #13
 8006182:	2201      	movs	r2, #1
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 fce8 	bl	8007b5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800618c:	e01d      	b.n	80061ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 fc66 	bl	8007a62 <USBD_CtlError>
            ret = USBD_FAIL;
 8006196:	2303      	movs	r3, #3
 8006198:	75fb      	strb	r3, [r7, #23]
          break;
 800619a:	e016      	b.n	80061ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d00f      	beq.n	80061c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fc59 	bl	8007a62 <USBD_CtlError>
            ret = USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061b4:	e008      	b.n	80061c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 fc52 	bl	8007a62 <USBD_CtlError>
          ret = USBD_FAIL;
 80061be:	2303      	movs	r3, #3
 80061c0:	75fb      	strb	r3, [r7, #23]
          break;
 80061c2:	e002      	b.n	80061ca <USBD_CDC_Setup+0x19e>
          break;
 80061c4:	bf00      	nop
 80061c6:	e008      	b.n	80061da <USBD_CDC_Setup+0x1ae>
          break;
 80061c8:	bf00      	nop
      }
      break;
 80061ca:	e006      	b.n	80061da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 fc47 	bl	8007a62 <USBD_CtlError>
      ret = USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	75fb      	strb	r3, [r7, #23]
      break;
 80061d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80061f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	32b0      	adds	r2, #176	@ 0xb0
 8006202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800620a:	2303      	movs	r3, #3
 800620c:	e065      	b.n	80062da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	32b0      	adds	r2, #176	@ 0xb0
 8006218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	f003 020f 	and.w	r2, r3, #15
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	3318      	adds	r3, #24
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d02f      	beq.n	8006298 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	f003 020f 	and.w	r2, r3, #15
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	3318      	adds	r3, #24
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	f003 010f 	and.w	r1, r3, #15
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	460b      	mov	r3, r1
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	440b      	add	r3, r1
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4403      	add	r3, r0
 8006260:	331c      	adds	r3, #28
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	fbb2 f1f3 	udiv	r1, r2, r3
 8006268:	fb01 f303 	mul.w	r3, r1, r3
 800626c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800626e:	2b00      	cmp	r3, #0
 8006270:	d112      	bne.n	8006298 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	f003 020f 	and.w	r2, r3, #15
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	3318      	adds	r3, #24
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800628a:	78f9      	ldrb	r1, [r7, #3]
 800628c:	2300      	movs	r3, #0
 800628e:	2200      	movs	r2, #0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f002 f934 	bl	80084fe <USBD_LL_Transmit>
 8006296:	e01f      	b.n	80062d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	33b0      	adds	r3, #176	@ 0xb0
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d010      	beq.n	80062d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	33b0      	adds	r3, #176	@ 0xb0
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80062d4:	78fa      	ldrb	r2, [r7, #3]
 80062d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	32b0      	adds	r2, #176	@ 0xb0
 80062f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	32b0      	adds	r2, #176	@ 0xb0
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006310:	2303      	movs	r3, #3
 8006312:	e01a      	b.n	800634a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f002 f932 	bl	8008582 <USBD_LL_GetRxDataSize>
 800631e:	4602      	mov	r2, r0
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	33b0      	adds	r3, #176	@ 0xb0
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006344:	4611      	mov	r1, r2
 8006346:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	32b0      	adds	r2, #176	@ 0xb0
 8006364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006368:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006370:	2303      	movs	r3, #3
 8006372:	e024      	b.n	80063be <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	33b0      	adds	r3, #176	@ 0xb0
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d019      	beq.n	80063bc <USBD_CDC_EP0_RxReady+0x6a>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800638e:	2bff      	cmp	r3, #255	@ 0xff
 8006390:	d014      	beq.n	80063bc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	33b0      	adds	r3, #176	@ 0xb0
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80063aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	22ff      	movs	r2, #255	@ 0xff
 80063b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063d0:	2182      	movs	r1, #130	@ 0x82
 80063d2:	4818      	ldr	r0, [pc, #96]	@ (8006434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063d4:	f000 fd0f 	bl	8006df6 <USBD_GetEpDesc>
 80063d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063da:	2101      	movs	r1, #1
 80063dc:	4815      	ldr	r0, [pc, #84]	@ (8006434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063de:	f000 fd0a 	bl	8006df6 <USBD_GetEpDesc>
 80063e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063e4:	2181      	movs	r1, #129	@ 0x81
 80063e6:	4813      	ldr	r0, [pc, #76]	@ (8006434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063e8:	f000 fd05 	bl	8006df6 <USBD_GetEpDesc>
 80063ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2210      	movs	r2, #16
 80063f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	2200      	movs	r2, #0
 8006404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006408:	711a      	strb	r2, [r3, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d006      	beq.n	8006422 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800641c:	711a      	strb	r2, [r3, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2243      	movs	r2, #67	@ 0x43
 8006426:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006428:	4b02      	ldr	r3, [pc, #8]	@ (8006434 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000054 	.word	0x20000054

08006438 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006440:	2182      	movs	r1, #130	@ 0x82
 8006442:	4818      	ldr	r0, [pc, #96]	@ (80064a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006444:	f000 fcd7 	bl	8006df6 <USBD_GetEpDesc>
 8006448:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800644a:	2101      	movs	r1, #1
 800644c:	4815      	ldr	r0, [pc, #84]	@ (80064a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800644e:	f000 fcd2 	bl	8006df6 <USBD_GetEpDesc>
 8006452:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006454:	2181      	movs	r1, #129	@ 0x81
 8006456:	4813      	ldr	r0, [pc, #76]	@ (80064a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006458:	f000 fccd 	bl	8006df6 <USBD_GetEpDesc>
 800645c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2210      	movs	r2, #16
 8006468:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d006      	beq.n	800647e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2200      	movs	r2, #0
 8006474:	711a      	strb	r2, [r3, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f042 0202 	orr.w	r2, r2, #2
 800647c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d006      	beq.n	8006492 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	711a      	strb	r2, [r3, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f042 0202 	orr.w	r2, r2, #2
 8006490:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2243      	movs	r2, #67	@ 0x43
 8006496:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006498:	4b02      	ldr	r3, [pc, #8]	@ (80064a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000054 	.word	0x20000054

080064a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064b0:	2182      	movs	r1, #130	@ 0x82
 80064b2:	4818      	ldr	r0, [pc, #96]	@ (8006514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064b4:	f000 fc9f 	bl	8006df6 <USBD_GetEpDesc>
 80064b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064ba:	2101      	movs	r1, #1
 80064bc:	4815      	ldr	r0, [pc, #84]	@ (8006514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064be:	f000 fc9a 	bl	8006df6 <USBD_GetEpDesc>
 80064c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064c4:	2181      	movs	r1, #129	@ 0x81
 80064c6:	4813      	ldr	r0, [pc, #76]	@ (8006514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064c8:	f000 fc95 	bl	8006df6 <USBD_GetEpDesc>
 80064cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2210      	movs	r2, #16
 80064d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064e8:	711a      	strb	r2, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d006      	beq.n	8006502 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064fc:	711a      	strb	r2, [r3, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2243      	movs	r2, #67	@ 0x43
 8006506:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006508:	4b02      	ldr	r3, [pc, #8]	@ (8006514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000054 	.word	0x20000054

08006518 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	220a      	movs	r2, #10
 8006524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006526:	4b03      	ldr	r3, [pc, #12]	@ (8006534 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	20000010 	.word	0x20000010

08006538 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006548:	2303      	movs	r3, #3
 800654a:	e009      	b.n	8006560 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	33b0      	adds	r3, #176	@ 0xb0
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	32b0      	adds	r2, #176	@ 0xb0
 8006582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006586:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800658e:	2303      	movs	r3, #3
 8006590:	e008      	b.n	80065a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	32b0      	adds	r2, #176	@ 0xb0
 80065c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e004      	b.n	80065de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	32b0      	adds	r2, #176	@ 0xb0
 80065fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006602:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	32b0      	adds	r2, #176	@ 0xb0
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006616:	2303      	movs	r3, #3
 8006618:	e018      	b.n	800664c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7c1b      	ldrb	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006622:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <USBD_CDC_ReceivePacket+0x68>)
 8006624:	7819      	ldrb	r1, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800662c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 ff85 	bl	8008540 <USBD_LL_PrepareReceive>
 8006636:	e008      	b.n	800664a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006638:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <USBD_CDC_ReceivePacket+0x68>)
 800663a:	7819      	ldrb	r1, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006642:	2340      	movs	r3, #64	@ 0x40
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 ff7b 	bl	8008540 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000098 	.word	0x20000098

08006658 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800666c:	2303      	movs	r3, #3
 800666e:	e01f      	b.n	80066b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	79fa      	ldrb	r2, [r7, #7]
 80066a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f001 fdf5 	bl	8008294 <USBD_LL_Init>
 80066aa:	4603      	mov	r3, r0
 80066ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e025      	b.n	800671c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32ae      	adds	r2, #174	@ 0xae
 80066e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00f      	beq.n	800670c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32ae      	adds	r2, #174	@ 0xae
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fc:	f107 020e 	add.w	r2, r7, #14
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	4602      	mov	r2, r0
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fdfd 	bl	800832c <USBD_LL_Start>
 8006732:	4603      	mov	r3, r0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006744:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d009      	beq.n	8006780 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	4611      	mov	r1, r2
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
 800677c:	4603      	mov	r3, r0
 800677e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	78fa      	ldrb	r2, [r7, #3]
 80067a4:	4611      	mov	r1, r2
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067b0:	2303      	movs	r3, #3
 80067b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 f90c 	bl	80079ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80067e4:	461a      	mov	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d01a      	beq.n	8006830 <USBD_LL_SetupStage+0x72>
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d822      	bhi.n	8006844 <USBD_LL_SetupStage+0x86>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <USBD_LL_SetupStage+0x4a>
 8006802:	2b01      	cmp	r3, #1
 8006804:	d00a      	beq.n	800681c <USBD_LL_SetupStage+0x5e>
 8006806:	e01d      	b.n	8006844 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb63 	bl	8006edc <USBD_StdDevReq>
 8006816:	4603      	mov	r3, r0
 8006818:	73fb      	strb	r3, [r7, #15]
      break;
 800681a:	e020      	b.n	800685e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fbcb 	bl	8006fc0 <USBD_StdItfReq>
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]
      break;
 800682e:	e016      	b.n	800685e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fc2d 	bl	8007098 <USBD_StdEPReq>
 800683e:	4603      	mov	r3, r0
 8006840:	73fb      	strb	r3, [r7, #15]
      break;
 8006842:	e00c      	b.n	800685e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800684a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800684e:	b2db      	uxtb	r3, r3
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fdca 	bl	80083ec <USBD_LL_StallEP>
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
      break;
 800685c:	bf00      	nop
  }

  return ret;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	460b      	mov	r3, r1
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d16e      	bne.n	800695e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006886:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800688e:	2b03      	cmp	r3, #3
 8006890:	f040 8098 	bne.w	80069c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	429a      	cmp	r2, r3
 800689e:	d913      	bls.n	80068c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	1ad2      	subs	r2, r2, r3
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	4293      	cmp	r3, r2
 80068b8:	bf28      	it	cs
 80068ba:	4613      	movcs	r3, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f001 f994 	bl	8007bee <USBD_CtlContinueRx>
 80068c6:	e07d      	b.n	80069c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d014      	beq.n	8006900 <USBD_LL_DataOutStage+0x98>
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d81d      	bhi.n	8006916 <USBD_LL_DataOutStage+0xae>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <USBD_LL_DataOutStage+0x7c>
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d003      	beq.n	80068ea <USBD_LL_DataOutStage+0x82>
 80068e2:	e018      	b.n	8006916 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	75bb      	strb	r3, [r7, #22]
            break;
 80068e8:	e018      	b.n	800691c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	4619      	mov	r1, r3
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fa64 	bl	8006dc2 <USBD_CoreFindIF>
 80068fa:	4603      	mov	r3, r0
 80068fc:	75bb      	strb	r3, [r7, #22]
            break;
 80068fe:	e00d      	b.n	800691c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006906:	b2db      	uxtb	r3, r3
 8006908:	4619      	mov	r1, r3
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fa66 	bl	8006ddc <USBD_CoreFindEP>
 8006910:	4603      	mov	r3, r0
 8006912:	75bb      	strb	r3, [r7, #22]
            break;
 8006914:	e002      	b.n	800691c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	75bb      	strb	r3, [r7, #22]
            break;
 800691a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800691c:	7dbb      	ldrb	r3, [r7, #22]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d119      	bne.n	8006956 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b03      	cmp	r3, #3
 800692c:	d113      	bne.n	8006956 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800692e:	7dba      	ldrb	r2, [r7, #22]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	32ae      	adds	r2, #174	@ 0xae
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800693e:	7dba      	ldrb	r2, [r7, #22]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006946:	7dba      	ldrb	r2, [r7, #22]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	32ae      	adds	r2, #174	@ 0xae
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f001 f95a 	bl	8007c10 <USBD_CtlSendStatus>
 800695c:	e032      	b.n	80069c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800695e:	7afb      	ldrb	r3, [r7, #11]
 8006960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006964:	b2db      	uxtb	r3, r3
 8006966:	4619      	mov	r1, r3
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 fa37 	bl	8006ddc <USBD_CoreFindEP>
 800696e:	4603      	mov	r3, r0
 8006970:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006972:	7dbb      	ldrb	r3, [r7, #22]
 8006974:	2bff      	cmp	r3, #255	@ 0xff
 8006976:	d025      	beq.n	80069c4 <USBD_LL_DataOutStage+0x15c>
 8006978:	7dbb      	ldrb	r3, [r7, #22]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d122      	bne.n	80069c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b03      	cmp	r3, #3
 8006988:	d117      	bne.n	80069ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800698a:	7dba      	ldrb	r2, [r7, #22]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	32ae      	adds	r2, #174	@ 0xae
 8006990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00f      	beq.n	80069ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800699a:	7dba      	ldrb	r2, [r7, #22]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80069a2:	7dba      	ldrb	r2, [r7, #22]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	32ae      	adds	r2, #174	@ 0xae
 80069a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	7afa      	ldrb	r2, [r7, #11]
 80069b0:	4611      	mov	r1, r2
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	4798      	blx	r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	e000      	b.n	80069c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	460b      	mov	r3, r1
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d16f      	bne.n	8006ac2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3314      	adds	r3, #20
 80069e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d15a      	bne.n	8006aa8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d914      	bls.n	8006a28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	1ad2      	subs	r2, r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f001 f8bc 	bl	8007b92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2100      	movs	r1, #0
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f001 fd8d 	bl	8008540 <USBD_LL_PrepareReceive>
 8006a26:	e03f      	b.n	8006aa8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d11c      	bne.n	8006a6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d316      	bcc.n	8006a6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d20f      	bcs.n	8006a6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2100      	movs	r1, #0
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f001 f89d 	bl	8007b92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a60:	2300      	movs	r3, #0
 8006a62:	2200      	movs	r2, #0
 8006a64:	2100      	movs	r1, #0
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f001 fd6a 	bl	8008540 <USBD_LL_PrepareReceive>
 8006a6c:	e01c      	b.n	8006aa8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d10f      	bne.n	8006a9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a9a:	2180      	movs	r1, #128	@ 0x80
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f001 fca5 	bl	80083ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f001 f8c7 	bl	8007c36 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d03a      	beq.n	8006b28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff fe42 	bl	800673c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006ac0:	e032      	b.n	8006b28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
 8006ac4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	4619      	mov	r1, r3
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f985 	bl	8006ddc <USBD_CoreFindEP>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	2bff      	cmp	r3, #255	@ 0xff
 8006ada:	d025      	beq.n	8006b28 <USBD_LL_DataInStage+0x15a>
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d122      	bne.n	8006b28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d11c      	bne.n	8006b28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006aee:	7dfa      	ldrb	r2, [r7, #23]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	32ae      	adds	r2, #174	@ 0xae
 8006af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d014      	beq.n	8006b28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006afe:	7dfa      	ldrb	r2, [r7, #23]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b06:	7dfa      	ldrb	r2, [r7, #23]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	32ae      	adds	r2, #174	@ 0xae
 8006b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	7afa      	ldrb	r2, [r7, #11]
 8006b14:	4611      	mov	r1, r2
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	4798      	blx	r3
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b1e:	7dbb      	ldrb	r3, [r7, #22]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b24:	7dbb      	ldrb	r3, [r7, #22]
 8006b26:	e000      	b.n	8006b2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d014      	beq.n	8006b98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6852      	ldr	r2, [r2, #4]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	4611      	mov	r1, r2
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006b94:	2303      	movs	r3, #3
 8006b96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b98:	2340      	movs	r3, #64	@ 0x40
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 fbdf 	bl	8008362 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2240      	movs	r2, #64	@ 0x40
 8006bb0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bb4:	2340      	movs	r3, #64	@ 0x40
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2180      	movs	r1, #128	@ 0x80
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f001 fbd1 	bl	8008362 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2240      	movs	r2, #64	@ 0x40
 8006bca:	621a      	str	r2, [r3, #32]

  return ret;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	78fa      	ldrb	r2, [r7, #3]
 8006be6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d006      	beq.n	8006c18 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d106      	bne.n	8006c50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d110      	bne.n	8006c94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	32ae      	adds	r2, #174	@ 0xae
 8006cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e01c      	b.n	8006cfa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d115      	bne.n	8006cf8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	32ae      	adds	r2, #174	@ 0xae
 8006cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	32ae      	adds	r2, #174	@ 0xae
 8006cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	78fa      	ldrb	r2, [r7, #3]
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	32ae      	adds	r2, #174	@ 0xae
 8006d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e01c      	b.n	8006d5e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d115      	bne.n	8006d5c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	32ae      	adds	r2, #174	@ 0xae
 8006d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	32ae      	adds	r2, #174	@ 0xae
 8006d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	4611      	mov	r1, r2
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00e      	beq.n	8006db8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6852      	ldr	r2, [r2, #4]
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	4611      	mov	r1, r2
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006db4:	2303      	movs	r3, #3
 8006db6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006dce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006de8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b086      	sub	sp, #24
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	885b      	ldrh	r3, [r3, #2]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	7812      	ldrb	r2, [r2, #0]
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d91f      	bls.n	8006e5c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e22:	e013      	b.n	8006e4c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e24:	f107 030a 	add.w	r3, r7, #10
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6978      	ldr	r0, [r7, #20]
 8006e2c:	f000 f81b 	bl	8006e66 <USBD_GetNextDesc>
 8006e30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b05      	cmp	r3, #5
 8006e38:	d108      	bne.n	8006e4c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	789b      	ldrb	r3, [r3, #2]
 8006e42:	78fa      	ldrb	r2, [r7, #3]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d008      	beq.n	8006e5a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	885b      	ldrh	r3, [r3, #2]
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	897b      	ldrh	r3, [r7, #10]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d8e5      	bhi.n	8006e24 <USBD_GetEpDesc+0x2e>
 8006e58:	e000      	b.n	8006e5c <USBD_GetEpDesc+0x66>
          break;
 8006e5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e5c:	693b      	ldr	r3, [r7, #16]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	7812      	ldrb	r2, [r2, #0]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e90:	68fb      	ldr	r3, [r7, #12]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b087      	sub	sp, #28
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ebc:	8a3b      	ldrh	r3, [r7, #16]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	b21a      	sxth	r2, r3
 8006ec2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	b21b      	sxth	r3, r3
 8006eca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ecc:	89fb      	ldrh	r3, [r7, #14]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ef2:	2b40      	cmp	r3, #64	@ 0x40
 8006ef4:	d005      	beq.n	8006f02 <USBD_StdDevReq+0x26>
 8006ef6:	2b40      	cmp	r3, #64	@ 0x40
 8006ef8:	d857      	bhi.n	8006faa <USBD_StdDevReq+0xce>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00f      	beq.n	8006f1e <USBD_StdDevReq+0x42>
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d153      	bne.n	8006faa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	32ae      	adds	r2, #174	@ 0xae
 8006f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	4798      	blx	r3
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1c:	e04a      	b.n	8006fb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b09      	cmp	r3, #9
 8006f24:	d83b      	bhi.n	8006f9e <USBD_StdDevReq+0xc2>
 8006f26:	a201      	add	r2, pc, #4	@ (adr r2, 8006f2c <USBD_StdDevReq+0x50>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f81 	.word	0x08006f81
 8006f30:	08006f95 	.word	0x08006f95
 8006f34:	08006f9f 	.word	0x08006f9f
 8006f38:	08006f8b 	.word	0x08006f8b
 8006f3c:	08006f9f 	.word	0x08006f9f
 8006f40:	08006f5f 	.word	0x08006f5f
 8006f44:	08006f55 	.word	0x08006f55
 8006f48:	08006f9f 	.word	0x08006f9f
 8006f4c:	08006f77 	.word	0x08006f77
 8006f50:	08006f69 	.word	0x08006f69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa3c 	bl	80073d4 <USBD_GetDescriptor>
          break;
 8006f5c:	e024      	b.n	8006fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fba1 	bl	80076a8 <USBD_SetAddress>
          break;
 8006f66:	e01f      	b.n	8006fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fbe0 	bl	8007730 <USBD_SetConfig>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]
          break;
 8006f74:	e018      	b.n	8006fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fc83 	bl	8007884 <USBD_GetConfig>
          break;
 8006f7e:	e013      	b.n	8006fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fcb4 	bl	80078f0 <USBD_GetStatus>
          break;
 8006f88:	e00e      	b.n	8006fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fce3 	bl	8007958 <USBD_SetFeature>
          break;
 8006f92:	e009      	b.n	8006fa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fd07 	bl	80079aa <USBD_ClrFeature>
          break;
 8006f9c:	e004      	b.n	8006fa8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fd5e 	bl	8007a62 <USBD_CtlError>
          break;
 8006fa6:	bf00      	nop
      }
      break;
 8006fa8:	e004      	b.n	8006fb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fd58 	bl	8007a62 <USBD_CtlError>
      break;
 8006fb2:	bf00      	nop
  }

  return ret;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop

08006fc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fd6:	2b40      	cmp	r3, #64	@ 0x40
 8006fd8:	d005      	beq.n	8006fe6 <USBD_StdItfReq+0x26>
 8006fda:	2b40      	cmp	r3, #64	@ 0x40
 8006fdc:	d852      	bhi.n	8007084 <USBD_StdItfReq+0xc4>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <USBD_StdItfReq+0x26>
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d14e      	bne.n	8007084 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d840      	bhi.n	8007076 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	889b      	ldrh	r3, [r3, #4]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d836      	bhi.n	800706c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	889b      	ldrh	r3, [r3, #4]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff fedb 	bl	8006dc2 <USBD_CoreFindIF>
 800700c:	4603      	mov	r3, r0
 800700e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007010:	7bbb      	ldrb	r3, [r7, #14]
 8007012:	2bff      	cmp	r3, #255	@ 0xff
 8007014:	d01d      	beq.n	8007052 <USBD_StdItfReq+0x92>
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d11a      	bne.n	8007052 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800701c:	7bba      	ldrb	r2, [r7, #14]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	32ae      	adds	r2, #174	@ 0xae
 8007022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00f      	beq.n	800704c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800702c:	7bba      	ldrb	r2, [r7, #14]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007034:	7bba      	ldrb	r2, [r7, #14]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	32ae      	adds	r2, #174	@ 0xae
 800703a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
 8007046:	4603      	mov	r3, r0
 8007048:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800704a:	e004      	b.n	8007056 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800704c:	2303      	movs	r3, #3
 800704e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007050:	e001      	b.n	8007056 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007052:	2303      	movs	r3, #3
 8007054:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	88db      	ldrh	r3, [r3, #6]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d110      	bne.n	8007080 <USBD_StdItfReq+0xc0>
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10d      	bne.n	8007080 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fdd3 	bl	8007c10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800706a:	e009      	b.n	8007080 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fcf7 	bl	8007a62 <USBD_CtlError>
          break;
 8007074:	e004      	b.n	8007080 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fcf2 	bl	8007a62 <USBD_CtlError>
          break;
 800707e:	e000      	b.n	8007082 <USBD_StdItfReq+0xc2>
          break;
 8007080:	bf00      	nop
      }
      break;
 8007082:	e004      	b.n	800708e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fceb 	bl	8007a62 <USBD_CtlError>
      break;
 800708c:	bf00      	nop
  }

  return ret;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	889b      	ldrh	r3, [r3, #4]
 80070aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070b4:	2b40      	cmp	r3, #64	@ 0x40
 80070b6:	d007      	beq.n	80070c8 <USBD_StdEPReq+0x30>
 80070b8:	2b40      	cmp	r3, #64	@ 0x40
 80070ba:	f200 817f 	bhi.w	80073bc <USBD_StdEPReq+0x324>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d02a      	beq.n	8007118 <USBD_StdEPReq+0x80>
 80070c2:	2b20      	cmp	r3, #32
 80070c4:	f040 817a 	bne.w	80073bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff fe85 	bl	8006ddc <USBD_CoreFindEP>
 80070d2:	4603      	mov	r3, r0
 80070d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070d6:	7b7b      	ldrb	r3, [r7, #13]
 80070d8:	2bff      	cmp	r3, #255	@ 0xff
 80070da:	f000 8174 	beq.w	80073c6 <USBD_StdEPReq+0x32e>
 80070de:	7b7b      	ldrb	r3, [r7, #13]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f040 8170 	bne.w	80073c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80070e6:	7b7a      	ldrb	r2, [r7, #13]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80070ee:	7b7a      	ldrb	r2, [r7, #13]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	32ae      	adds	r2, #174	@ 0xae
 80070f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 8163 	beq.w	80073c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007100:	7b7a      	ldrb	r2, [r7, #13]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	32ae      	adds	r2, #174	@ 0xae
 8007106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
 8007112:	4603      	mov	r3, r0
 8007114:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007116:	e156      	b.n	80073c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b03      	cmp	r3, #3
 800711e:	d008      	beq.n	8007132 <USBD_StdEPReq+0x9a>
 8007120:	2b03      	cmp	r3, #3
 8007122:	f300 8145 	bgt.w	80073b0 <USBD_StdEPReq+0x318>
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 809b 	beq.w	8007262 <USBD_StdEPReq+0x1ca>
 800712c:	2b01      	cmp	r3, #1
 800712e:	d03c      	beq.n	80071aa <USBD_StdEPReq+0x112>
 8007130:	e13e      	b.n	80073b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d002      	beq.n	8007144 <USBD_StdEPReq+0xac>
 800713e:	2b03      	cmp	r3, #3
 8007140:	d016      	beq.n	8007170 <USBD_StdEPReq+0xd8>
 8007142:	e02c      	b.n	800719e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00d      	beq.n	8007166 <USBD_StdEPReq+0xce>
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b80      	cmp	r3, #128	@ 0x80
 800714e:	d00a      	beq.n	8007166 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 f949 	bl	80083ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800715a:	2180      	movs	r1, #128	@ 0x80
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 f945 	bl	80083ec <USBD_LL_StallEP>
 8007162:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007164:	e020      	b.n	80071a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fc7a 	bl	8007a62 <USBD_CtlError>
              break;
 800716e:	e01b      	b.n	80071a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	885b      	ldrh	r3, [r3, #2]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10e      	bne.n	8007196 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <USBD_StdEPReq+0xfe>
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	2b80      	cmp	r3, #128	@ 0x80
 8007182:	d008      	beq.n	8007196 <USBD_StdEPReq+0xfe>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	88db      	ldrh	r3, [r3, #6]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d104      	bne.n	8007196 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 f92b 	bl	80083ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fd3a 	bl	8007c10 <USBD_CtlSendStatus>

              break;
 800719c:	e004      	b.n	80071a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fc5e 	bl	8007a62 <USBD_CtlError>
              break;
 80071a6:	bf00      	nop
          }
          break;
 80071a8:	e107      	b.n	80073ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d002      	beq.n	80071bc <USBD_StdEPReq+0x124>
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d016      	beq.n	80071e8 <USBD_StdEPReq+0x150>
 80071ba:	e04b      	b.n	8007254 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00d      	beq.n	80071de <USBD_StdEPReq+0x146>
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b80      	cmp	r3, #128	@ 0x80
 80071c6:	d00a      	beq.n	80071de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 f90d 	bl	80083ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071d2:	2180      	movs	r1, #128	@ 0x80
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 f909 	bl	80083ec <USBD_LL_StallEP>
 80071da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071dc:	e040      	b.n	8007260 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fc3e 	bl	8007a62 <USBD_CtlError>
              break;
 80071e6:	e03b      	b.n	8007260 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	885b      	ldrh	r3, [r3, #2]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d136      	bne.n	800725e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d004      	beq.n	8007204 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 f913 	bl	800842a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fd03 	bl	8007c10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff fde4 	bl	8006ddc <USBD_CoreFindEP>
 8007214:	4603      	mov	r3, r0
 8007216:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007218:	7b7b      	ldrb	r3, [r7, #13]
 800721a:	2bff      	cmp	r3, #255	@ 0xff
 800721c:	d01f      	beq.n	800725e <USBD_StdEPReq+0x1c6>
 800721e:	7b7b      	ldrb	r3, [r7, #13]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d11c      	bne.n	800725e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007224:	7b7a      	ldrb	r2, [r7, #13]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800722c:	7b7a      	ldrb	r2, [r7, #13]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32ae      	adds	r2, #174	@ 0xae
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d010      	beq.n	800725e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800723c:	7b7a      	ldrb	r2, [r7, #13]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	32ae      	adds	r2, #174	@ 0xae
 8007242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	4798      	blx	r3
 800724e:	4603      	mov	r3, r0
 8007250:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007252:	e004      	b.n	800725e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fc03 	bl	8007a62 <USBD_CtlError>
              break;
 800725c:	e000      	b.n	8007260 <USBD_StdEPReq+0x1c8>
              break;
 800725e:	bf00      	nop
          }
          break;
 8007260:	e0ab      	b.n	80073ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d002      	beq.n	8007274 <USBD_StdEPReq+0x1dc>
 800726e:	2b03      	cmp	r3, #3
 8007270:	d032      	beq.n	80072d8 <USBD_StdEPReq+0x240>
 8007272:	e097      	b.n	80073a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d007      	beq.n	800728a <USBD_StdEPReq+0x1f2>
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b80      	cmp	r3, #128	@ 0x80
 800727e:	d004      	beq.n	800728a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fbed 	bl	8007a62 <USBD_CtlError>
                break;
 8007288:	e091      	b.n	80073ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800728a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800728e:	2b00      	cmp	r3, #0
 8007290:	da0b      	bge.n	80072aa <USBD_StdEPReq+0x212>
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	3310      	adds	r3, #16
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	4413      	add	r3, r2
 80072a6:	3304      	adds	r3, #4
 80072a8:	e00b      	b.n	80072c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	4413      	add	r3, r2
 80072c0:	3304      	adds	r3, #4
 80072c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2202      	movs	r2, #2
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc43 	bl	8007b5c <USBD_CtlSendData>
              break;
 80072d6:	e06a      	b.n	80073ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	da11      	bge.n	8007304 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	f003 020f 	and.w	r2, r3, #15
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	3324      	adds	r3, #36	@ 0x24
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d117      	bne.n	800732a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fbb0 	bl	8007a62 <USBD_CtlError>
                  break;
 8007302:	e054      	b.n	80073ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	f003 020f 	and.w	r2, r3, #15
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d104      	bne.n	800732a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fb9d 	bl	8007a62 <USBD_CtlError>
                  break;
 8007328:	e041      	b.n	80073ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800732a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800732e:	2b00      	cmp	r3, #0
 8007330:	da0b      	bge.n	800734a <USBD_StdEPReq+0x2b2>
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007338:	4613      	mov	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	3310      	adds	r3, #16
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	4413      	add	r3, r2
 8007346:	3304      	adds	r3, #4
 8007348:	e00b      	b.n	8007362 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	3304      	adds	r3, #4
 8007362:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <USBD_StdEPReq+0x2d8>
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b80      	cmp	r3, #128	@ 0x80
 800736e:	d103      	bne.n	8007378 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e00e      	b.n	8007396 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f873 	bl	8008468 <USBD_LL_IsStallEP>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2201      	movs	r2, #1
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e002      	b.n	8007396 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2202      	movs	r2, #2
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fbdd 	bl	8007b5c <USBD_CtlSendData>
              break;
 80073a2:	e004      	b.n	80073ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fb5b 	bl	8007a62 <USBD_CtlError>
              break;
 80073ac:	bf00      	nop
          }
          break;
 80073ae:	e004      	b.n	80073ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fb55 	bl	8007a62 <USBD_CtlError>
          break;
 80073b8:	bf00      	nop
      }
      break;
 80073ba:	e005      	b.n	80073c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fb4f 	bl	8007a62 <USBD_CtlError>
      break;
 80073c4:	e000      	b.n	80073c8 <USBD_StdEPReq+0x330>
      break;
 80073c6:	bf00      	nop
  }

  return ret;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	885b      	ldrh	r3, [r3, #2]
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	2b06      	cmp	r3, #6
 80073f6:	f200 8128 	bhi.w	800764a <USBD_GetDescriptor+0x276>
 80073fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007400 <USBD_GetDescriptor+0x2c>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	0800741d 	.word	0x0800741d
 8007404:	08007435 	.word	0x08007435
 8007408:	08007475 	.word	0x08007475
 800740c:	0800764b 	.word	0x0800764b
 8007410:	0800764b 	.word	0x0800764b
 8007414:	080075eb 	.word	0x080075eb
 8007418:	08007617 	.word	0x08007617
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	7c12      	ldrb	r2, [r2, #16]
 8007428:	f107 0108 	add.w	r1, r7, #8
 800742c:	4610      	mov	r0, r2
 800742e:	4798      	blx	r3
 8007430:	60f8      	str	r0, [r7, #12]
      break;
 8007432:	e112      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	7c1b      	ldrb	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10d      	bne.n	8007458 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007444:	f107 0208 	add.w	r2, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	2202      	movs	r2, #2
 8007454:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007456:	e100      	b.n	800765a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	f107 0208 	add.w	r2, r7, #8
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
 8007468:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	2202      	movs	r2, #2
 8007470:	701a      	strb	r2, [r3, #0]
      break;
 8007472:	e0f2      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	885b      	ldrh	r3, [r3, #2]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b05      	cmp	r3, #5
 800747c:	f200 80ac 	bhi.w	80075d8 <USBD_GetDescriptor+0x204>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <USBD_GetDescriptor+0xb4>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074a1 	.word	0x080074a1
 800748c:	080074d5 	.word	0x080074d5
 8007490:	08007509 	.word	0x08007509
 8007494:	0800753d 	.word	0x0800753d
 8007498:	08007571 	.word	0x08007571
 800749c:	080075a5 	.word	0x080075a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	7c12      	ldrb	r2, [r2, #16]
 80074b8:	f107 0108 	add.w	r1, r7, #8
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074c2:	e091      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 facb 	bl	8007a62 <USBD_CtlError>
            err++;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	3301      	adds	r3, #1
 80074d0:	72fb      	strb	r3, [r7, #11]
          break;
 80074d2:	e089      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	7c12      	ldrb	r2, [r2, #16]
 80074ec:	f107 0108 	add.w	r1, r7, #8
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074f6:	e077      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fab1 	bl	8007a62 <USBD_CtlError>
            err++;
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	3301      	adds	r3, #1
 8007504:	72fb      	strb	r3, [r7, #11]
          break;
 8007506:	e06f      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	7c12      	ldrb	r2, [r2, #16]
 8007520:	f107 0108 	add.w	r1, r7, #8
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
 8007528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800752a:	e05d      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa97 	bl	8007a62 <USBD_CtlError>
            err++;
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	3301      	adds	r3, #1
 8007538:	72fb      	strb	r3, [r7, #11]
          break;
 800753a:	e055      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	7c12      	ldrb	r2, [r2, #16]
 8007554:	f107 0108 	add.w	r1, r7, #8
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
 800755c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800755e:	e043      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa7d 	bl	8007a62 <USBD_CtlError>
            err++;
 8007568:	7afb      	ldrb	r3, [r7, #11]
 800756a:	3301      	adds	r3, #1
 800756c:	72fb      	strb	r3, [r7, #11]
          break;
 800756e:	e03b      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	7c12      	ldrb	r2, [r2, #16]
 8007588:	f107 0108 	add.w	r1, r7, #8
 800758c:	4610      	mov	r0, r2
 800758e:	4798      	blx	r3
 8007590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007592:	e029      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fa63 	bl	8007a62 <USBD_CtlError>
            err++;
 800759c:	7afb      	ldrb	r3, [r7, #11]
 800759e:	3301      	adds	r3, #1
 80075a0:	72fb      	strb	r3, [r7, #11]
          break;
 80075a2:	e021      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	7c12      	ldrb	r2, [r2, #16]
 80075bc:	f107 0108 	add.w	r1, r7, #8
 80075c0:	4610      	mov	r0, r2
 80075c2:	4798      	blx	r3
 80075c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c6:	e00f      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa49 	bl	8007a62 <USBD_CtlError>
            err++;
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	3301      	adds	r3, #1
 80075d4:	72fb      	strb	r3, [r7, #11]
          break;
 80075d6:	e007      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa41 	bl	8007a62 <USBD_CtlError>
          err++;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3301      	adds	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80075e6:	bf00      	nop
      }
      break;
 80075e8:	e037      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	7c1b      	ldrb	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fa:	f107 0208 	add.w	r2, r7, #8
 80075fe:	4610      	mov	r0, r2
 8007600:	4798      	blx	r3
 8007602:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007604:	e029      	b.n	800765a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fa2a 	bl	8007a62 <USBD_CtlError>
        err++;
 800760e:	7afb      	ldrb	r3, [r7, #11]
 8007610:	3301      	adds	r3, #1
 8007612:	72fb      	strb	r3, [r7, #11]
      break;
 8007614:	e021      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7c1b      	ldrb	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007626:	f107 0208 	add.w	r2, r7, #8
 800762a:	4610      	mov	r0, r2
 800762c:	4798      	blx	r3
 800762e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3301      	adds	r3, #1
 8007634:	2207      	movs	r2, #7
 8007636:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007638:	e00f      	b.n	800765a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fa10 	bl	8007a62 <USBD_CtlError>
        err++;
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	3301      	adds	r3, #1
 8007646:	72fb      	strb	r3, [r7, #11]
      break;
 8007648:	e007      	b.n	800765a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fa08 	bl	8007a62 <USBD_CtlError>
      err++;
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	3301      	adds	r3, #1
 8007656:	72fb      	strb	r3, [r7, #11]
      break;
 8007658:	bf00      	nop
  }

  if (err != 0U)
 800765a:	7afb      	ldrb	r3, [r7, #11]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d11e      	bne.n	800769e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	88db      	ldrh	r3, [r3, #6]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d016      	beq.n	8007696 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007668:	893b      	ldrh	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00e      	beq.n	800768c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	88da      	ldrh	r2, [r3, #6]
 8007672:	893b      	ldrh	r3, [r7, #8]
 8007674:	4293      	cmp	r3, r2
 8007676:	bf28      	it	cs
 8007678:	4613      	movcs	r3, r2
 800767a:	b29b      	uxth	r3, r3
 800767c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800767e:	893b      	ldrh	r3, [r7, #8]
 8007680:	461a      	mov	r2, r3
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fa69 	bl	8007b5c <USBD_CtlSendData>
 800768a:	e009      	b.n	80076a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9e7 	bl	8007a62 <USBD_CtlError>
 8007694:	e004      	b.n	80076a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 faba 	bl	8007c10 <USBD_CtlSendStatus>
 800769c:	e000      	b.n	80076a0 <USBD_GetDescriptor+0x2cc>
    return;
 800769e:	bf00      	nop
  }
}
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop

080076a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	889b      	ldrh	r3, [r3, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d131      	bne.n	800771e <USBD_SetAddress+0x76>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	88db      	ldrh	r3, [r3, #6]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d12d      	bne.n	800771e <USBD_SetAddress+0x76>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	885b      	ldrh	r3, [r3, #2]
 80076c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80076c8:	d829      	bhi.n	800771e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	885b      	ldrh	r3, [r3, #2]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d104      	bne.n	80076ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f9bc 	bl	8007a62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ea:	e01d      	b.n	8007728 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	7bfa      	ldrb	r2, [r7, #15]
 80076f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fee1 	bl	80084c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa86 	bl	8007c10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2202      	movs	r2, #2
 800770e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007712:	e009      	b.n	8007728 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771c:	e004      	b.n	8007728 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f99e 	bl	8007a62 <USBD_CtlError>
  }
}
 8007726:	bf00      	nop
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	885b      	ldrh	r3, [r3, #2]
 8007742:	b2da      	uxtb	r2, r3
 8007744:	4b4e      	ldr	r3, [pc, #312]	@ (8007880 <USBD_SetConfig+0x150>)
 8007746:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007748:	4b4d      	ldr	r3, [pc, #308]	@ (8007880 <USBD_SetConfig+0x150>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d905      	bls.n	800775c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f985 	bl	8007a62 <USBD_CtlError>
    return USBD_FAIL;
 8007758:	2303      	movs	r3, #3
 800775a:	e08c      	b.n	8007876 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d002      	beq.n	800776e <USBD_SetConfig+0x3e>
 8007768:	2b03      	cmp	r3, #3
 800776a:	d029      	beq.n	80077c0 <USBD_SetConfig+0x90>
 800776c:	e075      	b.n	800785a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800776e:	4b44      	ldr	r3, [pc, #272]	@ (8007880 <USBD_SetConfig+0x150>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d020      	beq.n	80077b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007776:	4b42      	ldr	r3, [pc, #264]	@ (8007880 <USBD_SetConfig+0x150>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007780:	4b3f      	ldr	r3, [pc, #252]	@ (8007880 <USBD_SetConfig+0x150>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fe ffe3 	bl	8006752 <USBD_SetClassConfig>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d008      	beq.n	80077a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f962 	bl	8007a62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2202      	movs	r2, #2
 80077a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077a6:	e065      	b.n	8007874 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fa31 	bl	8007c10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2203      	movs	r2, #3
 80077b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80077b6:	e05d      	b.n	8007874 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fa29 	bl	8007c10 <USBD_CtlSendStatus>
      break;
 80077be:	e059      	b.n	8007874 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077c0:	4b2f      	ldr	r3, [pc, #188]	@ (8007880 <USBD_SetConfig+0x150>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d112      	bne.n	80077ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80077d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007880 <USBD_SetConfig+0x150>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077da:	4b29      	ldr	r3, [pc, #164]	@ (8007880 <USBD_SetConfig+0x150>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7fe ffd2 	bl	800678a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa12 	bl	8007c10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077ec:	e042      	b.n	8007874 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80077ee:	4b24      	ldr	r3, [pc, #144]	@ (8007880 <USBD_SetConfig+0x150>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d02a      	beq.n	8007852 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fe ffc0 	bl	800678a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800780a:	4b1d      	ldr	r3, [pc, #116]	@ (8007880 <USBD_SetConfig+0x150>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007814:	4b1a      	ldr	r3, [pc, #104]	@ (8007880 <USBD_SetConfig+0x150>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fe ff99 	bl	8006752 <USBD_SetClassConfig>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00f      	beq.n	800784a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f918 	bl	8007a62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fe ffa5 	bl	800678a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007848:	e014      	b.n	8007874 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f9e0 	bl	8007c10 <USBD_CtlSendStatus>
      break;
 8007850:	e010      	b.n	8007874 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9dc 	bl	8007c10 <USBD_CtlSendStatus>
      break;
 8007858:	e00c      	b.n	8007874 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f900 	bl	8007a62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007862:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <USBD_SetConfig+0x150>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fe ff8e 	bl	800678a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800786e:	2303      	movs	r3, #3
 8007870:	73fb      	strb	r3, [r7, #15]
      break;
 8007872:	bf00      	nop
  }

  return ret;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000298 	.word	0x20000298

08007884 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	88db      	ldrh	r3, [r3, #6]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d004      	beq.n	80078a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f8e2 	bl	8007a62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800789e:	e023      	b.n	80078e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	dc02      	bgt.n	80078b2 <USBD_GetConfig+0x2e>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dc03      	bgt.n	80078b8 <USBD_GetConfig+0x34>
 80078b0:	e015      	b.n	80078de <USBD_GetConfig+0x5a>
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d00b      	beq.n	80078ce <USBD_GetConfig+0x4a>
 80078b6:	e012      	b.n	80078de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3308      	adds	r3, #8
 80078c2:	2201      	movs	r2, #1
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f948 	bl	8007b5c <USBD_CtlSendData>
        break;
 80078cc:	e00c      	b.n	80078e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3304      	adds	r3, #4
 80078d2:	2201      	movs	r2, #1
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f940 	bl	8007b5c <USBD_CtlSendData>
        break;
 80078dc:	e004      	b.n	80078e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f8be 	bl	8007a62 <USBD_CtlError>
        break;
 80078e6:	bf00      	nop
}
 80078e8:	bf00      	nop
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007900:	b2db      	uxtb	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	2b02      	cmp	r3, #2
 8007906:	d81e      	bhi.n	8007946 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	88db      	ldrh	r3, [r3, #6]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d004      	beq.n	800791a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f8a5 	bl	8007a62 <USBD_CtlError>
        break;
 8007918:	e01a      	b.n	8007950 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f043 0202 	orr.w	r2, r3, #2
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	330c      	adds	r3, #12
 800793a:	2202      	movs	r2, #2
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f90c 	bl	8007b5c <USBD_CtlSendData>
      break;
 8007944:	e004      	b.n	8007950 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f88a 	bl	8007a62 <USBD_CtlError>
      break;
 800794e:	bf00      	nop
  }
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	885b      	ldrh	r3, [r3, #2]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d107      	bne.n	800797a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f94c 	bl	8007c10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007978:	e013      	b.n	80079a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	885b      	ldrh	r3, [r3, #2]
 800797e:	2b02      	cmp	r3, #2
 8007980:	d10b      	bne.n	800799a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	889b      	ldrh	r3, [r3, #4]
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	b29b      	uxth	r3, r3
 800798a:	b2da      	uxtb	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f93c 	bl	8007c10 <USBD_CtlSendStatus>
}
 8007998:	e003      	b.n	80079a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f860 	bl	8007a62 <USBD_CtlError>
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d80b      	bhi.n	80079da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10c      	bne.n	80079e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f91c 	bl	8007c10 <USBD_CtlSendStatus>
      }
      break;
 80079d8:	e004      	b.n	80079e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f840 	bl	8007a62 <USBD_CtlError>
      break;
 80079e2:	e000      	b.n	80079e6 <USBD_ClrFeature+0x3c>
      break;
 80079e4:	bf00      	nop
  }
}
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	781a      	ldrb	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	781a      	ldrb	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3301      	adds	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7ff fa40 	bl	8006e9e <SWAPBYTE>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	461a      	mov	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff fa33 	bl	8006e9e <SWAPBYTE>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3301      	adds	r3, #1
 8007a44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7ff fa26 	bl	8006e9e <SWAPBYTE>
 8007a52:	4603      	mov	r3, r0
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	80da      	strh	r2, [r3, #6]
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a6c:	2180      	movs	r1, #128	@ 0x80
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fcbc 	bl	80083ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a74:	2100      	movs	r1, #0
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fcb8 	bl	80083ec <USBD_LL_StallEP>
}
 8007a7c:	bf00      	nop
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d042      	beq.n	8007b20 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007a9e:	6938      	ldr	r0, [r7, #16]
 8007aa0:	f000 f842 	bl	8007b28 <USBD_GetLen>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aae:	d808      	bhi.n	8007ac2 <USBD_GetString+0x3e>
 8007ab0:	6938      	ldr	r0, [r7, #16]
 8007ab2:	f000 f839 	bl	8007b28 <USBD_GetLen>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	3301      	adds	r3, #1
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	e001      	b.n	8007ac6 <USBD_GetString+0x42>
 8007ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	4413      	add	r3, r2
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	7812      	ldrb	r2, [r2, #0]
 8007ad4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007aec:	e013      	b.n	8007b16 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	4413      	add	r3, r2
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	7812      	ldrb	r2, [r2, #0]
 8007af8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3301      	adds	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
    idx++;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	3301      	adds	r3, #1
 8007b04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	3301      	adds	r3, #1
 8007b14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e7      	bne.n	8007aee <USBD_GetString+0x6a>
 8007b1e:	e000      	b.n	8007b22 <USBD_GetString+0x9e>
    return;
 8007b20:	bf00      	nop
  }
}
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b38:	e005      	b.n	8007b46 <USBD_GetLen+0x1e>
  {
    len++;
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	3301      	adds	r3, #1
 8007b44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1f5      	bne.n	8007b3a <USBD_GetLen+0x12>
  }

  return len;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	2100      	movs	r1, #0
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fcbb 	bl	80084fe <USBD_LL_Transmit>

  return USBD_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b084      	sub	sp, #16
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fcaa 	bl	80084fe <USBD_LL_Transmit>

  return USBD_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2203      	movs	r2, #3
 8007bc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	2100      	movs	r1, #0
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 fcae 	bl	8008540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	2100      	movs	r1, #0
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 fc9d 	bl	8008540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c20:	2300      	movs	r3, #0
 8007c22:	2200      	movs	r2, #0
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fc69 	bl	80084fe <USBD_LL_Transmit>

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2205      	movs	r2, #5
 8007c42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c46:	2300      	movs	r3, #0
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fc77 	bl	8008540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c60:	2200      	movs	r2, #0
 8007c62:	4912      	ldr	r1, [pc, #72]	@ (8007cac <MX_USB_DEVICE_Init+0x50>)
 8007c64:	4812      	ldr	r0, [pc, #72]	@ (8007cb0 <MX_USB_DEVICE_Init+0x54>)
 8007c66:	f7fe fcf7 	bl	8006658 <USBD_Init>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c70:	f7f9 f87c 	bl	8000d6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c74:	490f      	ldr	r1, [pc, #60]	@ (8007cb4 <MX_USB_DEVICE_Init+0x58>)
 8007c76:	480e      	ldr	r0, [pc, #56]	@ (8007cb0 <MX_USB_DEVICE_Init+0x54>)
 8007c78:	f7fe fd1e 	bl	80066b8 <USBD_RegisterClass>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c82:	f7f9 f873 	bl	8000d6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c86:	490c      	ldr	r1, [pc, #48]	@ (8007cb8 <MX_USB_DEVICE_Init+0x5c>)
 8007c88:	4809      	ldr	r0, [pc, #36]	@ (8007cb0 <MX_USB_DEVICE_Init+0x54>)
 8007c8a:	f7fe fc55 	bl	8006538 <USBD_CDC_RegisterInterface>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c94:	f7f9 f86a 	bl	8000d6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c98:	4805      	ldr	r0, [pc, #20]	@ (8007cb0 <MX_USB_DEVICE_Init+0x54>)
 8007c9a:	f7fe fd43 	bl	8006724 <USBD_Start>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ca4:	f7f9 f862 	bl	8000d6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ca8:	bf00      	nop
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	200000b0 	.word	0x200000b0
 8007cb0:	2000029c 	.word	0x2000029c
 8007cb4:	2000001c 	.word	0x2000001c
 8007cb8:	2000009c 	.word	0x2000009c

08007cbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4905      	ldr	r1, [pc, #20]	@ (8007cd8 <CDC_Init_FS+0x1c>)
 8007cc4:	4805      	ldr	r0, [pc, #20]	@ (8007cdc <CDC_Init_FS+0x20>)
 8007cc6:	f7fe fc51 	bl	800656c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cca:	4905      	ldr	r1, [pc, #20]	@ (8007ce0 <CDC_Init_FS+0x24>)
 8007ccc:	4803      	ldr	r0, [pc, #12]	@ (8007cdc <CDC_Init_FS+0x20>)
 8007cce:	f7fe fc6f 	bl	80065b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007cd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	200005b8 	.word	0x200005b8
 8007cdc:	2000029c 	.word	0x2000029c
 8007ce0:	20000578 	.word	0x20000578

08007ce4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ce8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
 8007d00:	4613      	mov	r3, r2
 8007d02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	2b23      	cmp	r3, #35	@ 0x23
 8007d08:	d84a      	bhi.n	8007da0 <CDC_Control_FS+0xac>
 8007d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d10 <CDC_Control_FS+0x1c>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007da1 	.word	0x08007da1
 8007d14:	08007da1 	.word	0x08007da1
 8007d18:	08007da1 	.word	0x08007da1
 8007d1c:	08007da1 	.word	0x08007da1
 8007d20:	08007da1 	.word	0x08007da1
 8007d24:	08007da1 	.word	0x08007da1
 8007d28:	08007da1 	.word	0x08007da1
 8007d2c:	08007da1 	.word	0x08007da1
 8007d30:	08007da1 	.word	0x08007da1
 8007d34:	08007da1 	.word	0x08007da1
 8007d38:	08007da1 	.word	0x08007da1
 8007d3c:	08007da1 	.word	0x08007da1
 8007d40:	08007da1 	.word	0x08007da1
 8007d44:	08007da1 	.word	0x08007da1
 8007d48:	08007da1 	.word	0x08007da1
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007da1 	.word	0x08007da1
 8007d54:	08007da1 	.word	0x08007da1
 8007d58:	08007da1 	.word	0x08007da1
 8007d5c:	08007da1 	.word	0x08007da1
 8007d60:	08007da1 	.word	0x08007da1
 8007d64:	08007da1 	.word	0x08007da1
 8007d68:	08007da1 	.word	0x08007da1
 8007d6c:	08007da1 	.word	0x08007da1
 8007d70:	08007da1 	.word	0x08007da1
 8007d74:	08007da1 	.word	0x08007da1
 8007d78:	08007da1 	.word	0x08007da1
 8007d7c:	08007da1 	.word	0x08007da1
 8007d80:	08007da1 	.word	0x08007da1
 8007d84:	08007da1 	.word	0x08007da1
 8007d88:	08007da1 	.word	0x08007da1
 8007d8c:	08007da1 	.word	0x08007da1
 8007d90:	08007da1 	.word	0x08007da1
 8007d94:	08007da1 	.word	0x08007da1
 8007d98:	08007da1 	.word	0x08007da1
 8007d9c:	08007da1 	.word	0x08007da1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007da0:	bf00      	nop
  }

  return (USBD_OK);
 8007da2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	4805      	ldr	r0, [pc, #20]	@ (8007dd4 <CDC_Receive_FS+0x24>)
 8007dbe:	f7fe fbf7 	bl	80065b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dc2:	4804      	ldr	r0, [pc, #16]	@ (8007dd4 <CDC_Receive_FS+0x24>)
 8007dc4:	f7fe fc12 	bl	80065ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007dc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	2000029c 	.word	0x2000029c

08007dd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
	...

08007dfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2212      	movs	r2, #18
 8007e0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e0e:	4b03      	ldr	r3, [pc, #12]	@ (8007e1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	200000cc 	.word	0x200000cc

08007e20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2204      	movs	r2, #4
 8007e30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e32:	4b03      	ldr	r3, [pc, #12]	@ (8007e40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	200000e0 	.word	0x200000e0

08007e44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	6039      	str	r1, [r7, #0]
 8007e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d105      	bne.n	8007e62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	4907      	ldr	r1, [pc, #28]	@ (8007e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e5a:	4808      	ldr	r0, [pc, #32]	@ (8007e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e5c:	f7ff fe12 	bl	8007a84 <USBD_GetString>
 8007e60:	e004      	b.n	8007e6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	4904      	ldr	r1, [pc, #16]	@ (8007e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e66:	4805      	ldr	r0, [pc, #20]	@ (8007e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e68:	f7ff fe0c 	bl	8007a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e6c:	4b02      	ldr	r3, [pc, #8]	@ (8007e78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000db8 	.word	0x20000db8
 8007e7c:	080086a0 	.word	0x080086a0

08007e80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	4904      	ldr	r1, [pc, #16]	@ (8007ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e90:	4804      	ldr	r0, [pc, #16]	@ (8007ea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e92:	f7ff fdf7 	bl	8007a84 <USBD_GetString>
  return USBD_StrDesc;
 8007e96:	4b02      	ldr	r3, [pc, #8]	@ (8007ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	20000db8 	.word	0x20000db8
 8007ea4:	080086b8 	.word	0x080086b8

08007ea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	6039      	str	r1, [r7, #0]
 8007eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	221a      	movs	r2, #26
 8007eb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007eba:	f000 f843 	bl	8007f44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ebe:	4b02      	ldr	r3, [pc, #8]	@ (8007ec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	200000e4 	.word	0x200000e4

08007ecc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d105      	bne.n	8007eea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	4907      	ldr	r1, [pc, #28]	@ (8007f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ee2:	4808      	ldr	r0, [pc, #32]	@ (8007f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ee4:	f7ff fdce 	bl	8007a84 <USBD_GetString>
 8007ee8:	e004      	b.n	8007ef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	4904      	ldr	r1, [pc, #16]	@ (8007f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007eee:	4805      	ldr	r0, [pc, #20]	@ (8007f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ef0:	f7ff fdc8 	bl	8007a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ef4:	4b02      	ldr	r3, [pc, #8]	@ (8007f00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000db8 	.word	0x20000db8
 8007f04:	080086cc 	.word	0x080086cc

08007f08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	6039      	str	r1, [r7, #0]
 8007f12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d105      	bne.n	8007f26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4907      	ldr	r1, [pc, #28]	@ (8007f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f1e:	4808      	ldr	r0, [pc, #32]	@ (8007f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f20:	f7ff fdb0 	bl	8007a84 <USBD_GetString>
 8007f24:	e004      	b.n	8007f30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	4904      	ldr	r1, [pc, #16]	@ (8007f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f2a:	4805      	ldr	r0, [pc, #20]	@ (8007f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f2c:	f7ff fdaa 	bl	8007a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f30:	4b02      	ldr	r3, [pc, #8]	@ (8007f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000db8 	.word	0x20000db8
 8007f40:	080086d8 	.word	0x080086d8

08007f44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f88 <Get_SerialNum+0x44>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f50:	4b0e      	ldr	r3, [pc, #56]	@ (8007f8c <Get_SerialNum+0x48>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f56:	4b0e      	ldr	r3, [pc, #56]	@ (8007f90 <Get_SerialNum+0x4c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4413      	add	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f6a:	2208      	movs	r2, #8
 8007f6c:	4909      	ldr	r1, [pc, #36]	@ (8007f94 <Get_SerialNum+0x50>)
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f814 	bl	8007f9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f74:	2204      	movs	r2, #4
 8007f76:	4908      	ldr	r1, [pc, #32]	@ (8007f98 <Get_SerialNum+0x54>)
 8007f78:	68b8      	ldr	r0, [r7, #8]
 8007f7a:	f000 f80f 	bl	8007f9c <IntToUnicode>
  }
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	1fff7a10 	.word	0x1fff7a10
 8007f8c:	1fff7a14 	.word	0x1fff7a14
 8007f90:	1fff7a18 	.word	0x1fff7a18
 8007f94:	200000e6 	.word	0x200000e6
 8007f98:	200000f6 	.word	0x200000f6

08007f9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007fae:	2300      	movs	r3, #0
 8007fb0:	75fb      	strb	r3, [r7, #23]
 8007fb2:	e027      	b.n	8008004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	0f1b      	lsrs	r3, r3, #28
 8007fb8:	2b09      	cmp	r3, #9
 8007fba:	d80b      	bhi.n	8007fd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	0f1b      	lsrs	r3, r3, #28
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	440b      	add	r3, r1
 8007fcc:	3230      	adds	r2, #48	@ 0x30
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	e00a      	b.n	8007fea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	0f1b      	lsrs	r3, r3, #28
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	4619      	mov	r1, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	440b      	add	r3, r1
 8007fe4:	3237      	adds	r2, #55	@ 0x37
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	3301      	adds	r3, #1
 8008002:	75fb      	strb	r3, [r7, #23]
 8008004:	7dfa      	ldrb	r2, [r7, #23]
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	429a      	cmp	r2, r3
 800800a:	d3d3      	bcc.n	8007fb4 <IntToUnicode+0x18>
  }
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	@ 0x28
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008024:	f107 0314 	add.w	r3, r7, #20
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	605a      	str	r2, [r3, #4]
 800802e:	609a      	str	r2, [r3, #8]
 8008030:	60da      	str	r2, [r3, #12]
 8008032:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800803c:	d13a      	bne.n	80080b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800803e:	2300      	movs	r3, #0
 8008040:	613b      	str	r3, [r7, #16]
 8008042:	4b1e      	ldr	r3, [pc, #120]	@ (80080bc <HAL_PCD_MspInit+0xa0>)
 8008044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008046:	4a1d      	ldr	r2, [pc, #116]	@ (80080bc <HAL_PCD_MspInit+0xa0>)
 8008048:	f043 0301 	orr.w	r3, r3, #1
 800804c:	6313      	str	r3, [r2, #48]	@ 0x30
 800804e:	4b1b      	ldr	r3, [pc, #108]	@ (80080bc <HAL_PCD_MspInit+0xa0>)
 8008050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	613b      	str	r3, [r7, #16]
 8008058:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800805a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800805e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008060:	2302      	movs	r3, #2
 8008062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008064:	2300      	movs	r3, #0
 8008066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008068:	2303      	movs	r3, #3
 800806a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800806c:	230a      	movs	r3, #10
 800806e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008070:	f107 0314 	add.w	r3, r7, #20
 8008074:	4619      	mov	r1, r3
 8008076:	4812      	ldr	r0, [pc, #72]	@ (80080c0 <HAL_PCD_MspInit+0xa4>)
 8008078:	f7f9 fd00 	bl	8001a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800807c:	4b0f      	ldr	r3, [pc, #60]	@ (80080bc <HAL_PCD_MspInit+0xa0>)
 800807e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008080:	4a0e      	ldr	r2, [pc, #56]	@ (80080bc <HAL_PCD_MspInit+0xa0>)
 8008082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008086:	6353      	str	r3, [r2, #52]	@ 0x34
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	4b0b      	ldr	r3, [pc, #44]	@ (80080bc <HAL_PCD_MspInit+0xa0>)
 800808e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008090:	4a0a      	ldr	r2, [pc, #40]	@ (80080bc <HAL_PCD_MspInit+0xa0>)
 8008092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008096:	6453      	str	r3, [r2, #68]	@ 0x44
 8008098:	4b08      	ldr	r3, [pc, #32]	@ (80080bc <HAL_PCD_MspInit+0xa0>)
 800809a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800809c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80080a4:	2200      	movs	r2, #0
 80080a6:	2100      	movs	r1, #0
 80080a8:	2043      	movs	r0, #67	@ 0x43
 80080aa:	f7f9 fcb0 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080ae:	2043      	movs	r0, #67	@ 0x43
 80080b0:	f7f9 fcc9 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080b4:	bf00      	nop
 80080b6:	3728      	adds	r7, #40	@ 0x28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	40023800 	.word	0x40023800
 80080c0:	40020000 	.word	0x40020000

080080c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080d8:	4619      	mov	r1, r3
 80080da:	4610      	mov	r0, r2
 80080dc:	f7fe fb6f 	bl	80067be <USBD_LL_SetupStage>
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	4613      	mov	r3, r2
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	440b      	add	r3, r1
 8008108:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	78fb      	ldrb	r3, [r7, #3]
 8008110:	4619      	mov	r1, r3
 8008112:	f7fe fba9 	bl	8006868 <USBD_LL_DataOutStage>
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008130:	78fa      	ldrb	r2, [r7, #3]
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	4613      	mov	r3, r2
 8008136:	00db      	lsls	r3, r3, #3
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	3320      	adds	r3, #32
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	78fb      	ldrb	r3, [r7, #3]
 8008144:	4619      	mov	r1, r3
 8008146:	f7fe fc42 	bl	80069ce <USBD_LL_DataInStage>
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe fd7c 	bl	8006c5e <USBD_LL_SOF>
}
 8008166:	bf00      	nop
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008176:	2301      	movs	r3, #1
 8008178:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	79db      	ldrb	r3, [r3, #7]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d001      	beq.n	8008186 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008182:	f7f8 fdf3 	bl	8000d6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800818c:	7bfa      	ldrb	r2, [r7, #15]
 800818e:	4611      	mov	r1, r2
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe fd20 	bl	8006bd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe fcc8 	bl	8006b32 <USBD_LL_Reset>
}
 80081a2:	bf00      	nop
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe fd1b 	bl	8006bf6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081d2:	f043 0301 	orr.w	r3, r3, #1
 80081d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	7adb      	ldrb	r3, [r3, #11]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081e0:	4b04      	ldr	r3, [pc, #16]	@ (80081f4 <HAL_PCD_SuspendCallback+0x48>)
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	4a03      	ldr	r2, [pc, #12]	@ (80081f4 <HAL_PCD_SuspendCallback+0x48>)
 80081e6:	f043 0306 	orr.w	r3, r3, #6
 80081ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081ec:	bf00      	nop
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	e000ed00 	.word	0xe000ed00

080081f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe fd11 	bl	8006c2e <USBD_LL_Resume>
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	4611      	mov	r1, r2
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe fd69 	bl	8006d02 <USBD_LL_IsoOUTIncomplete>
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fd25 	bl	8006c9e <USBD_LL_IsoINIncomplete>
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fd7b 	bl	8006d66 <USBD_LL_DevConnected>
}
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fd78 	bl	8006d7c <USBD_LL_DevDisconnected>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d13c      	bne.n	800831e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80082a4:	4a20      	ldr	r2, [pc, #128]	@ (8008328 <USBD_LL_Init+0x94>)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008328 <USBD_LL_Init+0x94>)
 80082b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008328 <USBD_LL_Init+0x94>)
 80082b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80082ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80082bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008328 <USBD_LL_Init+0x94>)
 80082be:	2204      	movs	r2, #4
 80082c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80082c2:	4b19      	ldr	r3, [pc, #100]	@ (8008328 <USBD_LL_Init+0x94>)
 80082c4:	2202      	movs	r2, #2
 80082c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80082c8:	4b17      	ldr	r3, [pc, #92]	@ (8008328 <USBD_LL_Init+0x94>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80082ce:	4b16      	ldr	r3, [pc, #88]	@ (8008328 <USBD_LL_Init+0x94>)
 80082d0:	2202      	movs	r2, #2
 80082d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082d4:	4b14      	ldr	r3, [pc, #80]	@ (8008328 <USBD_LL_Init+0x94>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80082da:	4b13      	ldr	r3, [pc, #76]	@ (8008328 <USBD_LL_Init+0x94>)
 80082dc:	2200      	movs	r2, #0
 80082de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80082e0:	4b11      	ldr	r3, [pc, #68]	@ (8008328 <USBD_LL_Init+0x94>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80082e6:	4b10      	ldr	r3, [pc, #64]	@ (8008328 <USBD_LL_Init+0x94>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80082ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008328 <USBD_LL_Init+0x94>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082f2:	480d      	ldr	r0, [pc, #52]	@ (8008328 <USBD_LL_Init+0x94>)
 80082f4:	f7f9 fed4 	bl	80020a0 <HAL_PCD_Init>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80082fe:	f7f8 fd35 	bl	8000d6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008302:	2180      	movs	r1, #128	@ 0x80
 8008304:	4808      	ldr	r0, [pc, #32]	@ (8008328 <USBD_LL_Init+0x94>)
 8008306:	f7fb f900 	bl	800350a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800830a:	2240      	movs	r2, #64	@ 0x40
 800830c:	2100      	movs	r1, #0
 800830e:	4806      	ldr	r0, [pc, #24]	@ (8008328 <USBD_LL_Init+0x94>)
 8008310:	f7fb f8b4 	bl	800347c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008314:	2280      	movs	r2, #128	@ 0x80
 8008316:	2101      	movs	r1, #1
 8008318:	4803      	ldr	r0, [pc, #12]	@ (8008328 <USBD_LL_Init+0x94>)
 800831a:	f7fb f8af 	bl	800347c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20000fb8 	.word	0x20000fb8

0800832c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008342:	4618      	mov	r0, r3
 8008344:	f7f9 ffbb 	bl	80022be <HAL_PCD_Start>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	4618      	mov	r0, r3
 8008350:	f000 f942 	bl	80085d8 <USBD_Get_USB_Status>
 8008354:	4603      	mov	r3, r0
 8008356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008358:	7bbb      	ldrb	r3, [r7, #14]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	4608      	mov	r0, r1
 800836c:	4611      	mov	r1, r2
 800836e:	461a      	mov	r2, r3
 8008370:	4603      	mov	r3, r0
 8008372:	70fb      	strb	r3, [r7, #3]
 8008374:	460b      	mov	r3, r1
 8008376:	70bb      	strb	r3, [r7, #2]
 8008378:	4613      	mov	r3, r2
 800837a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800838a:	78bb      	ldrb	r3, [r7, #2]
 800838c:	883a      	ldrh	r2, [r7, #0]
 800838e:	78f9      	ldrb	r1, [r7, #3]
 8008390:	f7fa fc8f 	bl	8002cb2 <HAL_PCD_EP_Open>
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f91c 	bl	80085d8 <USBD_Get_USB_Status>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083c8:	78fa      	ldrb	r2, [r7, #3]
 80083ca:	4611      	mov	r1, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fa fcda 	bl	8002d86 <HAL_PCD_EP_Close>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 f8fd 	bl	80085d8 <USBD_Get_USB_Status>
 80083de:	4603      	mov	r3, r0
 80083e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008406:	78fa      	ldrb	r2, [r7, #3]
 8008408:	4611      	mov	r1, r2
 800840a:	4618      	mov	r0, r3
 800840c:	f7fa fd92 	bl	8002f34 <HAL_PCD_EP_SetStall>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f8de 	bl	80085d8 <USBD_Get_USB_Status>
 800841c:	4603      	mov	r3, r0
 800841e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008420:	7bbb      	ldrb	r3, [r7, #14]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008444:	78fa      	ldrb	r2, [r7, #3]
 8008446:	4611      	mov	r1, r2
 8008448:	4618      	mov	r0, r3
 800844a:	f7fa fdd6 	bl	8002ffa <HAL_PCD_EP_ClrStall>
 800844e:	4603      	mov	r3, r0
 8008450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	4618      	mov	r0, r3
 8008456:	f000 f8bf 	bl	80085d8 <USBD_Get_USB_Status>
 800845a:	4603      	mov	r3, r0
 800845c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800845e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800847a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800847c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008480:	2b00      	cmp	r3, #0
 8008482:	da0b      	bge.n	800849c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800848a:	68f9      	ldr	r1, [r7, #12]
 800848c:	4613      	mov	r3, r2
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	4413      	add	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	440b      	add	r3, r1
 8008496:	3316      	adds	r3, #22
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	e00b      	b.n	80084b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084a2:	68f9      	ldr	r1, [r7, #12]
 80084a4:	4613      	mov	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	440b      	add	r3, r1
 80084ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80084b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084da:	78fa      	ldrb	r2, [r7, #3]
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fa fbc3 	bl	8002c6a <HAL_PCD_SetAddress>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f874 	bl	80085d8 <USBD_Get_USB_Status>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b086      	sub	sp, #24
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
 800850a:	460b      	mov	r3, r1
 800850c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800851c:	7af9      	ldrb	r1, [r7, #11]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	f7fa fccd 	bl	8002ec0 <HAL_PCD_EP_Transmit>
 8008526:	4603      	mov	r3, r0
 8008528:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800852a:	7dfb      	ldrb	r3, [r7, #23]
 800852c:	4618      	mov	r0, r3
 800852e:	f000 f853 	bl	80085d8 <USBD_Get_USB_Status>
 8008532:	4603      	mov	r3, r0
 8008534:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008536:	7dbb      	ldrb	r3, [r7, #22]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	607a      	str	r2, [r7, #4]
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	460b      	mov	r3, r1
 800854e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800855e:	7af9      	ldrb	r1, [r7, #11]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	f7fa fc59 	bl	8002e1a <HAL_PCD_EP_Receive>
 8008568:	4603      	mov	r3, r0
 800856a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800856c:	7dfb      	ldrb	r3, [r7, #23]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 f832 	bl	80085d8 <USBD_Get_USB_Status>
 8008574:	4603      	mov	r3, r0
 8008576:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008578:	7dbb      	ldrb	r3, [r7, #22]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	460b      	mov	r3, r1
 800858c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008594:	78fa      	ldrb	r2, [r7, #3]
 8008596:	4611      	mov	r1, r2
 8008598:	4618      	mov	r0, r3
 800859a:	f7fa fc79 	bl	8002e90 <HAL_PCD_EP_GetRxCount>
 800859e:	4603      	mov	r3, r0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085b0:	4b03      	ldr	r3, [pc, #12]	@ (80085c0 <USBD_static_malloc+0x18>)
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	2000149c 	.word	0x2000149c

080085c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]

}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	4603      	mov	r3, r0
 80085e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d817      	bhi.n	800861c <USBD_Get_USB_Status+0x44>
 80085ec:	a201      	add	r2, pc, #4	@ (adr r2, 80085f4 <USBD_Get_USB_Status+0x1c>)
 80085ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f2:	bf00      	nop
 80085f4:	08008605 	.word	0x08008605
 80085f8:	0800860b 	.word	0x0800860b
 80085fc:	08008611 	.word	0x08008611
 8008600:	08008617 	.word	0x08008617
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
    break;
 8008608:	e00b      	b.n	8008622 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800860a:	2303      	movs	r3, #3
 800860c:	73fb      	strb	r3, [r7, #15]
    break;
 800860e:	e008      	b.n	8008622 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008610:	2301      	movs	r3, #1
 8008612:	73fb      	strb	r3, [r7, #15]
    break;
 8008614:	e005      	b.n	8008622 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008616:	2303      	movs	r3, #3
 8008618:	73fb      	strb	r3, [r7, #15]
    break;
 800861a:	e002      	b.n	8008622 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800861c:	2303      	movs	r3, #3
 800861e:	73fb      	strb	r3, [r7, #15]
    break;
 8008620:	bf00      	nop
  }
  return usb_status;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <memset>:
 8008630:	4402      	add	r2, r0
 8008632:	4603      	mov	r3, r0
 8008634:	4293      	cmp	r3, r2
 8008636:	d100      	bne.n	800863a <memset+0xa>
 8008638:	4770      	bx	lr
 800863a:	f803 1b01 	strb.w	r1, [r3], #1
 800863e:	e7f9      	b.n	8008634 <memset+0x4>

08008640 <__libc_init_array>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	4d0d      	ldr	r5, [pc, #52]	@ (8008678 <__libc_init_array+0x38>)
 8008644:	4c0d      	ldr	r4, [pc, #52]	@ (800867c <__libc_init_array+0x3c>)
 8008646:	1b64      	subs	r4, r4, r5
 8008648:	10a4      	asrs	r4, r4, #2
 800864a:	2600      	movs	r6, #0
 800864c:	42a6      	cmp	r6, r4
 800864e:	d109      	bne.n	8008664 <__libc_init_array+0x24>
 8008650:	4d0b      	ldr	r5, [pc, #44]	@ (8008680 <__libc_init_array+0x40>)
 8008652:	4c0c      	ldr	r4, [pc, #48]	@ (8008684 <__libc_init_array+0x44>)
 8008654:	f000 f818 	bl	8008688 <_init>
 8008658:	1b64      	subs	r4, r4, r5
 800865a:	10a4      	asrs	r4, r4, #2
 800865c:	2600      	movs	r6, #0
 800865e:	42a6      	cmp	r6, r4
 8008660:	d105      	bne.n	800866e <__libc_init_array+0x2e>
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	f855 3b04 	ldr.w	r3, [r5], #4
 8008668:	4798      	blx	r3
 800866a:	3601      	adds	r6, #1
 800866c:	e7ee      	b.n	800864c <__libc_init_array+0xc>
 800866e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008672:	4798      	blx	r3
 8008674:	3601      	adds	r6, #1
 8008676:	e7f2      	b.n	800865e <__libc_init_array+0x1e>
 8008678:	08008708 	.word	0x08008708
 800867c:	08008708 	.word	0x08008708
 8008680:	08008708 	.word	0x08008708
 8008684:	0800870c 	.word	0x0800870c

08008688 <_init>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr

08008694 <_fini>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr
