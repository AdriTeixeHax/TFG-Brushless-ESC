
TFG-Brushless-ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c64  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007dfc  08007dfc  00008dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e54  08007e54  000090fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007e54  08007e54  00008e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e5c  08007e5c  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e5c  08007e5c  00008e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e60  08007e60  00008e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007e64  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000151c  200000fc  08007f60  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001618  08007f60  00009618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133e3  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003268  00000000  00000000  0001c50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d71  00000000  00000000  00020918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0d2  00000000  00000000  00021689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015635  00000000  00000000  0003b75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b698  00000000  00000000  00050d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec428  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  000ec46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000f0e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007de4 	.word	0x08007de4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007de4 	.word	0x08007de4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fbce 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f822 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9e6 	bl	80008a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d8:	f006 ff6e 	bl	80073b8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80004dc:	f000 f972 	bl	80007c4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80004e0:	f000 f882 	bl	80005e8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004e4:	f000 f8d2 	bl	800068c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004e8:	2100      	movs	r1, #0
 80004ea:	480a      	ldr	r0, [pc, #40]	@ (8000514 <main+0x4c>)
 80004ec:	f003 f82c 	bl	8003548 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <main+0x4c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004fc:	f000 fc28 	bl	8000d50 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 127);
 8000500:	4b04      	ldr	r3, [pc, #16]	@ (8000514 <main+0x4c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	227f      	movs	r2, #127	@ 0x7f
 8000506:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(1000);
 8000508:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800050c:	f000 fc20 	bl	8000d50 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000510:	bf00      	nop
 8000512:	e7ed      	b.n	80004f0 <main+0x28>
 8000514:	20000160 	.word	0x20000160

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	@ 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	@ 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f007 fc30 	bl	8007d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b27      	ldr	r3, [pc, #156]	@ (80005e0 <SystemClock_Config+0xc8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	4a26      	ldr	r2, [pc, #152]	@ (80005e0 <SystemClock_Config+0xc8>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	@ 0x40
 800054c:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <SystemClock_Config+0xc8>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b21      	ldr	r3, [pc, #132]	@ (80005e4 <SystemClock_Config+0xcc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a20      	ldr	r2, [pc, #128]	@ (80005e4 <SystemClock_Config+0xcc>)
 8000562:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1e      	ldr	r3, [pc, #120]	@ (80005e4 <SystemClock_Config+0xcc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000588:	2319      	movs	r3, #25
 800058a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800058c:	2390      	movs	r3, #144	@ 0x90
 800058e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000590:	2306      	movs	r3, #6
 8000592:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000594:	2303      	movs	r3, #3
 8000596:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f002 fb53 	bl	8002c48 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 f9c0 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fdb5 	bl	8003138 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005d4:	f000 f9aa 	bl	800092c <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	@ 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <MX_ADC1_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <MX_ADC1_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000606:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800060c:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000612:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000618:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000620:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <MX_ADC1_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000626:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <MX_ADC1_Init+0x98>)
 8000628:	4a17      	ldr	r2, [pc, #92]	@ (8000688 <MX_ADC1_Init+0xa0>)
 800062a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062c:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000632:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <MX_ADC1_Init+0x98>)
 8000634:	2201      	movs	r2, #1
 8000636:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000640:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_ADC1_Init+0x98>)
 8000642:	2201      	movs	r2, #1
 8000644:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000646:	480e      	ldr	r0, [pc, #56]	@ (8000680 <MX_ADC1_Init+0x98>)
 8000648:	f000 fba6 	bl	8000d98 <HAL_ADC_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000652:	f000 f96b 	bl	800092c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000656:	2305      	movs	r3, #5
 8000658:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	@ (8000680 <MX_ADC1_Init+0x98>)
 8000668:	f000 fbda 	bl	8000e20 <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000672:	f000 f95b 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000118 	.word	0x20000118
 8000684:	40012000 	.word	0x40012000
 8000688:	0f000001 	.word	0x0f000001

0800068c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b092      	sub	sp, #72	@ 0x48
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000692:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]
 80006ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2220      	movs	r2, #32
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f007 fb68 	bl	8007d8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006bc:	4b3f      	ldr	r3, [pc, #252]	@ (80007bc <MX_TIM1_Init+0x130>)
 80006be:	4a40      	ldr	r2, [pc, #256]	@ (80007c0 <MX_TIM1_Init+0x134>)
 80006c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 250;
 80006c2:	4b3e      	ldr	r3, [pc, #248]	@ (80007bc <MX_TIM1_Init+0x130>)
 80006c4:	22fa      	movs	r2, #250	@ 0xfa
 80006c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c8:	4b3c      	ldr	r3, [pc, #240]	@ (80007bc <MX_TIM1_Init+0x130>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80006ce:	4b3b      	ldr	r3, [pc, #236]	@ (80007bc <MX_TIM1_Init+0x130>)
 80006d0:	22ff      	movs	r2, #255	@ 0xff
 80006d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d4:	4b39      	ldr	r3, [pc, #228]	@ (80007bc <MX_TIM1_Init+0x130>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006da:	4b38      	ldr	r3, [pc, #224]	@ (80007bc <MX_TIM1_Init+0x130>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e0:	4b36      	ldr	r3, [pc, #216]	@ (80007bc <MX_TIM1_Init+0x130>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006e6:	4835      	ldr	r0, [pc, #212]	@ (80007bc <MX_TIM1_Init+0x130>)
 80006e8:	f002 fede 	bl	80034a8 <HAL_TIM_PWM_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80006f2:	f000 f91b 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000702:	4619      	mov	r1, r3
 8000704:	482d      	ldr	r0, [pc, #180]	@ (80007bc <MX_TIM1_Init+0x130>)
 8000706:	f003 facf 	bl	8003ca8 <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000710:	f000 f90c 	bl	800092c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000714:	2360      	movs	r3, #96	@ 0x60
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 127;
 8000718:	237f      	movs	r3, #127	@ 0x7f
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071c:	2300      	movs	r3, #0
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000720:	2300      	movs	r3, #0
 8000722:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	4820      	ldr	r0, [pc, #128]	@ (80007bc <MX_TIM1_Init+0x130>)
 800073a:	f002 ffb5 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000744:	f000 f8f2 	bl	800092c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800074c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000750:	2204      	movs	r2, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4819      	ldr	r0, [pc, #100]	@ (80007bc <MX_TIM1_Init+0x130>)
 8000756:	f002 ffa7 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000760:	f000 f8e4 	bl	800092c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000768:	2208      	movs	r2, #8
 800076a:	4619      	mov	r1, r3
 800076c:	4813      	ldr	r0, [pc, #76]	@ (80007bc <MX_TIM1_Init+0x130>)
 800076e:	f002 ff9b 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000778:	f000 f8d8 	bl	800092c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000794:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <MX_TIM1_Init+0x130>)
 80007a0:	f003 faf0 	bl	8003d84 <HAL_TIMEx_ConfigBreakDeadTime>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 80007aa:	f000 f8bf 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <MX_TIM1_Init+0x130>)
 80007b0:	f000 f966 	bl	8000a80 <HAL_TIM_MspPostInit>

}
 80007b4:	bf00      	nop
 80007b6:	3748      	adds	r7, #72	@ 0x48
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000160 	.word	0x20000160
 80007c0:	40010000 	.word	0x40010000

080007c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e6:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <MX_TIM3_Init+0xd8>)
 80007e8:	4a2d      	ldr	r2, [pc, #180]	@ (80008a0 <MX_TIM3_Init+0xdc>)
 80007ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007ec:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <MX_TIM3_Init+0xd8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <MX_TIM3_Init+0xd8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007f8:	4b28      	ldr	r3, [pc, #160]	@ (800089c <MX_TIM3_Init+0xd8>)
 80007fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b26      	ldr	r3, [pc, #152]	@ (800089c <MX_TIM3_Init+0xd8>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b25      	ldr	r3, [pc, #148]	@ (800089c <MX_TIM3_Init+0xd8>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800080c:	4823      	ldr	r0, [pc, #140]	@ (800089c <MX_TIM3_Init+0xd8>)
 800080e:	f002 fe4b 	bl	80034a8 <HAL_TIM_PWM_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000818:	f000 f888 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4619      	mov	r1, r3
 800082a:	481c      	ldr	r0, [pc, #112]	@ (800089c <MX_TIM3_Init+0xd8>)
 800082c:	f003 fa3c 	bl	8003ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000836:	f000 f879 	bl	800092c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083a:	2360      	movs	r3, #96	@ 0x60
 800083c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	4619      	mov	r1, r3
 8000850:	4812      	ldr	r0, [pc, #72]	@ (800089c <MX_TIM3_Init+0xd8>)
 8000852:	f002 ff29 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800085c:	f000 f866 	bl	800092c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2204      	movs	r2, #4
 8000864:	4619      	mov	r1, r3
 8000866:	480d      	ldr	r0, [pc, #52]	@ (800089c <MX_TIM3_Init+0xd8>)
 8000868:	f002 ff1e 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000872:	f000 f85b 	bl	800092c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2208      	movs	r2, #8
 800087a:	4619      	mov	r1, r3
 800087c:	4807      	ldr	r0, [pc, #28]	@ (800089c <MX_TIM3_Init+0xd8>)
 800087e:	f002 ff13 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000888:	f000 f850 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800088c:	4803      	ldr	r0, [pc, #12]	@ (800089c <MX_TIM3_Init+0xd8>)
 800088e:	f000 f8f7 	bl	8000a80 <HAL_TIM_MspPostInit>

}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001a8 	.word	0x200001a8
 80008a0:	40000400 	.word	0x40000400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <MX_GPIO_Init+0x84>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000928 <MX_GPIO_Init+0x84>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <MX_GPIO_Init+0x84>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b17      	ldr	r3, [pc, #92]	@ (8000928 <MX_GPIO_Init+0x84>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a16      	ldr	r2, [pc, #88]	@ (8000928 <MX_GPIO_Init+0x84>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MX_GPIO_Init+0x84>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <MX_GPIO_Init+0x84>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000928 <MX_GPIO_Init+0x84>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <MX_GPIO_Init+0x84>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_GPIO_Init+0x84>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <MX_GPIO_Init+0x84>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_GPIO_Init+0x84>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	@ (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <HAL_ADC_MspInit+0x7c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d127      	bne.n	80009fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <HAL_ADC_MspInit+0x80>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	4a15      	ldr	r2, [pc, #84]	@ (8000a08 <HAL_ADC_MspInit+0x80>)
 80009b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <HAL_ADC_MspInit+0x80>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <HAL_ADC_MspInit+0x80>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000a08 <HAL_ADC_MspInit+0x80>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <HAL_ADC_MspInit+0x80>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = I_SENSE_U_Pin|I_SENSE_V_Pin|I_SENSE_W_Pin|V_SENSE_U_Pin
 80009e2:	233f      	movs	r3, #63	@ 0x3f
 80009e4:	617b      	str	r3, [r7, #20]
                          |V_SENSE_V_Pin|V_SENSE_W_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e6:	2303      	movs	r3, #3
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <HAL_ADC_MspInit+0x84>)
 80009f6:	f000 fd53 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	@ 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40012000 	.word	0x40012000
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000

08000a10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <HAL_TIM_PWM_MspInit+0x64>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d10e      	bne.n	8000a40 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <HAL_TIM_PWM_MspInit+0x68>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	4a13      	ldr	r2, [pc, #76]	@ (8000a78 <HAL_TIM_PWM_MspInit+0x68>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <HAL_TIM_PWM_MspInit+0x68>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a3e:	e012      	b.n	8000a66 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <HAL_TIM_PWM_MspInit+0x6c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d10d      	bne.n	8000a66 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_TIM_PWM_MspInit+0x68>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a09      	ldr	r2, [pc, #36]	@ (8000a78 <HAL_TIM_PWM_MspInit+0x68>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <HAL_TIM_PWM_MspInit+0x68>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40010000 	.word	0x40010000
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40000400 	.word	0x40000400

08000a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a33      	ldr	r2, [pc, #204]	@ (8000b6c <HAL_TIM_MspPostInit+0xec>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d11f      	bne.n	8000ae2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b32      	ldr	r3, [pc, #200]	@ (8000b70 <HAL_TIM_MspPostInit+0xf0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a31      	ldr	r2, [pc, #196]	@ (8000b70 <HAL_TIM_MspPostInit+0xf0>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b70 <HAL_TIM_MspPostInit+0xf0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LO_W_Pin|LO_V_Pin|LO_U_Pin;
 8000abe:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4826      	ldr	r0, [pc, #152]	@ (8000b74 <HAL_TIM_MspPostInit+0xf4>)
 8000adc:	f000 fce0 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ae0:	e040      	b.n	8000b64 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a24      	ldr	r2, [pc, #144]	@ (8000b78 <HAL_TIM_MspPostInit+0xf8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d13b      	bne.n	8000b64 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <HAL_TIM_MspPostInit+0xf0>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	4a1e      	ldr	r2, [pc, #120]	@ (8000b70 <HAL_TIM_MspPostInit+0xf0>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <HAL_TIM_MspPostInit+0xf0>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <HAL_TIM_MspPostInit+0xf0>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	4a17      	ldr	r2, [pc, #92]	@ (8000b70 <HAL_TIM_MspPostInit+0xf0>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_TIM_MspPostInit+0xf0>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HI_U_Pin|HI_V_Pin;
 8000b24:	23c0      	movs	r3, #192	@ 0xc0
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b34:	2302      	movs	r3, #2
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <HAL_TIM_MspPostInit+0xf4>)
 8000b40:	f000 fcae 	bl	80014a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HI_W_Pin;
 8000b44:	2301      	movs	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b54:	2302      	movs	r3, #2
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HI_W_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <HAL_TIM_MspPostInit+0xfc>)
 8000b60:	f000 fc9e 	bl	80014a0 <HAL_GPIO_Init>
}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	@ 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40000400 	.word	0x40000400
 8000b7c:	40020400 	.word	0x40020400

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 f89b 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <OTG_FS_IRQHandler+0x10>)
 8000be6:	f000 ff23 	bl	8001a30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000f14 	.word	0x20000f14

08000bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1c:	f7ff ffea 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f007 f8a9 	bl	8007d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fc3d 	bl	80004c8 <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000c5c:	08007e64 	.word	0x08007e64
  ldr r2, =_sbss
 8000c60:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000c64:	20001618 	.word	0x20001618

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 fbc1 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff fe4a 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fbd9 	bl	8001486 <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 fba1 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	200001f0 	.word	0x200001f0

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200001f0 	.word	0x200001f0

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008

08000d98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e033      	b.n	8000e16 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d109      	bne.n	8000dca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fde6 	bl	8000988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d118      	bne.n	8000e08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000dde:	f023 0302 	bic.w	r3, r3, #2
 8000de2:	f043 0202 	orr.w	r2, r3, #2
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f94a 	bl	8001084 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f023 0303 	bic.w	r3, r3, #3
 8000dfe:	f043 0201 	orr.w	r2, r3, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e06:	e001      	b.n	8000e0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d101      	bne.n	8000e3c <HAL_ADC_ConfigChannel+0x1c>
 8000e38:	2302      	movs	r3, #2
 8000e3a:	e113      	b.n	8001064 <HAL_ADC_ConfigChannel+0x244>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b09      	cmp	r3, #9
 8000e4a:	d925      	bls.n	8000e98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68d9      	ldr	r1, [r3, #12]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	3b1e      	subs	r3, #30
 8000e62:	2207      	movs	r2, #7
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	400a      	ands	r2, r1
 8000e70:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68d9      	ldr	r1, [r3, #12]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	4603      	mov	r3, r0
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4403      	add	r3, r0
 8000e8a:	3b1e      	subs	r3, #30
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	e022      	b.n	8000ede <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6919      	ldr	r1, [r3, #16]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	2207      	movs	r2, #7
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	400a      	ands	r2, r1
 8000eba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6919      	ldr	r1, [r3, #16]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	4603      	mov	r3, r0
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4403      	add	r3, r0
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d824      	bhi.n	8000f30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	3b05      	subs	r3, #5
 8000ef8:	221f      	movs	r2, #31
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	400a      	ands	r2, r1
 8000f06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	3b05      	subs	r3, #5
 8000f22:	fa00 f203 	lsl.w	r2, r0, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f2e:	e04c      	b.n	8000fca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b0c      	cmp	r3, #12
 8000f36:	d824      	bhi.n	8000f82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	3b23      	subs	r3, #35	@ 0x23
 8000f4a:	221f      	movs	r2, #31
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43da      	mvns	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	400a      	ands	r2, r1
 8000f58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	3b23      	subs	r3, #35	@ 0x23
 8000f74:	fa00 f203 	lsl.w	r2, r0, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f80:	e023      	b.n	8000fca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	3b41      	subs	r3, #65	@ 0x41
 8000f94:	221f      	movs	r2, #31
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	3b41      	subs	r3, #65	@ 0x41
 8000fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fca:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <HAL_ADC_ConfigChannel+0x250>)
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a28      	ldr	r2, [pc, #160]	@ (8001074 <HAL_ADC_ConfigChannel+0x254>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d10f      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x1d8>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b12      	cmp	r3, #18
 8000fde:	d10b      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8001074 <HAL_ADC_ConfigChannel+0x254>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12b      	bne.n	800105a <HAL_ADC_ConfigChannel+0x23a>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1c      	ldr	r2, [pc, #112]	@ (8001078 <HAL_ADC_ConfigChannel+0x258>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d003      	beq.n	8001014 <HAL_ADC_ConfigChannel+0x1f4>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b11      	cmp	r3, #17
 8001012:	d122      	bne.n	800105a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a11      	ldr	r2, [pc, #68]	@ (8001078 <HAL_ADC_ConfigChannel+0x258>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d111      	bne.n	800105a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <HAL_ADC_ConfigChannel+0x25c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a11      	ldr	r2, [pc, #68]	@ (8001080 <HAL_ADC_ConfigChannel+0x260>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	0c9a      	lsrs	r2, r3, #18
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800104c:	e002      	b.n	8001054 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3b01      	subs	r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f9      	bne.n	800104e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40012300 	.word	0x40012300
 8001074:	40012000 	.word	0x40012000
 8001078:	10000012 	.word	0x10000012
 800107c:	20000000 	.word	0x20000000
 8001080:	431bde83 	.word	0x431bde83

08001084 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800108c:	4b79      	ldr	r3, [pc, #484]	@ (8001274 <ADC_Init+0x1f0>)
 800108e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6859      	ldr	r1, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	021a      	lsls	r2, r3, #8
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80010dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6859      	ldr	r1, [r3, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6899      	ldr	r1, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001116:	4a58      	ldr	r2, [pc, #352]	@ (8001278 <ADC_Init+0x1f4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d022      	beq.n	8001162 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800112a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6899      	ldr	r1, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	430a      	orrs	r2, r1
 800113c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800114c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6899      	ldr	r1, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	e00f      	b.n	8001182 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001180:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0202 	bic.w	r2, r2, #2
 8001190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6899      	ldr	r1, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7e1b      	ldrb	r3, [r3, #24]
 800119c:	005a      	lsls	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01b      	beq.n	80011e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80011be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80011ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011da:	3b01      	subs	r3, #1
 80011dc:	035a      	lsls	r2, r3, #13
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	e007      	b.n	80011f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	3b01      	subs	r3, #1
 8001214:	051a      	lsls	r2, r3, #20
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800122c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6899      	ldr	r1, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800123a:	025a      	lsls	r2, r3, #9
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6899      	ldr	r1, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	029a      	lsls	r2, r3, #10
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	609a      	str	r2, [r3, #8]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	40012300 	.word	0x40012300
 8001278:	0f000001 	.word	0x0f000001

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4907      	ldr	r1, [pc, #28]	@ (8001318 <__NVIC_EnableIRQ+0x38>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	@ (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	@ (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	@ 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013fc:	f7ff ff8e 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff29 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff3e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff8e 	bl	8001370 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff31 	bl	80012e0 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	@ 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	e159      	b.n	8001770 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 8148 	bne.w	800176a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d005      	beq.n	80014f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d130      	bne.n	8001554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001528:	2201      	movs	r2, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	f003 0201 	and.w	r2, r3, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b03      	cmp	r3, #3
 800155e:	d017      	beq.n	8001590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d123      	bne.n	80015e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	69b9      	ldr	r1, [r7, #24]
 80015e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0203 	and.w	r2, r3, #3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a2 	beq.w	800176a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b57      	ldr	r3, [pc, #348]	@ (8001788 <HAL_GPIO_Init+0x2e8>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	4a56      	ldr	r2, [pc, #344]	@ (8001788 <HAL_GPIO_Init+0x2e8>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001634:	6453      	str	r3, [r2, #68]	@ 0x44
 8001636:	4b54      	ldr	r3, [pc, #336]	@ (8001788 <HAL_GPIO_Init+0x2e8>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001642:	4a52      	ldr	r2, [pc, #328]	@ (800178c <HAL_GPIO_Init+0x2ec>)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a49      	ldr	r2, [pc, #292]	@ (8001790 <HAL_GPIO_Init+0x2f0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d019      	beq.n	80016a2 <HAL_GPIO_Init+0x202>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a48      	ldr	r2, [pc, #288]	@ (8001794 <HAL_GPIO_Init+0x2f4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0x1fe>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a47      	ldr	r2, [pc, #284]	@ (8001798 <HAL_GPIO_Init+0x2f8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00d      	beq.n	800169a <HAL_GPIO_Init+0x1fa>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a46      	ldr	r2, [pc, #280]	@ (800179c <HAL_GPIO_Init+0x2fc>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0x1f6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a45      	ldr	r2, [pc, #276]	@ (80017a0 <HAL_GPIO_Init+0x300>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_GPIO_Init+0x1f2>
 800168e:	2304      	movs	r3, #4
 8001690:	e008      	b.n	80016a4 <HAL_GPIO_Init+0x204>
 8001692:	2307      	movs	r3, #7
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x204>
 8001696:	2303      	movs	r3, #3
 8001698:	e004      	b.n	80016a4 <HAL_GPIO_Init+0x204>
 800169a:	2302      	movs	r3, #2
 800169c:	e002      	b.n	80016a4 <HAL_GPIO_Init+0x204>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <HAL_GPIO_Init+0x204>
 80016a2:	2300      	movs	r3, #0
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	f002 0203 	and.w	r2, r2, #3
 80016aa:	0092      	lsls	r2, r2, #2
 80016ac:	4093      	lsls	r3, r2
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b4:	4935      	ldr	r1, [pc, #212]	@ (800178c <HAL_GPIO_Init+0x2ec>)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3302      	adds	r3, #2
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c2:	4b38      	ldr	r3, [pc, #224]	@ (80017a4 <HAL_GPIO_Init+0x304>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016e6:	4a2f      	ldr	r2, [pc, #188]	@ (80017a4 <HAL_GPIO_Init+0x304>)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ec:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <HAL_GPIO_Init+0x304>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001710:	4a24      	ldr	r2, [pc, #144]	@ (80017a4 <HAL_GPIO_Init+0x304>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001716:	4b23      	ldr	r3, [pc, #140]	@ (80017a4 <HAL_GPIO_Init+0x304>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800173a:	4a1a      	ldr	r2, [pc, #104]	@ (80017a4 <HAL_GPIO_Init+0x304>)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <HAL_GPIO_Init+0x304>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001764:	4a0f      	ldr	r2, [pc, #60]	@ (80017a4 <HAL_GPIO_Init+0x304>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3301      	adds	r3, #1
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	2b0f      	cmp	r3, #15
 8001774:	f67f aea2 	bls.w	80014bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3724      	adds	r7, #36	@ 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40013800 	.word	0x40013800
 8001790:	40020000 	.word	0x40020000
 8001794:	40020400 	.word	0x40020400
 8001798:	40020800 	.word	0x40020800
 800179c:	40020c00 	.word	0x40020c00
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40013c00 	.word	0x40013c00

080017a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e101      	b.n	80019be <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d106      	bne.n	80017da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f005 ffcf 	bl	8007778 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2203      	movs	r2, #3
 80017de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017e8:	d102      	bne.n	80017f0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 fc2e 	bl	8004056 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7c1a      	ldrb	r2, [r3, #16]
 8001802:	f88d 2000 	strb.w	r2, [sp]
 8001806:	3304      	adds	r3, #4
 8001808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180a:	f002 fb0d 	bl	8003e28 <USB_CoreInit>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0ce      	b.n	80019be <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f002 fc26 	bl	8004078 <USB_SetCurrentMode>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2202      	movs	r2, #2
 8001836:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0bf      	b.n	80019be <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	e04a      	b.n	80018da <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3315      	adds	r3, #21
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	3314      	adds	r3, #20
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	b298      	uxth	r0, r3
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	332e      	adds	r3, #46	@ 0x2e
 8001880:	4602      	mov	r2, r0
 8001882:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3318      	adds	r3, #24
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	331c      	adds	r3, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	3320      	adds	r3, #32
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	3324      	adds	r3, #36	@ 0x24
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	3301      	adds	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	791b      	ldrb	r3, [r3, #4]
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d3af      	bcc.n	8001844 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	e044      	b.n	8001974 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4413      	add	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	3301      	adds	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3b5      	bcc.n	80018ea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7c1a      	ldrb	r2, [r3, #16]
 8001986:	f88d 2000 	strb.w	r2, [sp]
 800198a:	3304      	adds	r3, #4
 800198c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800198e:	f002 fbbf 	bl	8004110 <USB_DevInit>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e00c      	b.n	80019be <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 fc03 	bl	80051c2 <USB_DevDisconnect>

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_PCD_Start+0x1c>
 80019de:	2302      	movs	r3, #2
 80019e0:	e022      	b.n	8001a28 <HAL_PCD_Start+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d105      	bne.n	8001a0a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fb10 	bl	8004034 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fbb1 	bl	8005180 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b08d      	sub	sp, #52	@ 0x34
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fc6f 	bl	800532a <USB_GetMode>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 848c 	bne.w	800236c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fbd3 	bl	8005204 <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8482 	beq.w	800236a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fbc0 	bl	8005204 <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d107      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f002 0202 	and.w	r2, r2, #2
 8001a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fbae 	bl	8005204 <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d161      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0210 	bic.w	r2, r2, #16
 8001ac0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f003 020f 	and.w	r2, r3, #15
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	3304      	adds	r3, #4
 8001ae0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	0c5b      	lsrs	r3, r3, #17
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d124      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d035      	beq.n	8001b66 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	6a38      	ldr	r0, [r7, #32]
 8001b0e:	f003 f9e5 	bl	8004edc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b1e:	441a      	add	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b30:	441a      	add	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	e016      	b.n	8001b66 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	0c5b      	lsrs	r3, r3, #17
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	2b06      	cmp	r3, #6
 8001b42:	d110      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6a38      	ldr	r0, [r7, #32]
 8001b50:	f003 f9c4 	bl	8004edc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b60:	441a      	add	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0210 	orr.w	r2, r2, #16
 8001b74:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fb42 	bl	8005204 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b86:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001b8a:	f040 80a7 	bne.w	8001cdc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fb47 	bl	800522a <USB_ReadDevAllOutEpInterrupt>
 8001b9c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001b9e:	e099      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 808e 	beq.w	8001cc8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fb6b 	bl	8005292 <USB_ReadDevOutEPInterrupt>
 8001bbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00c      	beq.n	8001be2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	015a      	lsls	r2, r3, #5
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001bda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fea1 	bl	8002924 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 ff77 	bl	8002af4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2310      	movs	r3, #16
 8001c20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d030      	beq.n	8001c8e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c34:	2b80      	cmp	r3, #128	@ 0x80
 8001c36:	d109      	bne.n	8001c4c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c4a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3304      	adds	r3, #4
 8001c60:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	78db      	ldrb	r3, [r3, #3]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f005 fe7a 	bl	8007970 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d009      	beq.n	8001cc8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cc6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	3301      	adds	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f47f af62 	bne.w	8001ba0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fa8f 	bl	8005204 <USB_ReadInterrupts>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001cf0:	f040 80db 	bne.w	8001eaa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 fab0 	bl	800525e <USB_ReadDevAllInEpInterrupt>
 8001cfe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001d04:	e0cd      	b.n	8001ea2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80c2 	beq.w	8001e96 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fad6 	bl	80052ce <USB_ReadDevInEPInterrupt>
 8001d22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d057      	beq.n	8001dde <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	2201      	movs	r2, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69f9      	ldr	r1, [r7, #28]
 8001d4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001d4e:	4013      	ands	r3, r2
 8001d50:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2301      	movs	r3, #1
 8001d62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	799b      	ldrb	r3, [r3, #6]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d132      	bne.n	8001dd2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	3320      	adds	r3, #32
 8001d7c:	6819      	ldr	r1, [r3, #0]
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4403      	add	r3, r0
 8001d8c:	331c      	adds	r3, #28
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4419      	add	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4403      	add	r3, r0
 8001da0:	3320      	adds	r3, #32
 8001da2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d113      	bne.n	8001dd2 <HAL_PCD_IRQHandler+0x3a2>
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	3324      	adds	r3, #36	@ 0x24
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d108      	bne.n	8001dd2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2101      	movs	r1, #1
 8001dce:	f003 fadd 	bl	800538c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f005 fd4e 	bl	800787a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001df4:	461a      	mov	r2, r3
 8001df6:	2308      	movs	r3, #8
 8001df8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e10:	461a      	mov	r2, r3
 8001e12:	2310      	movs	r3, #16
 8001e14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2340      	movs	r3, #64	@ 0x40
 8001e30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e3e:	6a38      	ldr	r0, [r7, #32]
 8001e40:	f002 faca 	bl	80043d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	3310      	adds	r3, #16
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	78db      	ldrb	r3, [r3, #3]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2200      	movs	r2, #0
 8001e64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f005 fd91 	bl	8007994 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2302      	movs	r3, #2
 8001e82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fcbb 	bl	800280c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	3301      	adds	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f47f af2e 	bne.w	8001d06 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 f9a8 	bl	8005204 <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ebe:	d122      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ece:	f023 0301 	bic.w	r3, r3, #1
 8001ed2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d108      	bne.n	8001ef0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fea1 	bl	8002c30 <HAL_PCDEx_LPM_Callback>
 8001eee:	e002      	b.n	8001ef6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f005 fd2f 	bl	8007954 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 f97a 	bl	8005204 <USB_ReadInterrupts>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f1a:	d112      	bne.n	8001f42 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d102      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f005 fceb 	bl	8007908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001f40:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 f95c 	bl	8005204 <USB_ReadInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f56:	f040 80b7 	bne.w	80020c8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2110      	movs	r1, #16
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 fa2f 	bl	80043d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f7e:	e046      	b.n	800200e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fa4:	0151      	lsls	r1, r2, #5
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	440a      	add	r2, r1
 8001faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001fae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001fb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001fc6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fd8:	0151      	lsls	r1, r2, #5
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	440a      	add	r2, r1
 8001fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001fe2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001fe6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ff8:	0151      	lsls	r1, r2, #5
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	440a      	add	r2, r1
 8001ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002002:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002006:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200a:	3301      	adds	r3, #1
 800200c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	791b      	ldrb	r3, [r3, #4]
 8002012:	461a      	mov	r2, r3
 8002014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002016:	4293      	cmp	r3, r2
 8002018:	d3b2      	bcc.n	8001f80 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002028:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800202c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7bdb      	ldrb	r3, [r3, #15]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d016      	beq.n	8002064 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800203c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002046:	f043 030b 	orr.w	r3, r3, #11
 800204a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800205c:	f043 030b 	orr.w	r3, r3, #11
 8002060:	6453      	str	r3, [r2, #68]	@ 0x44
 8002062:	e015      	b.n	8002090 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002072:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002076:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800207a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800208a:	f043 030b 	orr.w	r3, r3, #11
 800208e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800209e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80020a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020b2:	461a      	mov	r2, r3
 80020b4:	f003 f96a 	bl	800538c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80020c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 f899 	bl	8005204 <USB_ReadInterrupts>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020dc:	d123      	bne.n	8002126 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 f92f 	bl	8005346 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 f9ec 	bl	80044ca <USB_GetDevSpeed>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681c      	ldr	r4, [r3, #0]
 80020fe:	f001 f9c7 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 8002102:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002108:	461a      	mov	r2, r3
 800210a:	4620      	mov	r0, r4
 800210c:	f001 fef0 	bl	8003ef0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f005 fbda 	bl	80078ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002124:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f003 f86a 	bl	8005204 <USB_ReadInterrupts>
 8002130:	4603      	mov	r3, r0
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b08      	cmp	r3, #8
 8002138:	d10a      	bne.n	8002150 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f005 fbb7 	bl	80078ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f002 0208 	and.w	r2, r2, #8
 800214e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f003 f855 	bl	8005204 <USB_ReadInterrupts>
 800215a:	4603      	mov	r3, r0
 800215c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002160:	2b80      	cmp	r3, #128	@ 0x80
 8002162:	d123      	bne.n	80021ac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002170:	2301      	movs	r3, #1
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
 8002174:	e014      	b.n	80021a0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fb08 	bl	80027aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	3301      	adds	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	791b      	ldrb	r3, [r3, #4]
 80021a4:	461a      	mov	r2, r3
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d3e4      	bcc.n	8002176 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 f827 	bl	8005204 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021c0:	d13c      	bne.n	800223c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021c2:	2301      	movs	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c6:	e02b      	b.n	8002220 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3318      	adds	r3, #24
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d115      	bne.n	800221a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80021ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	da12      	bge.n	800221a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3317      	adds	r3, #23
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002210:	b2db      	uxtb	r3, r3
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fac8 	bl	80027aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	3301      	adds	r3, #1
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	791b      	ldrb	r3, [r3, #4]
 8002224:	461a      	mov	r2, r3
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	4293      	cmp	r3, r2
 800222a:	d3cd      	bcc.n	80021c8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800223a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f002 ffdf 	bl	8005204 <USB_ReadInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002250:	d156      	bne.n	8002300 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002252:	2301      	movs	r3, #1
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
 8002256:	e045      	b.n	80022e4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d12e      	bne.n	80022de <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002280:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002282:	2b00      	cmp	r3, #0
 8002284:	da2b      	bge.n	80022de <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002292:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002296:	429a      	cmp	r2, r3
 8002298:	d121      	bne.n	80022de <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022da:	6053      	str	r3, [r2, #4]
            break;
 80022dc:	e008      	b.n	80022f0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	3301      	adds	r3, #1
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	791b      	ldrb	r3, [r3, #4]
 80022e8:	461a      	mov	r2, r3
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d3b3      	bcc.n	8002258 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80022fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f002 ff7d 	bl	8005204 <USB_ReadInterrupts>
 800230a:	4603      	mov	r3, r0
 800230c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002314:	d10a      	bne.n	800232c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f005 fb4e 	bl	80079b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800232a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f002 ff67 	bl	8005204 <USB_ReadInterrupts>
 8002336:	4603      	mov	r3, r0
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b04      	cmp	r3, #4
 800233e:	d115      	bne.n	800236c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f005 fb3e 	bl	80079d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	e000      	b.n	800236c <HAL_PCD_IRQHandler+0x93c>
      return;
 800236a:	bf00      	nop
    }
  }
}
 800236c:	3734      	adds	r7, #52	@ 0x34
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}

08002372 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_PCD_SetAddress+0x1a>
 8002388:	2302      	movs	r3, #2
 800238a:	e012      	b.n	80023b2 <HAL_PCD_SetAddress+0x40>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fec6 	bl	8005134 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	4608      	mov	r0, r1
 80023c4:	4611      	mov	r1, r2
 80023c6:	461a      	mov	r2, r3
 80023c8:	4603      	mov	r3, r0
 80023ca:	70fb      	strb	r3, [r7, #3]
 80023cc:	460b      	mov	r3, r1
 80023ce:	803b      	strh	r3, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	da0f      	bge.n	8002400 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	f003 020f 	and.w	r2, r3, #15
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	3310      	adds	r3, #16
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	3304      	adds	r3, #4
 80023f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	705a      	strb	r2, [r3, #1]
 80023fe:	e00f      	b.n	8002420 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f003 020f 	and.w	r2, r3, #15
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	3304      	adds	r3, #4
 8002418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	b2da      	uxtb	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800242c:	883a      	ldrh	r2, [r7, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	78ba      	ldrb	r2, [r7, #2]
 8002436:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800244a:	78bb      	ldrb	r3, [r7, #2]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d102      	bne.n	8002456 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_PCD_EP_Open+0xaa>
 8002460:	2302      	movs	r3, #2
 8002462:	e00e      	b.n	8002482 <HAL_PCD_EP_Open+0xc8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	4618      	mov	r0, r3
 8002474:	f002 f84e 	bl	8004514 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002480:	7afb      	ldrb	r3, [r7, #11]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800249a:	2b00      	cmp	r3, #0
 800249c:	da0f      	bge.n	80024be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	f003 020f 	and.w	r2, r3, #15
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	3310      	adds	r3, #16
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	3304      	adds	r3, #4
 80024b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	705a      	strb	r2, [r3, #1]
 80024bc:	e00f      	b.n	80024de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 020f 	and.w	r2, r3, #15
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	3304      	adds	r3, #4
 80024d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_PCD_EP_Close+0x6e>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e00e      	b.n	8002516 <HAL_PCD_EP_Close+0x8c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	4618      	mov	r0, r3
 8002508:	f002 f88c 	bl	8004624 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	460b      	mov	r3, r1
 800252c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800252e:	7afb      	ldrb	r3, [r7, #11]
 8002530:	f003 020f 	and.w	r2, r3, #15
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	3304      	adds	r3, #4
 8002546:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2200      	movs	r2, #0
 8002558:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2200      	movs	r2, #0
 800255e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002560:	7afb      	ldrb	r3, [r7, #11]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	b2da      	uxtb	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	799b      	ldrb	r3, [r3, #6]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d102      	bne.n	800257a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	799b      	ldrb	r3, [r3, #6]
 8002582:	461a      	mov	r2, r3
 8002584:	6979      	ldr	r1, [r7, #20]
 8002586:	f002 f929 	bl	80047dc <USB_EPStartXfer>

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	f003 020f 	and.w	r2, r3, #15
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	460b      	mov	r3, r1
 80025d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d4:	7afb      	ldrb	r3, [r7, #11]
 80025d6:	f003 020f 	and.w	r2, r3, #15
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	3310      	adds	r3, #16
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	3304      	adds	r3, #4
 80025ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2200      	movs	r2, #0
 80025fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2201      	movs	r2, #1
 8002602:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002604:	7afb      	ldrb	r3, [r7, #11]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	b2da      	uxtb	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	799b      	ldrb	r3, [r3, #6]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	799b      	ldrb	r3, [r3, #6]
 8002626:	461a      	mov	r2, r3
 8002628:	6979      	ldr	r1, [r7, #20]
 800262a:	f002 f8d7 	bl	80047dc <USB_EPStartXfer>

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	7912      	ldrb	r2, [r2, #4]
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e04f      	b.n	80026f6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da0f      	bge.n	800267e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 020f 	and.w	r2, r3, #15
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	3310      	adds	r3, #16
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	3304      	adds	r3, #4
 8002674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	705a      	strb	r2, [r3, #1]
 800267c:	e00d      	b.n	800269a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_PCD_EP_SetStall+0x82>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e01d      	b.n	80026f6 <HAL_PCD_EP_SetStall+0xbe>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68f9      	ldr	r1, [r7, #12]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 fc5f 	bl	8004f8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7999      	ldrb	r1, [r3, #6]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026e6:	461a      	mov	r2, r3
 80026e8:	f002 fe50 	bl	800538c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	7912      	ldrb	r2, [r2, #4]
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e042      	b.n	80027a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800271c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002720:	2b00      	cmp	r3, #0
 8002722:	da0f      	bge.n	8002744 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 020f 	and.w	r2, r3, #15
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	3310      	adds	r3, #16
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	705a      	strb	r2, [r3, #1]
 8002742:	e00f      	b.n	8002764 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	f003 020f 	and.w	r2, r3, #15
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	3304      	adds	r3, #4
 800275c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_PCD_EP_ClrStall+0x86>
 8002780:	2302      	movs	r3, #2
 8002782:	e00e      	b.n	80027a2 <HAL_PCD_EP_ClrStall+0xa4>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68f9      	ldr	r1, [r7, #12]
 8002792:	4618      	mov	r0, r3
 8002794:	f002 fc68 	bl	8005068 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80027b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	da0c      	bge.n	80027d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 020f 	and.w	r2, r3, #15
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	3310      	adds	r3, #16
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	3304      	adds	r3, #4
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	e00c      	b.n	80027f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	f003 020f 	and.w	r2, r3, #15
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	3304      	adds	r3, #4
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68f9      	ldr	r1, [r7, #12]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f002 fa87 	bl	8004d0c <USB_EPStopXfer>
 80027fe:	4603      	mov	r3, r0
 8002800:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002802:	7afb      	ldrb	r3, [r7, #11]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	@ 0x28
 8002810:	af02      	add	r7, sp, #8
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	3310      	adds	r3, #16
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	3304      	adds	r3, #4
 8002832:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	429a      	cmp	r2, r3
 800283e:	d901      	bls.n	8002844 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e06b      	b.n	800291c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	429a      	cmp	r2, r3
 8002858:	d902      	bls.n	8002860 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	3303      	adds	r3, #3
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002868:	e02a      	b.n	80028c0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	429a      	cmp	r2, r3
 800287e:	d902      	bls.n	8002886 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3303      	adds	r3, #3
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68d9      	ldr	r1, [r3, #12]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	4603      	mov	r3, r0
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f002 fadc 	bl	8004e60 <USB_WritePacket>

    ep->xfer_buff  += len;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	441a      	add	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	441a      	add	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d809      	bhi.n	80028ea <PCD_WriteEmptyTxFifo+0xde>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028de:	429a      	cmp	r2, r3
 80028e0:	d203      	bcs.n	80028ea <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1bf      	bne.n	800286a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d811      	bhi.n	800291a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	2201      	movs	r2, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800290a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	43db      	mvns	r3, r3
 8002910:	6939      	ldr	r1, [r7, #16]
 8002912:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002916:	4013      	ands	r3, r2
 8002918:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	333c      	adds	r3, #60	@ 0x3c
 800293c:	3304      	adds	r3, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4413      	add	r3, r2
 800294a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	799b      	ldrb	r3, [r3, #6]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d17b      	bne.n	8002a52 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d015      	beq.n	8002990 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	4a61      	ldr	r2, [pc, #388]	@ (8002aec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	f240 80b9 	bls.w	8002ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80b3 	beq.w	8002ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002986:	461a      	mov	r2, r3
 8002988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800298c:	6093      	str	r3, [r2, #8]
 800298e:	e0a7      	b.n	8002ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a6:	461a      	mov	r2, r3
 80029a8:	2320      	movs	r3, #32
 80029aa:	6093      	str	r3, [r2, #8]
 80029ac:	e098      	b.n	8002ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 8093 	bne.w	8002ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4a4b      	ldr	r2, [pc, #300]	@ (8002aec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d90f      	bls.n	80029e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029d8:	461a      	mov	r2, r3
 80029da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029de:	6093      	str	r3, [r2, #8]
 80029e0:	e07e      	b.n	8002ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	3304      	adds	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a1a      	ldr	r2, [r3, #32]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	0159      	lsls	r1, r3, #5
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	440b      	add	r3, r1
 8002a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d114      	bne.n	8002a44 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2101      	movs	r1, #1
 8002a30:	f002 fcac 	bl	800538c <USB_EP0_OutStart>
 8002a34:	e006      	b.n	8002a44 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	441a      	add	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f004 fefa 	bl	8007844 <HAL_PCD_DataOutStageCallback>
 8002a50:	e046      	b.n	8002ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	4a26      	ldr	r2, [pc, #152]	@ (8002af0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d124      	bne.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a70:	461a      	mov	r2, r3
 8002a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a76:	6093      	str	r3, [r2, #8]
 8002a78:	e032      	b.n	8002ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a90:	461a      	mov	r2, r3
 8002a92:	2320      	movs	r3, #32
 8002a94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f004 fed1 	bl	8007844 <HAL_PCD_DataOutStageCallback>
 8002aa2:	e01d      	b.n	8002ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d114      	bne.n	8002ad4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d108      	bne.n	8002ad4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002acc:	461a      	mov	r2, r3
 8002ace:	2100      	movs	r1, #0
 8002ad0:	f002 fc5c 	bl	800538c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f004 feb2 	bl	8007844 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	4f54300a 	.word	0x4f54300a
 8002af0:	4f54310a 	.word	0x4f54310a

08002af4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	333c      	adds	r3, #60	@ 0x3c
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a15      	ldr	r2, [pc, #84]	@ (8002b7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d90e      	bls.n	8002b48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b40:	461a      	mov	r2, r3
 8002b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f004 fe69 	bl	8007820 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d90c      	bls.n	8002b70 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	799b      	ldrb	r3, [r3, #6]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d108      	bne.n	8002b70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	f002 fc0e 	bl	800538c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	4f54300a 	.word	0x4f54300a

08002b80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	70fb      	strb	r3, [r7, #3]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b9e:	883b      	ldrh	r3, [r7, #0]
 8002ba0:	0419      	lsls	r1, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bac:	e028      	b.n	8002c00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4413      	add	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e00d      	b.n	8002bde <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	3340      	adds	r3, #64	@ 0x40
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d3ec      	bcc.n	8002bc2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002be8:	883b      	ldrh	r3, [r7, #0]
 8002bea:	0418      	lsls	r0, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	4302      	orrs	r2, r0
 8002bf8:	3340      	adds	r3, #64	@ 0x40
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e267      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d075      	beq.n	8002d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c66:	4b88      	ldr	r3, [pc, #544]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d00c      	beq.n	8002c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c72:	4b85      	ldr	r3, [pc, #532]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d112      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7e:	4b82      	ldr	r3, [pc, #520]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d05b      	beq.n	8002d50 <HAL_RCC_OscConfig+0x108>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d157      	bne.n	8002d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e242      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_OscConfig+0x74>
 8002cae:	4b76      	ldr	r3, [pc, #472]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a75      	ldr	r2, [pc, #468]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e01d      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x98>
 8002cc6:	4b70      	ldr	r3, [pc, #448]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6f      	ldr	r2, [pc, #444]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6c      	ldr	r2, [pc, #432]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb0>
 8002ce0:	4b69      	ldr	r3, [pc, #420]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a68      	ldr	r2, [pc, #416]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b66      	ldr	r3, [pc, #408]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a65      	ldr	r2, [pc, #404]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fe f81a 	bl	8000d38 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe f816 	bl	8000d38 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	@ 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e207      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0xc0>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe f806 	bl	8000d38 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fe f802 	bl	8000d38 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	@ 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e1f3      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	4b51      	ldr	r3, [pc, #324]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0xe8>
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d063      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6a:	4b47      	ldr	r3, [pc, #284]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d11c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d76:	4b44      	ldr	r3, [pc, #272]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d116      	bne.n	8002db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d82:	4b41      	ldr	r3, [pc, #260]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_RCC_OscConfig+0x152>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e1c7      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4937      	ldr	r1, [pc, #220]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dae:	e03a      	b.n	8002e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db8:	4b34      	ldr	r3, [pc, #208]	@ (8002e8c <HAL_RCC_OscConfig+0x244>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fd ffbb 	bl	8000d38 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc6:	f7fd ffb7 	bl	8000d38 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e1a8      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de4:	4b28      	ldr	r3, [pc, #160]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4925      	ldr	r1, [pc, #148]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
 8002df8:	e015      	b.n	8002e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfa:	4b24      	ldr	r3, [pc, #144]	@ (8002e8c <HAL_RCC_OscConfig+0x244>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fd ff9a 	bl	8000d38 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e08:	f7fd ff96 	bl	8000d38 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e187      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d036      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3a:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <HAL_RCC_OscConfig+0x248>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fd ff7a 	bl	8000d38 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e48:	f7fd ff76 	bl	8000d38 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e167      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x200>
 8002e66:	e01b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e68:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <HAL_RCC_OscConfig+0x248>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7fd ff63 	bl	8000d38 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	e00e      	b.n	8002e94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e76:	f7fd ff5f 	bl	8000d38 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d907      	bls.n	8002e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e150      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	42470000 	.word	0x42470000
 8002e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	4b88      	ldr	r3, [pc, #544]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ea      	bne.n	8002e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8097 	beq.w	8002fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb2:	4b81      	ldr	r3, [pc, #516]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	4a7c      	ldr	r2, [pc, #496]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ece:	4b7a      	ldr	r3, [pc, #488]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	4b77      	ldr	r3, [pc, #476]	@ (80030bc <HAL_RCC_OscConfig+0x474>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eea:	4b74      	ldr	r3, [pc, #464]	@ (80030bc <HAL_RCC_OscConfig+0x474>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a73      	ldr	r2, [pc, #460]	@ (80030bc <HAL_RCC_OscConfig+0x474>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef6:	f7fd ff1f 	bl	8000d38 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efe:	f7fd ff1b 	bl	8000d38 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e10c      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4b6a      	ldr	r3, [pc, #424]	@ (80030bc <HAL_RCC_OscConfig+0x474>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2ea>
 8002f24:	4b64      	ldr	r3, [pc, #400]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f28:	4a63      	ldr	r2, [pc, #396]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f30:	e01c      	b.n	8002f6c <HAL_RCC_OscConfig+0x324>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x30c>
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3e:	4a5e      	ldr	r2, [pc, #376]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f46:	4b5c      	ldr	r3, [pc, #368]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0x324>
 8002f54:	4b58      	ldr	r3, [pc, #352]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f58:	4a57      	ldr	r2, [pc, #348]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f60:	4b55      	ldr	r3, [pc, #340]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	4a54      	ldr	r2, [pc, #336]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f66:	f023 0304 	bic.w	r3, r3, #4
 8002f6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d015      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fd fee0 	bl	8000d38 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fd fedc 	bl	8000d38 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0cb      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	4b49      	ldr	r3, [pc, #292]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0ee      	beq.n	8002f7c <HAL_RCC_OscConfig+0x334>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fd feca 	bl	8000d38 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7fd fec6 	bl	8000d38 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0b5      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1ee      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	4a38      	ldr	r2, [pc, #224]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80a1 	beq.w	8003128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe6:	4b34      	ldr	r3, [pc, #208]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d05c      	beq.n	80030ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d141      	bne.n	800307e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffa:	4b31      	ldr	r3, [pc, #196]	@ (80030c0 <HAL_RCC_OscConfig+0x478>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fd fe9a 	bl	8000d38 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003008:	f7fd fe96 	bl	8000d38 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e087      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	4b27      	ldr	r3, [pc, #156]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	3b01      	subs	r3, #1
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	491b      	ldr	r1, [pc, #108]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x478>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fd fe6f 	bl	8000d38 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305e:	f7fd fe6b 	bl	8000d38 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e05c      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003070:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x416>
 800307c:	e054      	b.n	8003128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <HAL_RCC_OscConfig+0x478>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fd fe58 	bl	8000d38 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fd fe54 	bl	8000d38 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e045      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x444>
 80030aa:	e03d      	b.n	8003128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e038      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40007000 	.word	0x40007000
 80030c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCC_OscConfig+0x4ec>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d028      	beq.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d121      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d11a      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d111      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	3b01      	subs	r3, #1
 800310e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0cc      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b68      	ldr	r3, [pc, #416]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d90c      	bls.n	8003174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b65      	ldr	r3, [pc, #404]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a58      	ldr	r2, [pc, #352]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a52      	ldr	r2, [pc, #328]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d044      	beq.n	8003258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d119      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b3f      	ldr	r3, [pc, #252]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	4b3b      	ldr	r3, [pc, #236]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e067      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b37      	ldr	r3, [pc, #220]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4934      	ldr	r1, [pc, #208]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003228:	f7fd fd86 	bl	8000d38 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fd fd82 	bl	8000d38 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e04f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b2b      	ldr	r3, [pc, #172]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b25      	ldr	r3, [pc, #148]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d20c      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b22      	ldr	r3, [pc, #136]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032aa:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490a      	ldr	r1, [pc, #40]	@ (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	@ (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd fce6 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08007e44 	.word	0x08007e44
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b090      	sub	sp, #64	@ 0x40
 800330a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003310:	2300      	movs	r3, #0
 8003312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003314:	2300      	movs	r3, #0
 8003316:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331c:	4b59      	ldr	r3, [pc, #356]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d00d      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x40>
 8003328:	2b08      	cmp	r3, #8
 800332a:	f200 80a1 	bhi.w	8003470 <HAL_RCC_GetSysClockFreq+0x16c>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x34>
 8003332:	2b04      	cmp	r3, #4
 8003334:	d003      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x3a>
 8003336:	e09b      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b53      	ldr	r3, [pc, #332]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x184>)
 800333a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800333c:	e09b      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800333e:	4b53      	ldr	r3, [pc, #332]	@ (800348c <HAL_RCC_GetSysClockFreq+0x188>)
 8003340:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003342:	e098      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003344:	4b4f      	ldr	r3, [pc, #316]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800334c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334e:	4b4d      	ldr	r3, [pc, #308]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d028      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335a:	4b4a      	ldr	r3, [pc, #296]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	2200      	movs	r2, #0
 8003362:	623b      	str	r3, [r7, #32]
 8003364:	627a      	str	r2, [r7, #36]	@ 0x24
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800336c:	2100      	movs	r1, #0
 800336e:	4b47      	ldr	r3, [pc, #284]	@ (800348c <HAL_RCC_GetSysClockFreq+0x188>)
 8003370:	fb03 f201 	mul.w	r2, r3, r1
 8003374:	2300      	movs	r3, #0
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	4413      	add	r3, r2
 800337c:	4a43      	ldr	r2, [pc, #268]	@ (800348c <HAL_RCC_GetSysClockFreq+0x188>)
 800337e:	fba0 1202 	umull	r1, r2, r0, r2
 8003382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003384:	460a      	mov	r2, r1
 8003386:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338a:	4413      	add	r3, r2
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	2200      	movs	r2, #0
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	61fa      	str	r2, [r7, #28]
 8003396:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800339a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800339e:	f7fc ff1b 	bl	80001d8 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4613      	mov	r3, r2
 80033a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033aa:	e053      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ac:	4b35      	ldr	r3, [pc, #212]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	2200      	movs	r2, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	617a      	str	r2, [r7, #20]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033be:	f04f 0b00 	mov.w	fp, #0
 80033c2:	4652      	mov	r2, sl
 80033c4:	465b      	mov	r3, fp
 80033c6:	f04f 0000 	mov.w	r0, #0
 80033ca:	f04f 0100 	mov.w	r1, #0
 80033ce:	0159      	lsls	r1, r3, #5
 80033d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d4:	0150      	lsls	r0, r2, #5
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	ebb2 080a 	subs.w	r8, r2, sl
 80033de:	eb63 090b 	sbc.w	r9, r3, fp
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033f6:	ebb2 0408 	subs.w	r4, r2, r8
 80033fa:	eb63 0509 	sbc.w	r5, r3, r9
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	00eb      	lsls	r3, r5, #3
 8003408:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340c:	00e2      	lsls	r2, r4, #3
 800340e:	4614      	mov	r4, r2
 8003410:	461d      	mov	r5, r3
 8003412:	eb14 030a 	adds.w	r3, r4, sl
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	eb45 030b 	adc.w	r3, r5, fp
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342a:	4629      	mov	r1, r5
 800342c:	028b      	lsls	r3, r1, #10
 800342e:	4621      	mov	r1, r4
 8003430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003434:	4621      	mov	r1, r4
 8003436:	028a      	lsls	r2, r1, #10
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343e:	2200      	movs	r2, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	60fa      	str	r2, [r7, #12]
 8003444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003448:	f7fc fec6 	bl	80001d8 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003464:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800346e:	e002      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x184>)
 8003472:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003478:	4618      	mov	r0, r3
 800347a:	3740      	adds	r7, #64	@ 0x40
 800347c:	46bd      	mov	sp, r7
 800347e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	00f42400 	.word	0x00f42400
 800348c:	017d7840 	.word	0x017d7840

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000

080034a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e041      	b.n	800353e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fa9e 	bl	8000a10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 f9a0 	bl	800382c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_TIM_PWM_Start+0x24>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e022      	b.n	80035b2 <HAL_TIM_PWM_Start+0x6a>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d109      	bne.n	8003586 <HAL_TIM_PWM_Start+0x3e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e015      	b.n	80035b2 <HAL_TIM_PWM_Start+0x6a>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d109      	bne.n	80035a0 <HAL_TIM_PWM_Start+0x58>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e008      	b.n	80035b2 <HAL_TIM_PWM_Start+0x6a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e068      	b.n	800368c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <HAL_TIM_PWM_Start+0x82>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c8:	e013      	b.n	80035f2 <HAL_TIM_PWM_Start+0xaa>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d104      	bne.n	80035da <HAL_TIM_PWM_Start+0x92>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d8:	e00b      	b.n	80035f2 <HAL_TIM_PWM_Start+0xaa>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d104      	bne.n	80035ea <HAL_TIM_PWM_Start+0xa2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e8:	e003      	b.n	80035f2 <HAL_TIM_PWM_Start+0xaa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2201      	movs	r2, #1
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fb2e 	bl	8003c5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a23      	ldr	r2, [pc, #140]	@ (8003694 <HAL_TIM_PWM_Start+0x14c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d107      	bne.n	800361a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1d      	ldr	r2, [pc, #116]	@ (8003694 <HAL_TIM_PWM_Start+0x14c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <HAL_TIM_PWM_Start+0x10e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d013      	beq.n	8003656 <HAL_TIM_PWM_Start+0x10e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <HAL_TIM_PWM_Start+0x150>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_TIM_PWM_Start+0x10e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a17      	ldr	r2, [pc, #92]	@ (800369c <HAL_TIM_PWM_Start+0x154>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_TIM_PWM_Start+0x10e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a16      	ldr	r2, [pc, #88]	@ (80036a0 <HAL_TIM_PWM_Start+0x158>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_TIM_PWM_Start+0x10e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a14      	ldr	r2, [pc, #80]	@ (80036a4 <HAL_TIM_PWM_Start+0x15c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d111      	bne.n	800367a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b06      	cmp	r3, #6
 8003666:	d010      	beq.n	800368a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003678:	e007      	b.n	800368a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40010000 	.word	0x40010000
 8003698:	40000400 	.word	0x40000400
 800369c:	40000800 	.word	0x40000800
 80036a0:	40000c00 	.word	0x40000c00
 80036a4:	40014000 	.word	0x40014000

080036a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0ae      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	f200 809f 	bhi.w	8003814 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036d6:	a201      	add	r2, pc, #4	@ (adr r2, 80036dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003815 	.word	0x08003815
 80036e4:	08003815 	.word	0x08003815
 80036e8:	08003815 	.word	0x08003815
 80036ec:	08003751 	.word	0x08003751
 80036f0:	08003815 	.word	0x08003815
 80036f4:	08003815 	.word	0x08003815
 80036f8:	08003815 	.word	0x08003815
 80036fc:	08003793 	.word	0x08003793
 8003700:	08003815 	.word	0x08003815
 8003704:	08003815 	.word	0x08003815
 8003708:	08003815 	.word	0x08003815
 800370c:	080037d3 	.word	0x080037d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f914 	bl	8003944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0208 	orr.w	r2, r2, #8
 800372a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0204 	bic.w	r2, r2, #4
 800373a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6999      	ldr	r1, [r3, #24]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	619a      	str	r2, [r3, #24]
      break;
 800374e:	e064      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f95a 	bl	8003a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800376a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6999      	ldr	r1, [r3, #24]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	619a      	str	r2, [r3, #24]
      break;
 8003790:	e043      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f9a5 	bl	8003ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0208 	orr.w	r2, r2, #8
 80037ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0204 	bic.w	r2, r2, #4
 80037bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69d9      	ldr	r1, [r3, #28]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	61da      	str	r2, [r3, #28]
      break;
 80037d0:	e023      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f9ef 	bl	8003bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69d9      	ldr	r1, [r3, #28]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	021a      	lsls	r2, r3, #8
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	61da      	str	r2, [r3, #28]
      break;
 8003812:	e002      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]
      break;
 8003818:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003822:	7dfb      	ldrb	r3, [r7, #23]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a3a      	ldr	r2, [pc, #232]	@ (8003928 <TIM_Base_SetConfig+0xfc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00f      	beq.n	8003864 <TIM_Base_SetConfig+0x38>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800384a:	d00b      	beq.n	8003864 <TIM_Base_SetConfig+0x38>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a37      	ldr	r2, [pc, #220]	@ (800392c <TIM_Base_SetConfig+0x100>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d007      	beq.n	8003864 <TIM_Base_SetConfig+0x38>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a36      	ldr	r2, [pc, #216]	@ (8003930 <TIM_Base_SetConfig+0x104>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d003      	beq.n	8003864 <TIM_Base_SetConfig+0x38>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a35      	ldr	r2, [pc, #212]	@ (8003934 <TIM_Base_SetConfig+0x108>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d108      	bne.n	8003876 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2b      	ldr	r2, [pc, #172]	@ (8003928 <TIM_Base_SetConfig+0xfc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01b      	beq.n	80038b6 <TIM_Base_SetConfig+0x8a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003884:	d017      	beq.n	80038b6 <TIM_Base_SetConfig+0x8a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a28      	ldr	r2, [pc, #160]	@ (800392c <TIM_Base_SetConfig+0x100>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <TIM_Base_SetConfig+0x8a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a27      	ldr	r2, [pc, #156]	@ (8003930 <TIM_Base_SetConfig+0x104>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00f      	beq.n	80038b6 <TIM_Base_SetConfig+0x8a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a26      	ldr	r2, [pc, #152]	@ (8003934 <TIM_Base_SetConfig+0x108>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00b      	beq.n	80038b6 <TIM_Base_SetConfig+0x8a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a25      	ldr	r2, [pc, #148]	@ (8003938 <TIM_Base_SetConfig+0x10c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d007      	beq.n	80038b6 <TIM_Base_SetConfig+0x8a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a24      	ldr	r2, [pc, #144]	@ (800393c <TIM_Base_SetConfig+0x110>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d003      	beq.n	80038b6 <TIM_Base_SetConfig+0x8a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a23      	ldr	r2, [pc, #140]	@ (8003940 <TIM_Base_SetConfig+0x114>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003928 <TIM_Base_SetConfig+0xfc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d103      	bne.n	80038fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b01      	cmp	r3, #1
 800390c:	d105      	bne.n	800391a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f023 0201 	bic.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]
  }
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40014000 	.word	0x40014000
 800393c:	40014400 	.word	0x40014400
 8003940:	40014800 	.word	0x40014800

08003944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f023 0201 	bic.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f023 0302 	bic.w	r3, r3, #2
 800398c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a0c <TIM_OC1_SetConfig+0xc8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10c      	bne.n	80039ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0308 	bic.w	r3, r3, #8
 80039a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0304 	bic.w	r3, r3, #4
 80039b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a13      	ldr	r2, [pc, #76]	@ (8003a0c <TIM_OC1_SetConfig+0xc8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d111      	bne.n	80039e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	621a      	str	r2, [r3, #32]
}
 8003a00:	bf00      	nop
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40010000 	.word	0x40010000

08003a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f023 0210 	bic.w	r2, r3, #16
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f023 0320 	bic.w	r3, r3, #32
 8003a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae4 <TIM_OC2_SetConfig+0xd4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10d      	bne.n	8003a8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a15      	ldr	r2, [pc, #84]	@ (8003ae4 <TIM_OC2_SetConfig+0xd4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d113      	bne.n	8003abc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40010000 	.word	0x40010000

08003ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <TIM_OC3_SetConfig+0xd0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10d      	bne.n	8003b62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a14      	ldr	r2, [pc, #80]	@ (8003bb8 <TIM_OC3_SetConfig+0xd0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d113      	bne.n	8003b92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	621a      	str	r2, [r3, #32]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40010000 	.word	0x40010000

08003bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a10      	ldr	r2, [pc, #64]	@ (8003c58 <TIM_OC4_SetConfig+0x9c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d109      	bne.n	8003c30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	019b      	lsls	r3, r3, #6
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000

08003c5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2201      	movs	r2, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1a      	ldr	r2, [r3, #32]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	401a      	ands	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1a      	ldr	r2, [r3, #32]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	431a      	orrs	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	621a      	str	r2, [r3, #32]
}
 8003c9a:	bf00      	nop
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e050      	b.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0c:	d013      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a18      	ldr	r2, [pc, #96]	@ (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a15      	ldr	r2, [pc, #84]	@ (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10c      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40014000 	.word	0x40014000

08003d84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e03d      	b.n	8003e1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e28:	b084      	sub	sp, #16
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	f107 001c 	add.w	r0, r7, #28
 8003e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d123      	bne.n	8003e8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003e56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d105      	bne.n	8003e7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f001 fae2 	bl	8005448 <USB_CoreReset>
 8003e84:	4603      	mov	r3, r0
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	e01b      	b.n	8003ec2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f001 fad6 	bl	8005448 <USB_CoreReset>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ea0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003eb4:	e005      	b.n	8003ec2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ec2:	7fbb      	ldrb	r3, [r7, #30]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d10b      	bne.n	8003ee0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f043 0206 	orr.w	r2, r3, #6
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eec:	b004      	add	sp, #16
 8003eee:	4770      	bx	lr

08003ef0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d165      	bne.n	8003fd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4a41      	ldr	r2, [pc, #260]	@ (800400c <USB_SetTurnaroundTime+0x11c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d906      	bls.n	8003f1a <USB_SetTurnaroundTime+0x2a>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a40      	ldr	r2, [pc, #256]	@ (8004010 <USB_SetTurnaroundTime+0x120>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d202      	bcs.n	8003f1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f14:	230f      	movs	r3, #15
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e062      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8004010 <USB_SetTurnaroundTime+0x120>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d306      	bcc.n	8003f30 <USB_SetTurnaroundTime+0x40>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4a3b      	ldr	r2, [pc, #236]	@ (8004014 <USB_SetTurnaroundTime+0x124>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d202      	bcs.n	8003f30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f2a:	230e      	movs	r3, #14
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e057      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4a38      	ldr	r2, [pc, #224]	@ (8004014 <USB_SetTurnaroundTime+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d306      	bcc.n	8003f46 <USB_SetTurnaroundTime+0x56>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a37      	ldr	r2, [pc, #220]	@ (8004018 <USB_SetTurnaroundTime+0x128>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d202      	bcs.n	8003f46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f40:	230d      	movs	r3, #13
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	e04c      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4a33      	ldr	r2, [pc, #204]	@ (8004018 <USB_SetTurnaroundTime+0x128>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d306      	bcc.n	8003f5c <USB_SetTurnaroundTime+0x6c>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4a32      	ldr	r2, [pc, #200]	@ (800401c <USB_SetTurnaroundTime+0x12c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d802      	bhi.n	8003f5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f56:	230c      	movs	r3, #12
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e041      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800401c <USB_SetTurnaroundTime+0x12c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d906      	bls.n	8003f72 <USB_SetTurnaroundTime+0x82>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a2e      	ldr	r2, [pc, #184]	@ (8004020 <USB_SetTurnaroundTime+0x130>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d802      	bhi.n	8003f72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f6c:	230b      	movs	r3, #11
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e036      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4a2a      	ldr	r2, [pc, #168]	@ (8004020 <USB_SetTurnaroundTime+0x130>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d906      	bls.n	8003f88 <USB_SetTurnaroundTime+0x98>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4a29      	ldr	r2, [pc, #164]	@ (8004024 <USB_SetTurnaroundTime+0x134>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d802      	bhi.n	8003f88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f82:	230a      	movs	r3, #10
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e02b      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4a26      	ldr	r2, [pc, #152]	@ (8004024 <USB_SetTurnaroundTime+0x134>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d906      	bls.n	8003f9e <USB_SetTurnaroundTime+0xae>
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4a25      	ldr	r2, [pc, #148]	@ (8004028 <USB_SetTurnaroundTime+0x138>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d202      	bcs.n	8003f9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f98:	2309      	movs	r3, #9
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e020      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4a21      	ldr	r2, [pc, #132]	@ (8004028 <USB_SetTurnaroundTime+0x138>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d306      	bcc.n	8003fb4 <USB_SetTurnaroundTime+0xc4>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	@ (800402c <USB_SetTurnaroundTime+0x13c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d802      	bhi.n	8003fb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003fae:	2308      	movs	r3, #8
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	e015      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800402c <USB_SetTurnaroundTime+0x13c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d906      	bls.n	8003fca <USB_SetTurnaroundTime+0xda>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8004030 <USB_SetTurnaroundTime+0x140>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d202      	bcs.n	8003fca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fc4:	2307      	movs	r3, #7
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e00a      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003fca:	2306      	movs	r3, #6
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	e007      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fd6:	2309      	movs	r3, #9
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e001      	b.n	8003fe0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003fdc:	2309      	movs	r3, #9
 8003fde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	029b      	lsls	r3, r3, #10
 8003ff4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	00d8acbf 	.word	0x00d8acbf
 8004010:	00e4e1c0 	.word	0x00e4e1c0
 8004014:	00f42400 	.word	0x00f42400
 8004018:	01067380 	.word	0x01067380
 800401c:	011a499f 	.word	0x011a499f
 8004020:	01312cff 	.word	0x01312cff
 8004024:	014ca43f 	.word	0x014ca43f
 8004028:	016e3600 	.word	0x016e3600
 800402c:	01a6ab1f 	.word	0x01a6ab1f
 8004030:	01e84800 	.word	0x01e84800

08004034 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f023 0201 	bic.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d115      	bne.n	80040c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80040a6:	200a      	movs	r0, #10
 80040a8:	f7fc fe52 	bl	8000d50 <HAL_Delay>
      ms += 10U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	330a      	adds	r3, #10
 80040b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f001 f939 	bl	800532a <USB_GetMode>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d01e      	beq.n	80040fc <USB_SetCurrentMode+0x84>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80040c2:	d9f0      	bls.n	80040a6 <USB_SetCurrentMode+0x2e>
 80040c4:	e01a      	b.n	80040fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d115      	bne.n	80040f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80040d8:	200a      	movs	r0, #10
 80040da:	f7fc fe39 	bl	8000d50 <HAL_Delay>
      ms += 10U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	330a      	adds	r3, #10
 80040e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f001 f920 	bl	800532a <USB_GetMode>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <USB_SetCurrentMode+0x84>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80040f4:	d9f0      	bls.n	80040d8 <USB_SetCurrentMode+0x60>
 80040f6:	e001      	b.n	80040fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e005      	b.n	8004108 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8004100:	d101      	bne.n	8004106 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004110:	b084      	sub	sp, #16
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800411e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800412a:	2300      	movs	r3, #0
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	e009      	b.n	8004144 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	3340      	adds	r3, #64	@ 0x40
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	2200      	movs	r2, #0
 800413c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	3301      	adds	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b0e      	cmp	r3, #14
 8004148:	d9f2      	bls.n	8004130 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800414a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11c      	bne.n	800418c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004176:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004182:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	639a      	str	r2, [r3, #56]	@ 0x38
 800418a:	e00b      	b.n	80041a4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041aa:	461a      	mov	r2, r3
 80041ac:	2300      	movs	r3, #0
 80041ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10d      	bne.n	80041d4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041c0:	2100      	movs	r1, #0
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f968 	bl	8004498 <USB_SetDevSpeed>
 80041c8:	e008      	b.n	80041dc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041ca:	2101      	movs	r1, #1
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f963 	bl	8004498 <USB_SetDevSpeed>
 80041d2:	e003      	b.n	80041dc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041d4:	2103      	movs	r1, #3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f95e 	bl	8004498 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041dc:	2110      	movs	r1, #16
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8fa 	bl	80043d8 <USB_FlushTxFifo>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f924 	bl	800443c <USB_FlushRxFifo>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004204:	461a      	mov	r2, r3
 8004206:	2300      	movs	r3, #0
 8004208:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004210:	461a      	mov	r2, r3
 8004212:	2300      	movs	r3, #0
 8004214:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800421c:	461a      	mov	r2, r3
 800421e:	2300      	movs	r3, #0
 8004220:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	e043      	b.n	80042b0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800423a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800423e:	d118      	bne.n	8004272 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004252:	461a      	mov	r2, r3
 8004254:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e013      	b.n	8004284 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004268:	461a      	mov	r2, r3
 800426a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	e008      	b.n	8004284 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800427e:	461a      	mov	r2, r3
 8004280:	2300      	movs	r3, #0
 8004282:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004290:	461a      	mov	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a2:	461a      	mov	r2, r3
 80042a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	3301      	adds	r3, #1
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80042b4:	461a      	mov	r2, r3
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d3b5      	bcc.n	8004228 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	e043      	b.n	800434a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042d8:	d118      	bne.n	800430c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ec:	461a      	mov	r2, r3
 80042ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	e013      	b.n	800431e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004302:	461a      	mov	r2, r3
 8004304:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e008      	b.n	800431e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004318:	461a      	mov	r2, r3
 800431a:	2300      	movs	r3, #0
 800431c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800432a:	461a      	mov	r2, r3
 800432c:	2300      	movs	r3, #0
 800432e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433c:	461a      	mov	r2, r3
 800433e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004342:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	3301      	adds	r3, #1
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800434e:	461a      	mov	r2, r3
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4293      	cmp	r3, r2
 8004354:	d3b5      	bcc.n	80042c2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004368:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004376:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004378:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800437c:	2b00      	cmp	r3, #0
 800437e:	d105      	bne.n	800438c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f043 0210 	orr.w	r2, r3, #16
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	4b10      	ldr	r3, [pc, #64]	@ (80043d4 <USB_DevInit+0x2c4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004398:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f043 0208 	orr.w	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d107      	bne.n	80043c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043bc:	f043 0304 	orr.w	r3, r3, #4
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043d0:	b004      	add	sp, #16
 80043d2:	4770      	bx	lr
 80043d4:	803c3800 	.word	0x803c3800

080043d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043f2:	d901      	bls.n	80043f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e01b      	b.n	8004430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	daf2      	bge.n	80043e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	019b      	lsls	r3, r3, #6
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	3301      	adds	r3, #1
 8004414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800441c:	d901      	bls.n	8004422 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e006      	b.n	8004430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b20      	cmp	r3, #32
 800442c:	d0f0      	beq.n	8004410 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3301      	adds	r3, #1
 800444c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004454:	d901      	bls.n	800445a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e018      	b.n	800448c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	daf2      	bge.n	8004448 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2210      	movs	r2, #16
 800446a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3301      	adds	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004478:	d901      	bls.n	800447e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e006      	b.n	800448c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b10      	cmp	r3, #16
 8004488:	d0f0      	beq.n	800446c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	68f9      	ldr	r1, [r7, #12]
 80044b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044b8:	4313      	orrs	r3, r2
 80044ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b087      	sub	sp, #28
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0306 	and.w	r3, r3, #6
 80044e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044ea:	2300      	movs	r3, #0
 80044ec:	75fb      	strb	r3, [r7, #23]
 80044ee:	e00a      	b.n	8004506 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d002      	beq.n	80044fc <USB_GetDevSpeed+0x32>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b06      	cmp	r3, #6
 80044fa:	d102      	bne.n	8004502 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044fc:	2302      	movs	r3, #2
 80044fe:	75fb      	strb	r3, [r7, #23]
 8004500:	e001      	b.n	8004506 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004502:	230f      	movs	r3, #15
 8004504:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004506:	7dfb      	ldrb	r3, [r7, #23]
}
 8004508:	4618      	mov	r0, r3
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d13a      	bne.n	80045a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	2101      	movs	r1, #1
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	b29b      	uxth	r3, r3
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800454e:	4313      	orrs	r3, r2
 8004550:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d155      	bne.n	8004614 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	791b      	ldrb	r3, [r3, #4]
 8004582:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004584:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	059b      	lsls	r3, r3, #22
 800458a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800458c:	4313      	orrs	r3, r2
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	440a      	add	r2, r1
 8004596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e036      	b.n	8004614 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	2101      	movs	r1, #1
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	68f9      	ldr	r1, [r7, #12]
 80045c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11a      	bne.n	8004614 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	791b      	ldrb	r3, [r3, #4]
 80045f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045fa:	430b      	orrs	r3, r1
 80045fc:	4313      	orrs	r3, r2
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	440a      	add	r2, r1
 8004606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800460a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004612:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	785b      	ldrb	r3, [r3, #1]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d161      	bne.n	8004704 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004652:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004656:	d11f      	bne.n	8004698 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	440a      	add	r2, r1
 800466e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004672:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004676:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	440a      	add	r2, r1
 800468e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004692:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004696:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800469e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	2101      	movs	r1, #1
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046b8:	4013      	ands	r3, r2
 80046ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	2101      	movs	r1, #1
 80046ce:	fa01 f303 	lsl.w	r3, r1, r3
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	68f9      	ldr	r1, [r7, #12]
 80046d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046dc:	4013      	ands	r3, r2
 80046de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	0159      	lsls	r1, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	440b      	add	r3, r1
 80046f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fa:	4619      	mov	r1, r3
 80046fc:	4b35      	ldr	r3, [pc, #212]	@ (80047d4 <USB_DeactivateEndpoint+0x1b0>)
 80046fe:	4013      	ands	r3, r2
 8004700:	600b      	str	r3, [r1, #0]
 8004702:	e060      	b.n	80047c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004716:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800471a:	d11f      	bne.n	800475c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	440a      	add	r2, r1
 8004732:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004736:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800473a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	440a      	add	r2, r1
 8004752:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004756:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800475a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	43db      	mvns	r3, r3
 8004776:	68f9      	ldr	r1, [r7, #12]
 8004778:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800477c:	4013      	ands	r3, r2
 800477e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	2101      	movs	r1, #1
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	43db      	mvns	r3, r3
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047a0:	4013      	ands	r3, r2
 80047a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	0159      	lsls	r1, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	440b      	add	r3, r1
 80047ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047be:	4619      	mov	r1, r3
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <USB_DeactivateEndpoint+0x1b4>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	ec337800 	.word	0xec337800
 80047d8:	eff37800 	.word	0xeff37800

080047dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	@ 0x28
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	4613      	mov	r3, r2
 80047e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	785b      	ldrb	r3, [r3, #1]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	f040 817a 	bne.w	8004af2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d132      	bne.n	800486c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004820:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004824:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004828:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	440a      	add	r2, r1
 8004840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004844:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004848:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004864:	0cdb      	lsrs	r3, r3, #19
 8004866:	04db      	lsls	r3, r3, #19
 8004868:	6113      	str	r3, [r2, #16]
 800486a:	e092      	b.n	8004992 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	0151      	lsls	r1, r2, #5
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	440a      	add	r2, r1
 8004882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004886:	0cdb      	lsrs	r3, r3, #19
 8004888:	04db      	lsls	r3, r3, #19
 800488a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	0151      	lsls	r1, r2, #5
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	440a      	add	r2, r1
 80048a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048a6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80048aa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80048ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d11a      	bne.n	80048ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d903      	bls.n	80048ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	0151      	lsls	r1, r2, #5
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	440a      	add	r2, r1
 80048e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048e8:	6113      	str	r3, [r2, #16]
 80048ea:	e01b      	b.n	8004924 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6919      	ldr	r1, [r3, #16]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	440b      	add	r3, r1
 8004904:	1e59      	subs	r1, r3, #1
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	fbb1 f3f3 	udiv	r3, r1, r3
 800490e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004910:	4ba2      	ldr	r3, [pc, #648]	@ (8004b9c <USB_EPStartXfer+0x3c0>)
 8004912:	400b      	ands	r3, r1
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	0148      	lsls	r0, r1, #5
 8004918:	69f9      	ldr	r1, [r7, #28]
 800491a:	4401      	add	r1, r0
 800491c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004920:	4313      	orrs	r3, r2
 8004922:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493a:	69b9      	ldr	r1, [r7, #24]
 800493c:	0148      	lsls	r0, r1, #5
 800493e:	69f9      	ldr	r1, [r7, #28]
 8004940:	4401      	add	r1, r0
 8004942:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004946:	4313      	orrs	r3, r2
 8004948:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	791b      	ldrb	r3, [r3, #4]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d11f      	bne.n	8004992 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800496c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004970:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800498c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004990:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d14b      	bne.n	8004a30 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ac:	461a      	mov	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	791b      	ldrb	r3, [r3, #4]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d128      	bne.n	8004a0e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d110      	bne.n	80049ee <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	0151      	lsls	r1, r2, #5
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	440a      	add	r2, r1
 80049e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e00f      	b.n	8004a0e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a28:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e165      	b.n	8004cfc <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	791b      	ldrb	r3, [r3, #4]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d015      	beq.n	8004a84 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 814d 	beq.w	8004cfc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	2101      	movs	r1, #1
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	69f9      	ldr	r1, [r7, #28]
 8004a7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	634b      	str	r3, [r1, #52]	@ 0x34
 8004a82:	e13b      	b.n	8004cfc <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d110      	bne.n	8004ab6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e00f      	b.n	8004ad6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ad4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	68d9      	ldr	r1, [r3, #12]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781a      	ldrb	r2, [r3, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	b298      	uxth	r0, r3
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4603      	mov	r3, r0
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f9b8 	bl	8004e60 <USB_WritePacket>
 8004af0:	e104      	b.n	8004cfc <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b0c:	0cdb      	lsrs	r3, r3, #19
 8004b0e:	04db      	lsls	r3, r3, #19
 8004b10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	0151      	lsls	r1, r2, #5
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	440a      	add	r2, r1
 8004b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b2c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004b30:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004b34:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d131      	bne.n	8004ba0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6a:	69b9      	ldr	r1, [r7, #24]
 8004b6c:	0148      	lsls	r0, r1, #5
 8004b6e:	69f9      	ldr	r1, [r7, #28]
 8004b70:	4401      	add	r1, r0
 8004b72:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b76:	4313      	orrs	r3, r2
 8004b78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b98:	6113      	str	r3, [r2, #16]
 8004b9a:	e061      	b.n	8004c60 <USB_EPStartXfer+0x484>
 8004b9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d123      	bne.n	8004bf0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bbe:	69b9      	ldr	r1, [r7, #24]
 8004bc0:	0148      	lsls	r0, r1, #5
 8004bc2:	69f9      	ldr	r1, [r7, #28]
 8004bc4:	4401      	add	r1, r0
 8004bc6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	0151      	lsls	r1, r2, #5
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	440a      	add	r2, r1
 8004be4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004be8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bec:	6113      	str	r3, [r2, #16]
 8004bee:	e037      	b.n	8004c60 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	1e5a      	subs	r2, r3, #1
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	8afa      	ldrh	r2, [r7, #22]
 8004c0c:	fb03 f202 	mul.w	r2, r3, r2
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	8afb      	ldrh	r3, [r7, #22]
 8004c24:	04d9      	lsls	r1, r3, #19
 8004c26:	4b38      	ldr	r3, [pc, #224]	@ (8004d08 <USB_EPStartXfer+0x52c>)
 8004c28:	400b      	ands	r3, r1
 8004c2a:	69b9      	ldr	r1, [r7, #24]
 8004c2c:	0148      	lsls	r0, r1, #5
 8004c2e:	69f9      	ldr	r1, [r7, #28]
 8004c30:	4401      	add	r1, r0
 8004c32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c36:	4313      	orrs	r3, r2
 8004c38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c50:	69b9      	ldr	r1, [r7, #24]
 8004c52:	0148      	lsls	r0, r1, #5
 8004c54:	69f9      	ldr	r1, [r7, #28]
 8004c56:	4401      	add	r1, r0
 8004c58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d10d      	bne.n	8004c82 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	68d9      	ldr	r1, [r3, #12]
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7e:	460a      	mov	r2, r1
 8004c80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	791b      	ldrb	r3, [r3, #4]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d128      	bne.n	8004cdc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d110      	bne.n	8004cbc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	e00f      	b.n	8004cdc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	0151      	lsls	r1, r2, #5
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	440a      	add	r2, r1
 8004cd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cda:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cf6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004cfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	1ff80000 	.word	0x1ff80000

08004d0c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	785b      	ldrb	r3, [r3, #1]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d14a      	bne.n	8004dc0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d42:	f040 8086 	bne.w	8004e52 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d68:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3301      	adds	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d902      	bls.n	8004da4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	75fb      	strb	r3, [r7, #23]
          break;
 8004da2:	e056      	b.n	8004e52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dbc:	d0e7      	beq.n	8004d8e <USB_EPStopXfer+0x82>
 8004dbe:	e048      	b.n	8004e52 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dd8:	d13b      	bne.n	8004e52 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004df8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004dfc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3301      	adds	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d902      	bls.n	8004e38 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
          break;
 8004e36:	e00c      	b.n	8004e52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e50:	d0e7      	beq.n	8004e22 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	@ 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	460b      	mov	r3, r1
 8004e70:	71fb      	strb	r3, [r7, #7]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d123      	bne.n	8004ece <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e86:	88bb      	ldrh	r3, [r7, #4]
 8004e88:	3303      	adds	r3, #3
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e018      	b.n	8004ec6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	031a      	lsls	r2, r3, #12
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d3e2      	bcc.n	8004e94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3724      	adds	r7, #36	@ 0x24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b08b      	sub	sp, #44	@ 0x2c
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	089b      	lsrs	r3, r3, #2
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f02:	2300      	movs	r3, #0
 8004f04:	623b      	str	r3, [r7, #32]
 8004f06:	e014      	b.n	8004f32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	3301      	adds	r3, #1
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	3301      	adds	r3, #1
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	3301      	adds	r3, #1
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	623b      	str	r3, [r7, #32]
 8004f32:	6a3a      	ldr	r2, [r7, #32]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d3e6      	bcc.n	8004f08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f3a:	8bfb      	ldrh	r3, [r7, #30]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01e      	beq.n	8004f7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	701a      	strb	r2, [r3, #0]
      i++;
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	3301      	adds	r3, #1
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004f72:	8bfb      	ldrh	r3, [r7, #30]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f78:	8bfb      	ldrh	r3, [r7, #30]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1ea      	bne.n	8004f54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	372c      	adds	r7, #44	@ 0x2c
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d12c      	bne.n	8005002 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	db12      	blt.n	8004fe0 <USB_EPSetStall+0x54>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00f      	beq.n	8004fe0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fde:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ffa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	e02b      	b.n	800505a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	db12      	blt.n	800503a <USB_EPSetStall+0xae>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00f      	beq.n	800503a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005034:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005038:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005054:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005058:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	785b      	ldrb	r3, [r3, #1]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d128      	bne.n	80050d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800509e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	791b      	ldrb	r3, [r3, #4]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d003      	beq.n	80050b4 <USB_EPClearStall+0x4c>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	791b      	ldrb	r3, [r3, #4]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d138      	bne.n	8005126 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e027      	b.n	8005126 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	791b      	ldrb	r3, [r3, #4]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d003      	beq.n	8005106 <USB_EPClearStall+0x9e>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	791b      	ldrb	r3, [r3, #4]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d10f      	bne.n	8005126 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005124:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005152:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005156:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051ae:	f023 0302 	bic.w	r3, r3, #2
 80051b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80051dc:	f023 0303 	bic.w	r3, r3, #3
 80051e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4013      	ands	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800521c:	68fb      	ldr	r3, [r7, #12]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	4013      	ands	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	0c1b      	lsrs	r3, r3, #16
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	4013      	ands	r3, r2
 8005280:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	b29b      	uxth	r3, r3
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052c0:	68bb      	ldr	r3, [r7, #8]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b087      	sub	sp, #28
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	fa22 f303 	lsr.w	r3, r2, r3
 80052fe:	01db      	lsls	r3, r3, #7
 8005300:	b2db      	uxtb	r3, r3
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4013      	ands	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800531c:	68bb      	ldr	r3, [r7, #8]
}
 800531e:	4618      	mov	r0, r3
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f003 0301 	and.w	r3, r3, #1
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005360:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005364:	f023 0307 	bic.w	r3, r3, #7
 8005368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800537c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	460b      	mov	r3, r1
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	333c      	adds	r3, #60	@ 0x3c
 80053a2:	3304      	adds	r3, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4a26      	ldr	r2, [pc, #152]	@ (8005444 <USB_EP0_OutStart+0xb8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d90a      	bls.n	80053c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053c0:	d101      	bne.n	80053c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e037      	b.n	8005436 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053cc:	461a      	mov	r2, r3
 80053ce:	2300      	movs	r3, #0
 80053d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053f4:	f043 0318 	orr.w	r3, r3, #24
 80053f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005408:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800540c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800540e:	7afb      	ldrb	r3, [r7, #11]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d10f      	bne.n	8005434 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800542e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005432:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	4f54300a 	.word	0x4f54300a

08005448 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005460:	d901      	bls.n	8005466 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e01b      	b.n	800549e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	daf2      	bge.n	8005454 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f043 0201 	orr.w	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3301      	adds	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800548a:	d901      	bls.n	8005490 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e006      	b.n	800549e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b01      	cmp	r3, #1
 800549a:	d0f0      	beq.n	800547e <USB_CoreReset+0x36>

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054b8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80054bc:	f002 fc22 	bl	8007d04 <USBD_static_malloc>
 80054c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	32b0      	adds	r2, #176	@ 0xb0
 80054d2:	2100      	movs	r1, #0
 80054d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80054d8:	2302      	movs	r3, #2
 80054da:	e0d4      	b.n	8005686 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80054dc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80054e0:	2100      	movs	r1, #0
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f002 fc52 	bl	8007d8c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	32b0      	adds	r2, #176	@ 0xb0
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	32b0      	adds	r2, #176	@ 0xb0
 8005502:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	7c1b      	ldrb	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d138      	bne.n	8005586 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005514:	4b5e      	ldr	r3, [pc, #376]	@ (8005690 <USBD_CDC_Init+0x1e4>)
 8005516:	7819      	ldrb	r1, [r3, #0]
 8005518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800551c:	2202      	movs	r2, #2
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f002 facd 	bl	8007abe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005524:	4b5a      	ldr	r3, [pc, #360]	@ (8005690 <USBD_CDC_Init+0x1e4>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	f003 020f 	and.w	r2, r3, #15
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	3324      	adds	r3, #36	@ 0x24
 800553a:	2201      	movs	r2, #1
 800553c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800553e:	4b55      	ldr	r3, [pc, #340]	@ (8005694 <USBD_CDC_Init+0x1e8>)
 8005540:	7819      	ldrb	r1, [r3, #0]
 8005542:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005546:	2202      	movs	r2, #2
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f002 fab8 	bl	8007abe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800554e:	4b51      	ldr	r3, [pc, #324]	@ (8005694 <USBD_CDC_Init+0x1e8>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	f003 020f 	and.w	r2, r3, #15
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005566:	2201      	movs	r2, #1
 8005568:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800556a:	4b4b      	ldr	r3, [pc, #300]	@ (8005698 <USBD_CDC_Init+0x1ec>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	f003 020f 	and.w	r2, r3, #15
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	3326      	adds	r3, #38	@ 0x26
 8005580:	2210      	movs	r2, #16
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	e035      	b.n	80055f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005586:	4b42      	ldr	r3, [pc, #264]	@ (8005690 <USBD_CDC_Init+0x1e4>)
 8005588:	7819      	ldrb	r1, [r3, #0]
 800558a:	2340      	movs	r3, #64	@ 0x40
 800558c:	2202      	movs	r2, #2
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f002 fa95 	bl	8007abe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005594:	4b3e      	ldr	r3, [pc, #248]	@ (8005690 <USBD_CDC_Init+0x1e4>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f003 020f 	and.w	r2, r3, #15
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	3324      	adds	r3, #36	@ 0x24
 80055aa:	2201      	movs	r2, #1
 80055ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055ae:	4b39      	ldr	r3, [pc, #228]	@ (8005694 <USBD_CDC_Init+0x1e8>)
 80055b0:	7819      	ldrb	r1, [r3, #0]
 80055b2:	2340      	movs	r3, #64	@ 0x40
 80055b4:	2202      	movs	r2, #2
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f002 fa81 	bl	8007abe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055bc:	4b35      	ldr	r3, [pc, #212]	@ (8005694 <USBD_CDC_Init+0x1e8>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	f003 020f 	and.w	r2, r3, #15
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	440b      	add	r3, r1
 80055d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80055d4:	2201      	movs	r2, #1
 80055d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80055d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005698 <USBD_CDC_Init+0x1ec>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f003 020f 	and.w	r2, r3, #15
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	3326      	adds	r3, #38	@ 0x26
 80055ee:	2210      	movs	r2, #16
 80055f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80055f2:	4b29      	ldr	r3, [pc, #164]	@ (8005698 <USBD_CDC_Init+0x1ec>)
 80055f4:	7819      	ldrb	r1, [r3, #0]
 80055f6:	2308      	movs	r3, #8
 80055f8:	2203      	movs	r2, #3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f002 fa5f 	bl	8007abe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005600:	4b25      	ldr	r3, [pc, #148]	@ (8005698 <USBD_CDC_Init+0x1ec>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	f003 020f 	and.w	r2, r3, #15
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	3324      	adds	r3, #36	@ 0x24
 8005616:	2201      	movs	r2, #1
 8005618:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	33b0      	adds	r3, #176	@ 0xb0
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005650:	2302      	movs	r3, #2
 8005652:	e018      	b.n	8005686 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	7c1b      	ldrb	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800565c:	4b0d      	ldr	r3, [pc, #52]	@ (8005694 <USBD_CDC_Init+0x1e8>)
 800565e:	7819      	ldrb	r1, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f002 fb16 	bl	8007c9c <USBD_LL_PrepareReceive>
 8005670:	e008      	b.n	8005684 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005672:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <USBD_CDC_Init+0x1e8>)
 8005674:	7819      	ldrb	r1, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800567c:	2340      	movs	r3, #64	@ 0x40
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f002 fb0c 	bl	8007c9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000093 	.word	0x20000093
 8005694:	20000094 	.word	0x20000094
 8005698:	20000095 	.word	0x20000095

0800569c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80056a8:	4b3a      	ldr	r3, [pc, #232]	@ (8005794 <USBD_CDC_DeInit+0xf8>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f002 fa2b 	bl	8007b0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80056b4:	4b37      	ldr	r3, [pc, #220]	@ (8005794 <USBD_CDC_DeInit+0xf8>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	f003 020f 	and.w	r2, r3, #15
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	3324      	adds	r3, #36	@ 0x24
 80056ca:	2200      	movs	r2, #0
 80056cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80056ce:	4b32      	ldr	r3, [pc, #200]	@ (8005798 <USBD_CDC_DeInit+0xfc>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f002 fa18 	bl	8007b0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80056da:	4b2f      	ldr	r3, [pc, #188]	@ (8005798 <USBD_CDC_DeInit+0xfc>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	f003 020f 	and.w	r2, r3, #15
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80056f2:	2200      	movs	r2, #0
 80056f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80056f6:	4b29      	ldr	r3, [pc, #164]	@ (800579c <USBD_CDC_DeInit+0x100>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f002 fa04 	bl	8007b0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005702:	4b26      	ldr	r3, [pc, #152]	@ (800579c <USBD_CDC_DeInit+0x100>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f003 020f 	and.w	r2, r3, #15
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	3324      	adds	r3, #36	@ 0x24
 8005718:	2200      	movs	r2, #0
 800571a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800571c:	4b1f      	ldr	r3, [pc, #124]	@ (800579c <USBD_CDC_DeInit+0x100>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f003 020f 	and.w	r2, r3, #15
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	3326      	adds	r3, #38	@ 0x26
 8005732:	2200      	movs	r2, #0
 8005734:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	32b0      	adds	r2, #176	@ 0xb0
 8005740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01f      	beq.n	8005788 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	33b0      	adds	r3, #176	@ 0xb0
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	32b0      	adds	r2, #176	@ 0xb0
 8005766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576a:	4618      	mov	r0, r3
 800576c:	f002 fad8 	bl	8007d20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	32b0      	adds	r2, #176	@ 0xb0
 800577a:	2100      	movs	r1, #0
 800577c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000093 	.word	0x20000093
 8005798:	20000094 	.word	0x20000094
 800579c:	20000095 	.word	0x20000095

080057a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	32b0      	adds	r2, #176	@ 0xb0
 80057b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e0bf      	b.n	8005950 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d050      	beq.n	800587e <USBD_CDC_Setup+0xde>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	f040 80af 	bne.w	8005940 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	88db      	ldrh	r3, [r3, #6]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d03a      	beq.n	8005860 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b25b      	sxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	da1b      	bge.n	800582c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	33b0      	adds	r3, #176	@ 0xb0
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800580a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	88d2      	ldrh	r2, [r2, #6]
 8005810:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	88db      	ldrh	r3, [r3, #6]
 8005816:	2b07      	cmp	r3, #7
 8005818:	bf28      	it	cs
 800581a:	2307      	movcs	r3, #7
 800581c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	89fa      	ldrh	r2, [r7, #14]
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f001 fd47 	bl	80072b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800582a:	e090      	b.n	800594e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	785a      	ldrb	r2, [r3, #1]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	88db      	ldrh	r3, [r3, #6]
 800583a:	2b3f      	cmp	r3, #63	@ 0x3f
 800583c:	d803      	bhi.n	8005846 <USBD_CDC_Setup+0xa6>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	88db      	ldrh	r3, [r3, #6]
 8005842:	b2da      	uxtb	r2, r3
 8005844:	e000      	b.n	8005848 <USBD_CDC_Setup+0xa8>
 8005846:	2240      	movs	r2, #64	@ 0x40
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800584e:	6939      	ldr	r1, [r7, #16]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005856:	461a      	mov	r2, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f001 fd59 	bl	8007310 <USBD_CtlPrepareRx>
      break;
 800585e:	e076      	b.n	800594e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	33b0      	adds	r3, #176	@ 0xb0
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	7850      	ldrb	r0, [r2, #1]
 8005876:	2200      	movs	r2, #0
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	4798      	blx	r3
      break;
 800587c:	e067      	b.n	800594e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	2b0b      	cmp	r3, #11
 8005884:	d851      	bhi.n	800592a <USBD_CDC_Setup+0x18a>
 8005886:	a201      	add	r2, pc, #4	@ (adr r2, 800588c <USBD_CDC_Setup+0xec>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058bd 	.word	0x080058bd
 8005890:	08005939 	.word	0x08005939
 8005894:	0800592b 	.word	0x0800592b
 8005898:	0800592b 	.word	0x0800592b
 800589c:	0800592b 	.word	0x0800592b
 80058a0:	0800592b 	.word	0x0800592b
 80058a4:	0800592b 	.word	0x0800592b
 80058a8:	0800592b 	.word	0x0800592b
 80058ac:	0800592b 	.word	0x0800592b
 80058b0:	0800592b 	.word	0x0800592b
 80058b4:	080058e7 	.word	0x080058e7
 80058b8:	08005911 	.word	0x08005911
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d107      	bne.n	80058d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058c8:	f107 030a 	add.w	r3, r7, #10
 80058cc:	2202      	movs	r2, #2
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 fcf1 	bl	80072b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058d6:	e032      	b.n	800593e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 fc7b 	bl	80071d6 <USBD_CtlError>
            ret = USBD_FAIL;
 80058e0:	2303      	movs	r3, #3
 80058e2:	75fb      	strb	r3, [r7, #23]
          break;
 80058e4:	e02b      	b.n	800593e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d107      	bne.n	8005902 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80058f2:	f107 030d 	add.w	r3, r7, #13
 80058f6:	2201      	movs	r2, #1
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 fcdc 	bl	80072b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005900:	e01d      	b.n	800593e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f001 fc66 	bl	80071d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800590a:	2303      	movs	r3, #3
 800590c:	75fb      	strb	r3, [r7, #23]
          break;
 800590e:	e016      	b.n	800593e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b03      	cmp	r3, #3
 800591a:	d00f      	beq.n	800593c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f001 fc59 	bl	80071d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005924:	2303      	movs	r3, #3
 8005926:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005928:	e008      	b.n	800593c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 fc52 	bl	80071d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005932:	2303      	movs	r3, #3
 8005934:	75fb      	strb	r3, [r7, #23]
          break;
 8005936:	e002      	b.n	800593e <USBD_CDC_Setup+0x19e>
          break;
 8005938:	bf00      	nop
 800593a:	e008      	b.n	800594e <USBD_CDC_Setup+0x1ae>
          break;
 800593c:	bf00      	nop
      }
      break;
 800593e:	e006      	b.n	800594e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 fc47 	bl	80071d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005948:	2303      	movs	r3, #3
 800594a:	75fb      	strb	r3, [r7, #23]
      break;
 800594c:	bf00      	nop
  }

  return (uint8_t)ret;
 800594e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800596a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	32b0      	adds	r2, #176	@ 0xb0
 8005976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800597e:	2303      	movs	r3, #3
 8005980:	e065      	b.n	8005a4e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	32b0      	adds	r2, #176	@ 0xb0
 800598c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005990:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	f003 020f 	and.w	r2, r3, #15
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	3318      	adds	r3, #24
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d02f      	beq.n	8005a0c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	f003 020f 	and.w	r2, r3, #15
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	3318      	adds	r3, #24
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	f003 010f 	and.w	r1, r3, #15
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	460b      	mov	r3, r1
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	440b      	add	r3, r1
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4403      	add	r3, r0
 80059d4:	331c      	adds	r3, #28
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d112      	bne.n	8005a0c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80059e6:	78fb      	ldrb	r3, [r7, #3]
 80059e8:	f003 020f 	and.w	r2, r3, #15
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	3318      	adds	r3, #24
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059fe:	78f9      	ldrb	r1, [r7, #3]
 8005a00:	2300      	movs	r3, #0
 8005a02:	2200      	movs	r2, #0
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f002 f928 	bl	8007c5a <USBD_LL_Transmit>
 8005a0a:	e01f      	b.n	8005a4c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	33b0      	adds	r3, #176	@ 0xb0
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d010      	beq.n	8005a4c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	33b0      	adds	r3, #176	@ 0xb0
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005a48:	78fa      	ldrb	r2, [r7, #3]
 8005a4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	32b0      	adds	r2, #176	@ 0xb0
 8005a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	32b0      	adds	r2, #176	@ 0xb0
 8005a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e01a      	b.n	8005abe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f002 f926 	bl	8007cde <USBD_LL_GetRxDataSize>
 8005a92:	4602      	mov	r2, r0
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	33b0      	adds	r3, #176	@ 0xb0
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	32b0      	adds	r2, #176	@ 0xb0
 8005ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005adc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e024      	b.n	8005b32 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	33b0      	adds	r3, #176	@ 0xb0
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d019      	beq.n	8005b30 <USBD_CDC_EP0_RxReady+0x6a>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005b02:	2bff      	cmp	r3, #255	@ 0xff
 8005b04:	d014      	beq.n	8005b30 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	33b0      	adds	r3, #176	@ 0xb0
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b1e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	22ff      	movs	r2, #255	@ 0xff
 8005b2c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b44:	2182      	movs	r1, #130	@ 0x82
 8005b46:	4818      	ldr	r0, [pc, #96]	@ (8005ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b48:	f000 fd0f 	bl	800656a <USBD_GetEpDesc>
 8005b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b4e:	2101      	movs	r1, #1
 8005b50:	4815      	ldr	r0, [pc, #84]	@ (8005ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b52:	f000 fd0a 	bl	800656a <USBD_GetEpDesc>
 8005b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b58:	2181      	movs	r1, #129	@ 0x81
 8005b5a:	4813      	ldr	r0, [pc, #76]	@ (8005ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b5c:	f000 fd05 	bl	800656a <USBD_GetEpDesc>
 8005b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d006      	beq.n	8005b82 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b7c:	711a      	strb	r2, [r3, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d006      	beq.n	8005b96 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b90:	711a      	strb	r2, [r3, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2243      	movs	r2, #67	@ 0x43
 8005b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b9c:	4b02      	ldr	r3, [pc, #8]	@ (8005ba8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000050 	.word	0x20000050

08005bac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bb4:	2182      	movs	r1, #130	@ 0x82
 8005bb6:	4818      	ldr	r0, [pc, #96]	@ (8005c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bb8:	f000 fcd7 	bl	800656a <USBD_GetEpDesc>
 8005bbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	4815      	ldr	r0, [pc, #84]	@ (8005c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bc2:	f000 fcd2 	bl	800656a <USBD_GetEpDesc>
 8005bc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bc8:	2181      	movs	r1, #129	@ 0x81
 8005bca:	4813      	ldr	r0, [pc, #76]	@ (8005c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bcc:	f000 fccd 	bl	800656a <USBD_GetEpDesc>
 8005bd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2210      	movs	r2, #16
 8005bdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d006      	beq.n	8005bf2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2200      	movs	r2, #0
 8005be8:	711a      	strb	r2, [r3, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f042 0202 	orr.w	r2, r2, #2
 8005bf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d006      	beq.n	8005c06 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	711a      	strb	r2, [r3, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f042 0202 	orr.w	r2, r2, #2
 8005c04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2243      	movs	r2, #67	@ 0x43
 8005c0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c0c:	4b02      	ldr	r3, [pc, #8]	@ (8005c18 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000050 	.word	0x20000050

08005c1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c24:	2182      	movs	r1, #130	@ 0x82
 8005c26:	4818      	ldr	r0, [pc, #96]	@ (8005c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c28:	f000 fc9f 	bl	800656a <USBD_GetEpDesc>
 8005c2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c2e:	2101      	movs	r1, #1
 8005c30:	4815      	ldr	r0, [pc, #84]	@ (8005c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c32:	f000 fc9a 	bl	800656a <USBD_GetEpDesc>
 8005c36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c38:	2181      	movs	r1, #129	@ 0x81
 8005c3a:	4813      	ldr	r0, [pc, #76]	@ (8005c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c3c:	f000 fc95 	bl	800656a <USBD_GetEpDesc>
 8005c40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d006      	beq.n	8005c62 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c5c:	711a      	strb	r2, [r3, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d006      	beq.n	8005c76 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c70:	711a      	strb	r2, [r3, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2243      	movs	r2, #67	@ 0x43
 8005c7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c7c:	4b02      	ldr	r3, [pc, #8]	@ (8005c88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000050 	.word	0x20000050

08005c8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	220a      	movs	r2, #10
 8005c98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c9a:	4b03      	ldr	r3, [pc, #12]	@ (8005ca8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	2000000c 	.word	0x2000000c

08005cac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e009      	b.n	8005cd4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	33b0      	adds	r3, #176	@ 0xb0
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	32b0      	adds	r2, #176	@ 0xb0
 8005cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e008      	b.n	8005d18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	32b0      	adds	r2, #176	@ 0xb0
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e004      	b.n	8005d52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	32b0      	adds	r2, #176	@ 0xb0
 8005d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	32b0      	adds	r2, #176	@ 0xb0
 8005d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e018      	b.n	8005dc0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	7c1b      	ldrb	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d96:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <USBD_CDC_ReceivePacket+0x68>)
 8005d98:	7819      	ldrb	r1, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005da0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 ff79 	bl	8007c9c <USBD_LL_PrepareReceive>
 8005daa:	e008      	b.n	8005dbe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <USBD_CDC_ReceivePacket+0x68>)
 8005dae:	7819      	ldrb	r1, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005db6:	2340      	movs	r3, #64	@ 0x40
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 ff6f 	bl	8007c9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000094 	.word	0x20000094

08005dcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e01f      	b.n	8005e24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	79fa      	ldrb	r2, [r7, #7]
 8005e16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f001 fde9 	bl	80079f0 <USBD_LL_Init>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e025      	b.n	8005e90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	32ae      	adds	r2, #174	@ 0xae
 8005e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00f      	beq.n	8005e80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	32ae      	adds	r2, #174	@ 0xae
 8005e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	f107 020e 	add.w	r2, r7, #14
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
 8005e78:	4602      	mov	r2, r0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 fdf1 	bl	8007a88 <USBD_LL_Start>
 8005ea6:	4603      	mov	r3, r0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	78fa      	ldrb	r2, [r7, #3]
 8005eea:	4611      	mov	r1, r2
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	4611      	mov	r1, r2
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f24:	2303      	movs	r3, #3
 8005f26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 f90c 	bl	8007162 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005f58:	461a      	mov	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d01a      	beq.n	8005fa4 <USBD_LL_SetupStage+0x72>
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d822      	bhi.n	8005fb8 <USBD_LL_SetupStage+0x86>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <USBD_LL_SetupStage+0x4a>
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d00a      	beq.n	8005f90 <USBD_LL_SetupStage+0x5e>
 8005f7a:	e01d      	b.n	8005fb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fb63 	bl	8006650 <USBD_StdDevReq>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8e:	e020      	b.n	8005fd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fbcb 	bl	8006734 <USBD_StdItfReq>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa2:	e016      	b.n	8005fd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fc2d 	bl	800680c <USBD_StdEPReq>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb6:	e00c      	b.n	8005fd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fdbe 	bl	8007b48 <USBD_LL_StallEP>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd0:	bf00      	nop
  }

  return ret;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005fee:	7afb      	ldrb	r3, [r7, #11]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d16e      	bne.n	80060d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005ffa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006002:	2b03      	cmp	r3, #3
 8006004:	f040 8098 	bne.w	8006138 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	429a      	cmp	r2, r3
 8006012:	d913      	bls.n	800603c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	1ad2      	subs	r2, r2, r3
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	4293      	cmp	r3, r2
 800602c:	bf28      	it	cs
 800602e:	4613      	movcs	r3, r2
 8006030:	461a      	mov	r2, r3
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f001 f988 	bl	800734a <USBD_CtlContinueRx>
 800603a:	e07d      	b.n	8006138 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2b02      	cmp	r3, #2
 8006048:	d014      	beq.n	8006074 <USBD_LL_DataOutStage+0x98>
 800604a:	2b02      	cmp	r3, #2
 800604c:	d81d      	bhi.n	800608a <USBD_LL_DataOutStage+0xae>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <USBD_LL_DataOutStage+0x7c>
 8006052:	2b01      	cmp	r3, #1
 8006054:	d003      	beq.n	800605e <USBD_LL_DataOutStage+0x82>
 8006056:	e018      	b.n	800608a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	75bb      	strb	r3, [r7, #22]
            break;
 800605c:	e018      	b.n	8006090 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006064:	b2db      	uxtb	r3, r3
 8006066:	4619      	mov	r1, r3
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fa64 	bl	8006536 <USBD_CoreFindIF>
 800606e:	4603      	mov	r3, r0
 8006070:	75bb      	strb	r3, [r7, #22]
            break;
 8006072:	e00d      	b.n	8006090 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4619      	mov	r1, r3
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 fa66 	bl	8006550 <USBD_CoreFindEP>
 8006084:	4603      	mov	r3, r0
 8006086:	75bb      	strb	r3, [r7, #22]
            break;
 8006088:	e002      	b.n	8006090 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	75bb      	strb	r3, [r7, #22]
            break;
 800608e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006090:	7dbb      	ldrb	r3, [r7, #22]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d119      	bne.n	80060ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d113      	bne.n	80060ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80060a2:	7dba      	ldrb	r2, [r7, #22]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	32ae      	adds	r2, #174	@ 0xae
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80060b2:	7dba      	ldrb	r2, [r7, #22]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80060ba:	7dba      	ldrb	r2, [r7, #22]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	32ae      	adds	r2, #174	@ 0xae
 80060c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f001 f94e 	bl	800736c <USBD_CtlSendStatus>
 80060d0:	e032      	b.n	8006138 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80060d2:	7afb      	ldrb	r3, [r7, #11]
 80060d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	4619      	mov	r1, r3
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fa37 	bl	8006550 <USBD_CoreFindEP>
 80060e2:	4603      	mov	r3, r0
 80060e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060e6:	7dbb      	ldrb	r3, [r7, #22]
 80060e8:	2bff      	cmp	r3, #255	@ 0xff
 80060ea:	d025      	beq.n	8006138 <USBD_LL_DataOutStage+0x15c>
 80060ec:	7dbb      	ldrb	r3, [r7, #22]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d122      	bne.n	8006138 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d117      	bne.n	800612e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80060fe:	7dba      	ldrb	r2, [r7, #22]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	32ae      	adds	r2, #174	@ 0xae
 8006104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00f      	beq.n	800612e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800610e:	7dba      	ldrb	r2, [r7, #22]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006116:	7dba      	ldrb	r2, [r7, #22]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	32ae      	adds	r2, #174	@ 0xae
 800611c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	7afa      	ldrb	r2, [r7, #11]
 8006124:	4611      	mov	r1, r2
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	4798      	blx	r3
 800612a:	4603      	mov	r3, r0
 800612c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	e000      	b.n	800613a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b086      	sub	sp, #24
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	460b      	mov	r3, r1
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006150:	7afb      	ldrb	r3, [r7, #11]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d16f      	bne.n	8006236 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3314      	adds	r3, #20
 800615a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006162:	2b02      	cmp	r3, #2
 8006164:	d15a      	bne.n	800621c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	429a      	cmp	r2, r3
 8006170:	d914      	bls.n	800619c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	1ad2      	subs	r2, r2, r3
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	461a      	mov	r2, r3
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f001 f8b0 	bl	80072ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800618e:	2300      	movs	r3, #0
 8006190:	2200      	movs	r2, #0
 8006192:	2100      	movs	r1, #0
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f001 fd81 	bl	8007c9c <USBD_LL_PrepareReceive>
 800619a:	e03f      	b.n	800621c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d11c      	bne.n	80061e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d316      	bcc.n	80061e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061be:	429a      	cmp	r2, r3
 80061c0:	d20f      	bcs.n	80061e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061c2:	2200      	movs	r2, #0
 80061c4:	2100      	movs	r1, #0
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f001 f891 	bl	80072ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061d4:	2300      	movs	r3, #0
 80061d6:	2200      	movs	r2, #0
 80061d8:	2100      	movs	r1, #0
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f001 fd5e 	bl	8007c9c <USBD_LL_PrepareReceive>
 80061e0:	e01c      	b.n	800621c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d10f      	bne.n	800620e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800620e:	2180      	movs	r1, #128	@ 0x80
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f001 fc99 	bl	8007b48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f001 f8bb 	bl	8007392 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d03a      	beq.n	800629c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fe42 	bl	8005eb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006234:	e032      	b.n	800629c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800623c:	b2db      	uxtb	r3, r3
 800623e:	4619      	mov	r1, r3
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f985 	bl	8006550 <USBD_CoreFindEP>
 8006246:	4603      	mov	r3, r0
 8006248:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	2bff      	cmp	r3, #255	@ 0xff
 800624e:	d025      	beq.n	800629c <USBD_LL_DataInStage+0x15a>
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d122      	bne.n	800629c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b03      	cmp	r3, #3
 8006260:	d11c      	bne.n	800629c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006262:	7dfa      	ldrb	r2, [r7, #23]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	32ae      	adds	r2, #174	@ 0xae
 8006268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d014      	beq.n	800629c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006272:	7dfa      	ldrb	r2, [r7, #23]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800627a:	7dfa      	ldrb	r2, [r7, #23]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	32ae      	adds	r2, #174	@ 0xae
 8006280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	7afa      	ldrb	r2, [r7, #11]
 8006288:	4611      	mov	r1, r2
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	4798      	blx	r3
 800628e:	4603      	mov	r3, r0
 8006290:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006292:	7dbb      	ldrb	r3, [r7, #22]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006298:	7dbb      	ldrb	r3, [r7, #22]
 800629a:	e000      	b.n	800629e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d014      	beq.n	800630c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00e      	beq.n	800630c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6852      	ldr	r2, [r2, #4]
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	4611      	mov	r1, r2
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006308:	2303      	movs	r3, #3
 800630a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800630c:	2340      	movs	r3, #64	@ 0x40
 800630e:	2200      	movs	r2, #0
 8006310:	2100      	movs	r1, #0
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 fbd3 	bl	8007abe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2240      	movs	r2, #64	@ 0x40
 8006324:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006328:	2340      	movs	r3, #64	@ 0x40
 800632a:	2200      	movs	r2, #0
 800632c:	2180      	movs	r1, #128	@ 0x80
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 fbc5 	bl	8007abe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2240      	movs	r2, #64	@ 0x40
 800633e:	621a      	str	r2, [r3, #32]

  return ret;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	78fa      	ldrb	r2, [r7, #3]
 800635a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b04      	cmp	r3, #4
 800637c:	d006      	beq.n	800638c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006384:	b2da      	uxtb	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2204      	movs	r2, #4
 8006390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d106      	bne.n	80063c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d110      	bne.n	8006408 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	32ae      	adds	r2, #174	@ 0xae
 8006428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	e01c      	b.n	800646e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b03      	cmp	r3, #3
 800643e:	d115      	bne.n	800646c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	32ae      	adds	r2, #174	@ 0xae
 800644a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	32ae      	adds	r2, #174	@ 0xae
 800645e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	78fa      	ldrb	r2, [r7, #3]
 8006466:	4611      	mov	r1, r2
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	460b      	mov	r3, r1
 8006480:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	32ae      	adds	r2, #174	@ 0xae
 800648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006494:	2303      	movs	r3, #3
 8006496:	e01c      	b.n	80064d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d115      	bne.n	80064d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	32ae      	adds	r2, #174	@ 0xae
 80064ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	32ae      	adds	r2, #174	@ 0xae
 80064c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	78fa      	ldrb	r2, [r7, #3]
 80064ca:	4611      	mov	r1, r2
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6852      	ldr	r2, [r2, #4]
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	4611      	mov	r1, r2
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006528:	2303      	movs	r3, #3
 800652a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006542:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800655c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b086      	sub	sp, #24
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	885b      	ldrh	r3, [r3, #2]
 8006586:	b29b      	uxth	r3, r3
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	7812      	ldrb	r2, [r2, #0]
 800658c:	4293      	cmp	r3, r2
 800658e:	d91f      	bls.n	80065d0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006596:	e013      	b.n	80065c0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006598:	f107 030a 	add.w	r3, r7, #10
 800659c:	4619      	mov	r1, r3
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f000 f81b 	bl	80065da <USBD_GetNextDesc>
 80065a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d108      	bne.n	80065c0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	789b      	ldrb	r3, [r3, #2]
 80065b6:	78fa      	ldrb	r2, [r7, #3]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d008      	beq.n	80065ce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	885b      	ldrh	r3, [r3, #2]
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	897b      	ldrh	r3, [r7, #10]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d8e5      	bhi.n	8006598 <USBD_GetEpDesc+0x2e>
 80065cc:	e000      	b.n	80065d0 <USBD_GetEpDesc+0x66>
          break;
 80065ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80065d0:	693b      	ldr	r3, [r7, #16]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	7812      	ldrb	r2, [r2, #0]
 80065f0:	4413      	add	r3, r2
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4413      	add	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006604:	68fb      	ldr	r3, [r7, #12]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006612:	b480      	push	{r7}
 8006614:	b087      	sub	sp, #28
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	3301      	adds	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006630:	8a3b      	ldrh	r3, [r7, #16]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	b21a      	sxth	r2, r3
 8006636:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800663a:	4313      	orrs	r3, r2
 800663c:	b21b      	sxth	r3, r3
 800663e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006640:	89fb      	ldrh	r3, [r7, #14]
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006666:	2b40      	cmp	r3, #64	@ 0x40
 8006668:	d005      	beq.n	8006676 <USBD_StdDevReq+0x26>
 800666a:	2b40      	cmp	r3, #64	@ 0x40
 800666c:	d857      	bhi.n	800671e <USBD_StdDevReq+0xce>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00f      	beq.n	8006692 <USBD_StdDevReq+0x42>
 8006672:	2b20      	cmp	r3, #32
 8006674:	d153      	bne.n	800671e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	32ae      	adds	r2, #174	@ 0xae
 8006680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]
      break;
 8006690:	e04a      	b.n	8006728 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b09      	cmp	r3, #9
 8006698:	d83b      	bhi.n	8006712 <USBD_StdDevReq+0xc2>
 800669a:	a201      	add	r2, pc, #4	@ (adr r2, 80066a0 <USBD_StdDevReq+0x50>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	080066f5 	.word	0x080066f5
 80066a4:	08006709 	.word	0x08006709
 80066a8:	08006713 	.word	0x08006713
 80066ac:	080066ff 	.word	0x080066ff
 80066b0:	08006713 	.word	0x08006713
 80066b4:	080066d3 	.word	0x080066d3
 80066b8:	080066c9 	.word	0x080066c9
 80066bc:	08006713 	.word	0x08006713
 80066c0:	080066eb 	.word	0x080066eb
 80066c4:	080066dd 	.word	0x080066dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa3c 	bl	8006b48 <USBD_GetDescriptor>
          break;
 80066d0:	e024      	b.n	800671c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fba1 	bl	8006e1c <USBD_SetAddress>
          break;
 80066da:	e01f      	b.n	800671c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fbe0 	bl	8006ea4 <USBD_SetConfig>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]
          break;
 80066e8:	e018      	b.n	800671c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fc83 	bl	8006ff8 <USBD_GetConfig>
          break;
 80066f2:	e013      	b.n	800671c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fcb4 	bl	8007064 <USBD_GetStatus>
          break;
 80066fc:	e00e      	b.n	800671c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fce3 	bl	80070cc <USBD_SetFeature>
          break;
 8006706:	e009      	b.n	800671c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fd07 	bl	800711e <USBD_ClrFeature>
          break;
 8006710:	e004      	b.n	800671c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fd5e 	bl	80071d6 <USBD_CtlError>
          break;
 800671a:	bf00      	nop
      }
      break;
 800671c:	e004      	b.n	8006728 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fd58 	bl	80071d6 <USBD_CtlError>
      break;
 8006726:	bf00      	nop
  }

  return ret;
 8006728:	7bfb      	ldrb	r3, [r7, #15]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop

08006734 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800674a:	2b40      	cmp	r3, #64	@ 0x40
 800674c:	d005      	beq.n	800675a <USBD_StdItfReq+0x26>
 800674e:	2b40      	cmp	r3, #64	@ 0x40
 8006750:	d852      	bhi.n	80067f8 <USBD_StdItfReq+0xc4>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <USBD_StdItfReq+0x26>
 8006756:	2b20      	cmp	r3, #32
 8006758:	d14e      	bne.n	80067f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006760:	b2db      	uxtb	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	2b02      	cmp	r3, #2
 8006766:	d840      	bhi.n	80067ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	889b      	ldrh	r3, [r3, #4]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	d836      	bhi.n	80067e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	889b      	ldrh	r3, [r3, #4]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff fedb 	bl	8006536 <USBD_CoreFindIF>
 8006780:	4603      	mov	r3, r0
 8006782:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	2bff      	cmp	r3, #255	@ 0xff
 8006788:	d01d      	beq.n	80067c6 <USBD_StdItfReq+0x92>
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d11a      	bne.n	80067c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006790:	7bba      	ldrb	r2, [r7, #14]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	32ae      	adds	r2, #174	@ 0xae
 8006796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00f      	beq.n	80067c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80067a0:	7bba      	ldrb	r2, [r7, #14]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067a8:	7bba      	ldrb	r2, [r7, #14]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	32ae      	adds	r2, #174	@ 0xae
 80067ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	4798      	blx	r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067be:	e004      	b.n	80067ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80067c0:	2303      	movs	r3, #3
 80067c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067c4:	e001      	b.n	80067ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80067c6:	2303      	movs	r3, #3
 80067c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	88db      	ldrh	r3, [r3, #6]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d110      	bne.n	80067f4 <USBD_StdItfReq+0xc0>
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10d      	bne.n	80067f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fdc7 	bl	800736c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067de:	e009      	b.n	80067f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fcf7 	bl	80071d6 <USBD_CtlError>
          break;
 80067e8:	e004      	b.n	80067f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fcf2 	bl	80071d6 <USBD_CtlError>
          break;
 80067f2:	e000      	b.n	80067f6 <USBD_StdItfReq+0xc2>
          break;
 80067f4:	bf00      	nop
      }
      break;
 80067f6:	e004      	b.n	8006802 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fceb 	bl	80071d6 <USBD_CtlError>
      break;
 8006800:	bf00      	nop
  }

  return ret;
 8006802:	7bfb      	ldrb	r3, [r7, #15]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	889b      	ldrh	r3, [r3, #4]
 800681e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006828:	2b40      	cmp	r3, #64	@ 0x40
 800682a:	d007      	beq.n	800683c <USBD_StdEPReq+0x30>
 800682c:	2b40      	cmp	r3, #64	@ 0x40
 800682e:	f200 817f 	bhi.w	8006b30 <USBD_StdEPReq+0x324>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d02a      	beq.n	800688c <USBD_StdEPReq+0x80>
 8006836:	2b20      	cmp	r3, #32
 8006838:	f040 817a 	bne.w	8006b30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fe85 	bl	8006550 <USBD_CoreFindEP>
 8006846:	4603      	mov	r3, r0
 8006848:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800684a:	7b7b      	ldrb	r3, [r7, #13]
 800684c:	2bff      	cmp	r3, #255	@ 0xff
 800684e:	f000 8174 	beq.w	8006b3a <USBD_StdEPReq+0x32e>
 8006852:	7b7b      	ldrb	r3, [r7, #13]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f040 8170 	bne.w	8006b3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800685a:	7b7a      	ldrb	r2, [r7, #13]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006862:	7b7a      	ldrb	r2, [r7, #13]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	32ae      	adds	r2, #174	@ 0xae
 8006868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 8163 	beq.w	8006b3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006874:	7b7a      	ldrb	r2, [r7, #13]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	32ae      	adds	r2, #174	@ 0xae
 800687a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3
 8006886:	4603      	mov	r3, r0
 8006888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800688a:	e156      	b.n	8006b3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b03      	cmp	r3, #3
 8006892:	d008      	beq.n	80068a6 <USBD_StdEPReq+0x9a>
 8006894:	2b03      	cmp	r3, #3
 8006896:	f300 8145 	bgt.w	8006b24 <USBD_StdEPReq+0x318>
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 809b 	beq.w	80069d6 <USBD_StdEPReq+0x1ca>
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d03c      	beq.n	800691e <USBD_StdEPReq+0x112>
 80068a4:	e13e      	b.n	8006b24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d002      	beq.n	80068b8 <USBD_StdEPReq+0xac>
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d016      	beq.n	80068e4 <USBD_StdEPReq+0xd8>
 80068b6:	e02c      	b.n	8006912 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <USBD_StdEPReq+0xce>
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	2b80      	cmp	r3, #128	@ 0x80
 80068c2:	d00a      	beq.n	80068da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 f93d 	bl	8007b48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068ce:	2180      	movs	r1, #128	@ 0x80
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 f939 	bl	8007b48 <USBD_LL_StallEP>
 80068d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068d8:	e020      	b.n	800691c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc7a 	bl	80071d6 <USBD_CtlError>
              break;
 80068e2:	e01b      	b.n	800691c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	885b      	ldrh	r3, [r3, #2]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10e      	bne.n	800690a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <USBD_StdEPReq+0xfe>
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	2b80      	cmp	r3, #128	@ 0x80
 80068f6:	d008      	beq.n	800690a <USBD_StdEPReq+0xfe>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	88db      	ldrh	r3, [r3, #6]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 f91f 	bl	8007b48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fd2e 	bl	800736c <USBD_CtlSendStatus>

              break;
 8006910:	e004      	b.n	800691c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fc5e 	bl	80071d6 <USBD_CtlError>
              break;
 800691a:	bf00      	nop
          }
          break;
 800691c:	e107      	b.n	8006b2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d002      	beq.n	8006930 <USBD_StdEPReq+0x124>
 800692a:	2b03      	cmp	r3, #3
 800692c:	d016      	beq.n	800695c <USBD_StdEPReq+0x150>
 800692e:	e04b      	b.n	80069c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00d      	beq.n	8006952 <USBD_StdEPReq+0x146>
 8006936:	7bbb      	ldrb	r3, [r7, #14]
 8006938:	2b80      	cmp	r3, #128	@ 0x80
 800693a:	d00a      	beq.n	8006952 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 f901 	bl	8007b48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006946:	2180      	movs	r1, #128	@ 0x80
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 f8fd 	bl	8007b48 <USBD_LL_StallEP>
 800694e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006950:	e040      	b.n	80069d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fc3e 	bl	80071d6 <USBD_CtlError>
              break;
 800695a:	e03b      	b.n	80069d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	885b      	ldrh	r3, [r3, #2]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d136      	bne.n	80069d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 f907 	bl	8007b86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fcf7 	bl	800736c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff fde4 	bl	8006550 <USBD_CoreFindEP>
 8006988:	4603      	mov	r3, r0
 800698a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800698c:	7b7b      	ldrb	r3, [r7, #13]
 800698e:	2bff      	cmp	r3, #255	@ 0xff
 8006990:	d01f      	beq.n	80069d2 <USBD_StdEPReq+0x1c6>
 8006992:	7b7b      	ldrb	r3, [r7, #13]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d11c      	bne.n	80069d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006998:	7b7a      	ldrb	r2, [r7, #13]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80069a0:	7b7a      	ldrb	r2, [r7, #13]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	32ae      	adds	r2, #174	@ 0xae
 80069a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d010      	beq.n	80069d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069b0:	7b7a      	ldrb	r2, [r7, #13]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	32ae      	adds	r2, #174	@ 0xae
 80069b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
 80069c2:	4603      	mov	r3, r0
 80069c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80069c6:	e004      	b.n	80069d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fc03 	bl	80071d6 <USBD_CtlError>
              break;
 80069d0:	e000      	b.n	80069d4 <USBD_StdEPReq+0x1c8>
              break;
 80069d2:	bf00      	nop
          }
          break;
 80069d4:	e0ab      	b.n	8006b2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d002      	beq.n	80069e8 <USBD_StdEPReq+0x1dc>
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d032      	beq.n	8006a4c <USBD_StdEPReq+0x240>
 80069e6:	e097      	b.n	8006b18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <USBD_StdEPReq+0x1f2>
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
 80069f0:	2b80      	cmp	r3, #128	@ 0x80
 80069f2:	d004      	beq.n	80069fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fbed 	bl	80071d6 <USBD_CtlError>
                break;
 80069fc:	e091      	b.n	8006b22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	da0b      	bge.n	8006a1e <USBD_StdEPReq+0x212>
 8006a06:	7bbb      	ldrb	r3, [r7, #14]
 8006a08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	3310      	adds	r3, #16
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	4413      	add	r3, r2
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	e00b      	b.n	8006a36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a1e:	7bbb      	ldrb	r3, [r7, #14]
 8006a20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	4413      	add	r3, r2
 8006a34:	3304      	adds	r3, #4
 8006a36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2202      	movs	r2, #2
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fc37 	bl	80072b8 <USBD_CtlSendData>
              break;
 8006a4a:	e06a      	b.n	8006b22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	da11      	bge.n	8006a78 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	f003 020f 	and.w	r2, r3, #15
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	3324      	adds	r3, #36	@ 0x24
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d117      	bne.n	8006a9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fbb0 	bl	80071d6 <USBD_CtlError>
                  break;
 8006a76:	e054      	b.n	8006b22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	f003 020f 	and.w	r2, r3, #15
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fb9d 	bl	80071d6 <USBD_CtlError>
                  break;
 8006a9c:	e041      	b.n	8006b22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	da0b      	bge.n	8006abe <USBD_StdEPReq+0x2b2>
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	3310      	adds	r3, #16
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4413      	add	r3, r2
 8006aba:	3304      	adds	r3, #4
 8006abc:	e00b      	b.n	8006ad6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <USBD_StdEPReq+0x2d8>
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	2b80      	cmp	r3, #128	@ 0x80
 8006ae2:	d103      	bne.n	8006aec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	e00e      	b.n	8006b0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 f867 	bl	8007bc4 <USBD_LL_IsStallEP>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2201      	movs	r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	e002      	b.n	8006b0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fbd1 	bl	80072b8 <USBD_CtlSendData>
              break;
 8006b16:	e004      	b.n	8006b22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fb5b 	bl	80071d6 <USBD_CtlError>
              break;
 8006b20:	bf00      	nop
          }
          break;
 8006b22:	e004      	b.n	8006b2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fb55 	bl	80071d6 <USBD_CtlError>
          break;
 8006b2c:	bf00      	nop
      }
      break;
 8006b2e:	e005      	b.n	8006b3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fb4f 	bl	80071d6 <USBD_CtlError>
      break;
 8006b38:	e000      	b.n	8006b3c <USBD_StdEPReq+0x330>
      break;
 8006b3a:	bf00      	nop
  }

  return ret;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	885b      	ldrh	r3, [r3, #2]
 8006b62:	0a1b      	lsrs	r3, r3, #8
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	2b06      	cmp	r3, #6
 8006b6a:	f200 8128 	bhi.w	8006dbe <USBD_GetDescriptor+0x276>
 8006b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b74 <USBD_GetDescriptor+0x2c>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006b91 	.word	0x08006b91
 8006b78:	08006ba9 	.word	0x08006ba9
 8006b7c:	08006be9 	.word	0x08006be9
 8006b80:	08006dbf 	.word	0x08006dbf
 8006b84:	08006dbf 	.word	0x08006dbf
 8006b88:	08006d5f 	.word	0x08006d5f
 8006b8c:	08006d8b 	.word	0x08006d8b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	7c12      	ldrb	r2, [r2, #16]
 8006b9c:	f107 0108 	add.w	r1, r7, #8
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4798      	blx	r3
 8006ba4:	60f8      	str	r0, [r7, #12]
      break;
 8006ba6:	e112      	b.n	8006dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	7c1b      	ldrb	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10d      	bne.n	8006bcc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb8:	f107 0208 	add.w	r2, r7, #8
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4798      	blx	r3
 8006bc0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006bca:	e100      	b.n	8006dce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd4:	f107 0208 	add.w	r2, r7, #8
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4798      	blx	r3
 8006bdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	2202      	movs	r2, #2
 8006be4:	701a      	strb	r2, [r3, #0]
      break;
 8006be6:	e0f2      	b.n	8006dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	885b      	ldrh	r3, [r3, #2]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	f200 80ac 	bhi.w	8006d4c <USBD_GetDescriptor+0x204>
 8006bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bfc <USBD_GetDescriptor+0xb4>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c15 	.word	0x08006c15
 8006c00:	08006c49 	.word	0x08006c49
 8006c04:	08006c7d 	.word	0x08006c7d
 8006c08:	08006cb1 	.word	0x08006cb1
 8006c0c:	08006ce5 	.word	0x08006ce5
 8006c10:	08006d19 	.word	0x08006d19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00b      	beq.n	8006c38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	7c12      	ldrb	r2, [r2, #16]
 8006c2c:	f107 0108 	add.w	r1, r7, #8
 8006c30:	4610      	mov	r0, r2
 8006c32:	4798      	blx	r3
 8006c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c36:	e091      	b.n	8006d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 facb 	bl	80071d6 <USBD_CtlError>
            err++;
 8006c40:	7afb      	ldrb	r3, [r7, #11]
 8006c42:	3301      	adds	r3, #1
 8006c44:	72fb      	strb	r3, [r7, #11]
          break;
 8006c46:	e089      	b.n	8006d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	7c12      	ldrb	r2, [r2, #16]
 8006c60:	f107 0108 	add.w	r1, r7, #8
 8006c64:	4610      	mov	r0, r2
 8006c66:	4798      	blx	r3
 8006c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c6a:	e077      	b.n	8006d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fab1 	bl	80071d6 <USBD_CtlError>
            err++;
 8006c74:	7afb      	ldrb	r3, [r7, #11]
 8006c76:	3301      	adds	r3, #1
 8006c78:	72fb      	strb	r3, [r7, #11]
          break;
 8006c7a:	e06f      	b.n	8006d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	7c12      	ldrb	r2, [r2, #16]
 8006c94:	f107 0108 	add.w	r1, r7, #8
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c9e:	e05d      	b.n	8006d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa97 	bl	80071d6 <USBD_CtlError>
            err++;
 8006ca8:	7afb      	ldrb	r3, [r7, #11]
 8006caa:	3301      	adds	r3, #1
 8006cac:	72fb      	strb	r3, [r7, #11]
          break;
 8006cae:	e055      	b.n	8006d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	7c12      	ldrb	r2, [r2, #16]
 8006cc8:	f107 0108 	add.w	r1, r7, #8
 8006ccc:	4610      	mov	r0, r2
 8006cce:	4798      	blx	r3
 8006cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cd2:	e043      	b.n	8006d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa7d 	bl	80071d6 <USBD_CtlError>
            err++;
 8006cdc:	7afb      	ldrb	r3, [r7, #11]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ce2:	e03b      	b.n	8006d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	7c12      	ldrb	r2, [r2, #16]
 8006cfc:	f107 0108 	add.w	r1, r7, #8
 8006d00:	4610      	mov	r0, r2
 8006d02:	4798      	blx	r3
 8006d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d06:	e029      	b.n	8006d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fa63 	bl	80071d6 <USBD_CtlError>
            err++;
 8006d10:	7afb      	ldrb	r3, [r7, #11]
 8006d12:	3301      	adds	r3, #1
 8006d14:	72fb      	strb	r3, [r7, #11]
          break;
 8006d16:	e021      	b.n	8006d5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	7c12      	ldrb	r2, [r2, #16]
 8006d30:	f107 0108 	add.w	r1, r7, #8
 8006d34:	4610      	mov	r0, r2
 8006d36:	4798      	blx	r3
 8006d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d3a:	e00f      	b.n	8006d5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fa49 	bl	80071d6 <USBD_CtlError>
            err++;
 8006d44:	7afb      	ldrb	r3, [r7, #11]
 8006d46:	3301      	adds	r3, #1
 8006d48:	72fb      	strb	r3, [r7, #11]
          break;
 8006d4a:	e007      	b.n	8006d5c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa41 	bl	80071d6 <USBD_CtlError>
          err++;
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	3301      	adds	r3, #1
 8006d58:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006d5a:	bf00      	nop
      }
      break;
 8006d5c:	e037      	b.n	8006dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	7c1b      	ldrb	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d109      	bne.n	8006d7a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d6e:	f107 0208 	add.w	r2, r7, #8
 8006d72:	4610      	mov	r0, r2
 8006d74:	4798      	blx	r3
 8006d76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d78:	e029      	b.n	8006dce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fa2a 	bl	80071d6 <USBD_CtlError>
        err++;
 8006d82:	7afb      	ldrb	r3, [r7, #11]
 8006d84:	3301      	adds	r3, #1
 8006d86:	72fb      	strb	r3, [r7, #11]
      break;
 8006d88:	e021      	b.n	8006dce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7c1b      	ldrb	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10d      	bne.n	8006dae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9a:	f107 0208 	add.w	r2, r7, #8
 8006d9e:	4610      	mov	r0, r2
 8006da0:	4798      	blx	r3
 8006da2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3301      	adds	r3, #1
 8006da8:	2207      	movs	r2, #7
 8006daa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dac:	e00f      	b.n	8006dce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fa10 	bl	80071d6 <USBD_CtlError>
        err++;
 8006db6:	7afb      	ldrb	r3, [r7, #11]
 8006db8:	3301      	adds	r3, #1
 8006dba:	72fb      	strb	r3, [r7, #11]
      break;
 8006dbc:	e007      	b.n	8006dce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fa08 	bl	80071d6 <USBD_CtlError>
      err++;
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	72fb      	strb	r3, [r7, #11]
      break;
 8006dcc:	bf00      	nop
  }

  if (err != 0U)
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d11e      	bne.n	8006e12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	88db      	ldrh	r3, [r3, #6]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d016      	beq.n	8006e0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ddc:	893b      	ldrh	r3, [r7, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00e      	beq.n	8006e00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	88da      	ldrh	r2, [r3, #6]
 8006de6:	893b      	ldrh	r3, [r7, #8]
 8006de8:	4293      	cmp	r3, r2
 8006dea:	bf28      	it	cs
 8006dec:	4613      	movcs	r3, r2
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006df2:	893b      	ldrh	r3, [r7, #8]
 8006df4:	461a      	mov	r2, r3
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fa5d 	bl	80072b8 <USBD_CtlSendData>
 8006dfe:	e009      	b.n	8006e14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f9e7 	bl	80071d6 <USBD_CtlError>
 8006e08:	e004      	b.n	8006e14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 faae 	bl	800736c <USBD_CtlSendStatus>
 8006e10:	e000      	b.n	8006e14 <USBD_GetDescriptor+0x2cc>
    return;
 8006e12:	bf00      	nop
  }
}
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop

08006e1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	889b      	ldrh	r3, [r3, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d131      	bne.n	8006e92 <USBD_SetAddress+0x76>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	88db      	ldrh	r3, [r3, #6]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d12d      	bne.n	8006e92 <USBD_SetAddress+0x76>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	885b      	ldrh	r3, [r3, #2]
 8006e3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e3c:	d829      	bhi.n	8006e92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	885b      	ldrh	r3, [r3, #2]
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d104      	bne.n	8006e60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f9bc 	bl	80071d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5e:	e01d      	b.n	8006e9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7bfa      	ldrb	r2, [r7, #15]
 8006e64:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fed5 	bl	8007c1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fa7a 	bl	800736c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2202      	movs	r2, #2
 8006e82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e86:	e009      	b.n	8006e9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e90:	e004      	b.n	8006e9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f99e 	bl	80071d6 <USBD_CtlError>
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	885b      	ldrh	r3, [r3, #2]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	4b4e      	ldr	r3, [pc, #312]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006eba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d905      	bls.n	8006ed0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f985 	bl	80071d6 <USBD_CtlError>
    return USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e08c      	b.n	8006fea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d002      	beq.n	8006ee2 <USBD_SetConfig+0x3e>
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d029      	beq.n	8006f34 <USBD_SetConfig+0x90>
 8006ee0:	e075      	b.n	8006fce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ee2:	4b44      	ldr	r3, [pc, #272]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d020      	beq.n	8006f2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006eea:	4b42      	ldr	r3, [pc, #264]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fe ffe3 	bl	8005ec6 <USBD_SetClassConfig>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d008      	beq.n	8006f1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f962 	bl	80071d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f1a:	e065      	b.n	8006fe8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fa25 	bl	800736c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2203      	movs	r2, #3
 8006f26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f2a:	e05d      	b.n	8006fe8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fa1d 	bl	800736c <USBD_CtlSendStatus>
      break;
 8006f32:	e059      	b.n	8006fe8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f34:	4b2f      	ldr	r3, [pc, #188]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d112      	bne.n	8006f62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006f44:	4b2b      	ldr	r3, [pc, #172]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f4e:	4b29      	ldr	r3, [pc, #164]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7fe ffd2 	bl	8005efe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa06 	bl	800736c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f60:	e042      	b.n	8006fe8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006f62:	4b24      	ldr	r3, [pc, #144]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d02a      	beq.n	8006fc6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fe ffc0 	bl	8005efe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f88:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fe ff99 	bl	8005ec6 <USBD_SetClassConfig>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00f      	beq.n	8006fbe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f918 	bl	80071d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7fe ffa5 	bl	8005efe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006fbc:	e014      	b.n	8006fe8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f9d4 	bl	800736c <USBD_CtlSendStatus>
      break;
 8006fc4:	e010      	b.n	8006fe8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f9d0 	bl	800736c <USBD_CtlSendStatus>
      break;
 8006fcc:	e00c      	b.n	8006fe8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f900 	bl	80071d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fd6:	4b07      	ldr	r3, [pc, #28]	@ (8006ff4 <USBD_SetConfig+0x150>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7fe ff8e 	bl	8005efe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe6:	bf00      	nop
  }

  return ret;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	200001f4 	.word	0x200001f4

08006ff8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	88db      	ldrh	r3, [r3, #6]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d004      	beq.n	8007014 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f8e2 	bl	80071d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007012:	e023      	b.n	800705c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	dc02      	bgt.n	8007026 <USBD_GetConfig+0x2e>
 8007020:	2b00      	cmp	r3, #0
 8007022:	dc03      	bgt.n	800702c <USBD_GetConfig+0x34>
 8007024:	e015      	b.n	8007052 <USBD_GetConfig+0x5a>
 8007026:	2b03      	cmp	r3, #3
 8007028:	d00b      	beq.n	8007042 <USBD_GetConfig+0x4a>
 800702a:	e012      	b.n	8007052 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3308      	adds	r3, #8
 8007036:	2201      	movs	r2, #1
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f93c 	bl	80072b8 <USBD_CtlSendData>
        break;
 8007040:	e00c      	b.n	800705c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3304      	adds	r3, #4
 8007046:	2201      	movs	r2, #1
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f934 	bl	80072b8 <USBD_CtlSendData>
        break;
 8007050:	e004      	b.n	800705c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f8be 	bl	80071d6 <USBD_CtlError>
        break;
 800705a:	bf00      	nop
}
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007074:	b2db      	uxtb	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	2b02      	cmp	r3, #2
 800707a:	d81e      	bhi.n	80070ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	88db      	ldrh	r3, [r3, #6]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d004      	beq.n	800708e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f8a5 	bl	80071d6 <USBD_CtlError>
        break;
 800708c:	e01a      	b.n	80070c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f043 0202 	orr.w	r2, r3, #2
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	330c      	adds	r3, #12
 80070ae:	2202      	movs	r2, #2
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f900 	bl	80072b8 <USBD_CtlSendData>
      break;
 80070b8:	e004      	b.n	80070c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f88a 	bl	80071d6 <USBD_CtlError>
      break;
 80070c2:	bf00      	nop
  }
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	885b      	ldrh	r3, [r3, #2]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d107      	bne.n	80070ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f940 	bl	800736c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80070ec:	e013      	b.n	8007116 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	885b      	ldrh	r3, [r3, #2]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d10b      	bne.n	800710e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	889b      	ldrh	r3, [r3, #4]
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f930 	bl	800736c <USBD_CtlSendStatus>
}
 800710c:	e003      	b.n	8007116 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f860 	bl	80071d6 <USBD_CtlError>
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800712e:	b2db      	uxtb	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	2b02      	cmp	r3, #2
 8007134:	d80b      	bhi.n	800714e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d10c      	bne.n	8007158 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f910 	bl	800736c <USBD_CtlSendStatus>
      }
      break;
 800714c:	e004      	b.n	8007158 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f840 	bl	80071d6 <USBD_CtlError>
      break;
 8007156:	e000      	b.n	800715a <USBD_ClrFeature+0x3c>
      break;
 8007158:	bf00      	nop
  }
}
 800715a:	bf00      	nop
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3301      	adds	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3301      	adds	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f7ff fa40 	bl	8006612 <SWAPBYTE>
 8007192:	4603      	mov	r3, r0
 8007194:	461a      	mov	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3301      	adds	r3, #1
 800719e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f7ff fa33 	bl	8006612 <SWAPBYTE>
 80071ac:	4603      	mov	r3, r0
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f7ff fa26 	bl	8006612 <SWAPBYTE>
 80071c6:	4603      	mov	r3, r0
 80071c8:	461a      	mov	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	80da      	strh	r2, [r3, #6]
}
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071e0:	2180      	movs	r1, #128	@ 0x80
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fcb0 	bl	8007b48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071e8:	2100      	movs	r1, #0
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fcac 	bl	8007b48 <USBD_LL_StallEP>
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d036      	beq.n	800727c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007212:	6938      	ldr	r0, [r7, #16]
 8007214:	f000 f836 	bl	8007284 <USBD_GetLen>
 8007218:	4603      	mov	r3, r0
 800721a:	3301      	adds	r3, #1
 800721c:	b29b      	uxth	r3, r3
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	4413      	add	r3, r2
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	7812      	ldrb	r2, [r2, #0]
 8007230:	701a      	strb	r2, [r3, #0]
  idx++;
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	3301      	adds	r3, #1
 8007236:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	4413      	add	r3, r2
 800723e:	2203      	movs	r2, #3
 8007240:	701a      	strb	r2, [r3, #0]
  idx++;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	3301      	adds	r3, #1
 8007246:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007248:	e013      	b.n	8007272 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	4413      	add	r3, r2
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	3301      	adds	r3, #1
 800725a:	613b      	str	r3, [r7, #16]
    idx++;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	3301      	adds	r3, #1
 8007260:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	4413      	add	r3, r2
 8007268:	2200      	movs	r2, #0
 800726a:	701a      	strb	r2, [r3, #0]
    idx++;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	3301      	adds	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e7      	bne.n	800724a <USBD_GetString+0x52>
 800727a:	e000      	b.n	800727e <USBD_GetString+0x86>
    return;
 800727c:	bf00      	nop
  }
}
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007294:	e005      	b.n	80072a2 <USBD_GetLen+0x1e>
  {
    len++;
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	3301      	adds	r3, #1
 800729a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	3301      	adds	r3, #1
 80072a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f5      	bne.n	8007296 <USBD_GetLen+0x12>
  }

  return len;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	2100      	movs	r1, #0
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fcbb 	bl	8007c5a <USBD_LL_Transmit>

  return USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	2100      	movs	r1, #0
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fcaa 	bl	8007c5a <USBD_LL_Transmit>

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2203      	movs	r2, #3
 8007320:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	2100      	movs	r1, #0
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 fcae 	bl	8007c9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	2100      	movs	r1, #0
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fc9d 	bl	8007c9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2204      	movs	r2, #4
 8007378:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800737c:	2300      	movs	r3, #0
 800737e:	2200      	movs	r2, #0
 8007380:	2100      	movs	r1, #0
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fc69 	bl	8007c5a <USBD_LL_Transmit>

  return USBD_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2205      	movs	r2, #5
 800739e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073a2:	2300      	movs	r3, #0
 80073a4:	2200      	movs	r2, #0
 80073a6:	2100      	movs	r1, #0
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fc77 	bl	8007c9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073bc:	2200      	movs	r2, #0
 80073be:	4912      	ldr	r1, [pc, #72]	@ (8007408 <MX_USB_DEVICE_Init+0x50>)
 80073c0:	4812      	ldr	r0, [pc, #72]	@ (800740c <MX_USB_DEVICE_Init+0x54>)
 80073c2:	f7fe fd03 	bl	8005dcc <USBD_Init>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073cc:	f7f9 faae 	bl	800092c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073d0:	490f      	ldr	r1, [pc, #60]	@ (8007410 <MX_USB_DEVICE_Init+0x58>)
 80073d2:	480e      	ldr	r0, [pc, #56]	@ (800740c <MX_USB_DEVICE_Init+0x54>)
 80073d4:	f7fe fd2a 	bl	8005e2c <USBD_RegisterClass>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073de:	f7f9 faa5 	bl	800092c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073e2:	490c      	ldr	r1, [pc, #48]	@ (8007414 <MX_USB_DEVICE_Init+0x5c>)
 80073e4:	4809      	ldr	r0, [pc, #36]	@ (800740c <MX_USB_DEVICE_Init+0x54>)
 80073e6:	f7fe fc61 	bl	8005cac <USBD_CDC_RegisterInterface>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80073f0:	f7f9 fa9c 	bl	800092c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80073f4:	4805      	ldr	r0, [pc, #20]	@ (800740c <MX_USB_DEVICE_Init+0x54>)
 80073f6:	f7fe fd4f 	bl	8005e98 <USBD_Start>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007400:	f7f9 fa94 	bl	800092c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007404:	bf00      	nop
 8007406:	bd80      	pop	{r7, pc}
 8007408:	200000ac 	.word	0x200000ac
 800740c:	200001f8 	.word	0x200001f8
 8007410:	20000018 	.word	0x20000018
 8007414:	20000098 	.word	0x20000098

08007418 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800741c:	2200      	movs	r2, #0
 800741e:	4905      	ldr	r1, [pc, #20]	@ (8007434 <CDC_Init_FS+0x1c>)
 8007420:	4805      	ldr	r0, [pc, #20]	@ (8007438 <CDC_Init_FS+0x20>)
 8007422:	f7fe fc5d 	bl	8005ce0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007426:	4905      	ldr	r1, [pc, #20]	@ (800743c <CDC_Init_FS+0x24>)
 8007428:	4803      	ldr	r0, [pc, #12]	@ (8007438 <CDC_Init_FS+0x20>)
 800742a:	f7fe fc7b 	bl	8005d24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800742e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007430:	4618      	mov	r0, r3
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20000514 	.word	0x20000514
 8007438:	200001f8 	.word	0x200001f8
 800743c:	200004d4 	.word	0x200004d4

08007440 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007444:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007446:	4618      	mov	r0, r3
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	6039      	str	r1, [r7, #0]
 800745a:	71fb      	strb	r3, [r7, #7]
 800745c:	4613      	mov	r3, r2
 800745e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	2b23      	cmp	r3, #35	@ 0x23
 8007464:	d84a      	bhi.n	80074fc <CDC_Control_FS+0xac>
 8007466:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <CDC_Control_FS+0x1c>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	080074fd 	.word	0x080074fd
 8007470:	080074fd 	.word	0x080074fd
 8007474:	080074fd 	.word	0x080074fd
 8007478:	080074fd 	.word	0x080074fd
 800747c:	080074fd 	.word	0x080074fd
 8007480:	080074fd 	.word	0x080074fd
 8007484:	080074fd 	.word	0x080074fd
 8007488:	080074fd 	.word	0x080074fd
 800748c:	080074fd 	.word	0x080074fd
 8007490:	080074fd 	.word	0x080074fd
 8007494:	080074fd 	.word	0x080074fd
 8007498:	080074fd 	.word	0x080074fd
 800749c:	080074fd 	.word	0x080074fd
 80074a0:	080074fd 	.word	0x080074fd
 80074a4:	080074fd 	.word	0x080074fd
 80074a8:	080074fd 	.word	0x080074fd
 80074ac:	080074fd 	.word	0x080074fd
 80074b0:	080074fd 	.word	0x080074fd
 80074b4:	080074fd 	.word	0x080074fd
 80074b8:	080074fd 	.word	0x080074fd
 80074bc:	080074fd 	.word	0x080074fd
 80074c0:	080074fd 	.word	0x080074fd
 80074c4:	080074fd 	.word	0x080074fd
 80074c8:	080074fd 	.word	0x080074fd
 80074cc:	080074fd 	.word	0x080074fd
 80074d0:	080074fd 	.word	0x080074fd
 80074d4:	080074fd 	.word	0x080074fd
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	080074fd 	.word	0x080074fd
 80074e0:	080074fd 	.word	0x080074fd
 80074e4:	080074fd 	.word	0x080074fd
 80074e8:	080074fd 	.word	0x080074fd
 80074ec:	080074fd 	.word	0x080074fd
 80074f0:	080074fd 	.word	0x080074fd
 80074f4:	080074fd 	.word	0x080074fd
 80074f8:	080074fd 	.word	0x080074fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80074fc:	bf00      	nop
  }

  return (USBD_OK);
 80074fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4805      	ldr	r0, [pc, #20]	@ (8007530 <CDC_Receive_FS+0x24>)
 800751a:	f7fe fc03 	bl	8005d24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800751e:	4804      	ldr	r0, [pc, #16]	@ (8007530 <CDC_Receive_FS+0x24>)
 8007520:	f7fe fc1e 	bl	8005d60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007524:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	200001f8 	.word	0x200001f8

08007534 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007546:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800754a:	4618      	mov	r0, r3
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	6039      	str	r1, [r7, #0]
 8007562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2212      	movs	r2, #18
 8007568:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800756a:	4b03      	ldr	r3, [pc, #12]	@ (8007578 <USBD_FS_DeviceDescriptor+0x20>)
}
 800756c:	4618      	mov	r0, r3
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	200000c8 	.word	0x200000c8

0800757c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	6039      	str	r1, [r7, #0]
 8007586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2204      	movs	r2, #4
 800758c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800758e:	4b03      	ldr	r3, [pc, #12]	@ (800759c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	200000dc 	.word	0x200000dc

080075a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d105      	bne.n	80075be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	4907      	ldr	r1, [pc, #28]	@ (80075d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80075b6:	4808      	ldr	r0, [pc, #32]	@ (80075d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80075b8:	f7ff fe1e 	bl	80071f8 <USBD_GetString>
 80075bc:	e004      	b.n	80075c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	4904      	ldr	r1, [pc, #16]	@ (80075d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80075c2:	4805      	ldr	r0, [pc, #20]	@ (80075d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80075c4:	f7ff fe18 	bl	80071f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075c8:	4b02      	ldr	r3, [pc, #8]	@ (80075d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20000d14 	.word	0x20000d14
 80075d8:	08007dfc 	.word	0x08007dfc

080075dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	4904      	ldr	r1, [pc, #16]	@ (80075fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075ec:	4804      	ldr	r0, [pc, #16]	@ (8007600 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075ee:	f7ff fe03 	bl	80071f8 <USBD_GetString>
  return USBD_StrDesc;
 80075f2:	4b02      	ldr	r3, [pc, #8]	@ (80075fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000d14 	.word	0x20000d14
 8007600:	08007e14 	.word	0x08007e14

08007604 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	6039      	str	r1, [r7, #0]
 800760e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	221a      	movs	r2, #26
 8007614:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007616:	f000 f843 	bl	80076a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800761a:	4b02      	ldr	r3, [pc, #8]	@ (8007624 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	200000e0 	.word	0x200000e0

08007628 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	4907      	ldr	r1, [pc, #28]	@ (800765c <USBD_FS_ConfigStrDescriptor+0x34>)
 800763e:	4808      	ldr	r0, [pc, #32]	@ (8007660 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007640:	f7ff fdda 	bl	80071f8 <USBD_GetString>
 8007644:	e004      	b.n	8007650 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4904      	ldr	r1, [pc, #16]	@ (800765c <USBD_FS_ConfigStrDescriptor+0x34>)
 800764a:	4805      	ldr	r0, [pc, #20]	@ (8007660 <USBD_FS_ConfigStrDescriptor+0x38>)
 800764c:	f7ff fdd4 	bl	80071f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007650:	4b02      	ldr	r3, [pc, #8]	@ (800765c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000d14 	.word	0x20000d14
 8007660:	08007e28 	.word	0x08007e28

08007664 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	6039      	str	r1, [r7, #0]
 800766e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d105      	bne.n	8007682 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	4907      	ldr	r1, [pc, #28]	@ (8007698 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800767a:	4808      	ldr	r0, [pc, #32]	@ (800769c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800767c:	f7ff fdbc 	bl	80071f8 <USBD_GetString>
 8007680:	e004      	b.n	800768c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	4904      	ldr	r1, [pc, #16]	@ (8007698 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007686:	4805      	ldr	r0, [pc, #20]	@ (800769c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007688:	f7ff fdb6 	bl	80071f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800768c:	4b02      	ldr	r3, [pc, #8]	@ (8007698 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000d14 	.word	0x20000d14
 800769c:	08007e34 	.word	0x08007e34

080076a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076a6:	4b0f      	ldr	r3, [pc, #60]	@ (80076e4 <Get_SerialNum+0x44>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076ac:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <Get_SerialNum+0x48>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076b2:	4b0e      	ldr	r3, [pc, #56]	@ (80076ec <Get_SerialNum+0x4c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076c6:	2208      	movs	r2, #8
 80076c8:	4909      	ldr	r1, [pc, #36]	@ (80076f0 <Get_SerialNum+0x50>)
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f814 	bl	80076f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076d0:	2204      	movs	r2, #4
 80076d2:	4908      	ldr	r1, [pc, #32]	@ (80076f4 <Get_SerialNum+0x54>)
 80076d4:	68b8      	ldr	r0, [r7, #8]
 80076d6:	f000 f80f 	bl	80076f8 <IntToUnicode>
  }
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	1fff7a10 	.word	0x1fff7a10
 80076e8:	1fff7a14 	.word	0x1fff7a14
 80076ec:	1fff7a18 	.word	0x1fff7a18
 80076f0:	200000e2 	.word	0x200000e2
 80076f4:	200000f2 	.word	0x200000f2

080076f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4613      	mov	r3, r2
 8007704:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800770a:	2300      	movs	r3, #0
 800770c:	75fb      	strb	r3, [r7, #23]
 800770e:	e027      	b.n	8007760 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	0f1b      	lsrs	r3, r3, #28
 8007714:	2b09      	cmp	r3, #9
 8007716:	d80b      	bhi.n	8007730 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	0f1b      	lsrs	r3, r3, #28
 800771c:	b2da      	uxtb	r2, r3
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	4619      	mov	r1, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	440b      	add	r3, r1
 8007728:	3230      	adds	r2, #48	@ 0x30
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	e00a      	b.n	8007746 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	0f1b      	lsrs	r3, r3, #28
 8007734:	b2da      	uxtb	r2, r3
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	4619      	mov	r1, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	440b      	add	r3, r1
 8007740:	3237      	adds	r2, #55	@ 0x37
 8007742:	b2d2      	uxtb	r2, r2
 8007744:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	3301      	adds	r3, #1
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	4413      	add	r3, r2
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	3301      	adds	r3, #1
 800775e:	75fb      	strb	r3, [r7, #23]
 8007760:	7dfa      	ldrb	r2, [r7, #23]
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	429a      	cmp	r2, r3
 8007766:	d3d3      	bcc.n	8007710 <IntToUnicode+0x18>
  }
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
	...

08007778 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	@ 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007780:	f107 0314 	add.w	r3, r7, #20
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	605a      	str	r2, [r3, #4]
 800778a:	609a      	str	r2, [r3, #8]
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007798:	d13a      	bne.n	8007810 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	4b1e      	ldr	r3, [pc, #120]	@ (8007818 <HAL_PCD_MspInit+0xa0>)
 80077a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007818 <HAL_PCD_MspInit+0xa0>)
 80077a4:	f043 0301 	orr.w	r3, r3, #1
 80077a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80077aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007818 <HAL_PCD_MspInit+0xa0>)
 80077ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80077ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077bc:	2302      	movs	r3, #2
 80077be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077c4:	2303      	movs	r3, #3
 80077c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077c8:	230a      	movs	r3, #10
 80077ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077cc:	f107 0314 	add.w	r3, r7, #20
 80077d0:	4619      	mov	r1, r3
 80077d2:	4812      	ldr	r0, [pc, #72]	@ (800781c <HAL_PCD_MspInit+0xa4>)
 80077d4:	f7f9 fe64 	bl	80014a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007818 <HAL_PCD_MspInit+0xa0>)
 80077da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077dc:	4a0e      	ldr	r2, [pc, #56]	@ (8007818 <HAL_PCD_MspInit+0xa0>)
 80077de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e2:	6353      	str	r3, [r2, #52]	@ 0x34
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007818 <HAL_PCD_MspInit+0xa0>)
 80077ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007818 <HAL_PCD_MspInit+0xa0>)
 80077ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80077f4:	4b08      	ldr	r3, [pc, #32]	@ (8007818 <HAL_PCD_MspInit+0xa0>)
 80077f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007800:	2200      	movs	r2, #0
 8007802:	2100      	movs	r1, #0
 8007804:	2043      	movs	r0, #67	@ 0x43
 8007806:	f7f9 fe14 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800780a:	2043      	movs	r0, #67	@ 0x43
 800780c:	f7f9 fe2d 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007810:	bf00      	nop
 8007812:	3728      	adds	r7, #40	@ 0x28
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40023800 	.word	0x40023800
 800781c:	40020000 	.word	0x40020000

08007820 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007834:	4619      	mov	r1, r3
 8007836:	4610      	mov	r0, r2
 8007838:	f7fe fb7b 	bl	8005f32 <USBD_LL_SetupStage>
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	6879      	ldr	r1, [r7, #4]
 800785a:	4613      	mov	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	440b      	add	r3, r1
 8007864:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	4619      	mov	r1, r3
 800786e:	f7fe fbb5 	bl	8005fdc <USBD_LL_DataOutStage>
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800788c:	78fa      	ldrb	r2, [r7, #3]
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	4613      	mov	r3, r2
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	3320      	adds	r3, #32
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	4619      	mov	r1, r3
 80078a2:	f7fe fc4e 	bl	8006142 <USBD_LL_DataInStage>
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fd88 	bl	80063d2 <USBD_LL_SOF>
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078d2:	2301      	movs	r3, #1
 80078d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	79db      	ldrb	r3, [r3, #7]
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d001      	beq.n	80078e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078de:	f7f9 f825 	bl	800092c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078e8:	7bfa      	ldrb	r2, [r7, #15]
 80078ea:	4611      	mov	r1, r2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fd2c 	bl	800634a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fe fcd4 	bl	80062a6 <USBD_LL_Reset>
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe fd27 	bl	800636a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800792e:	f043 0301 	orr.w	r3, r3, #1
 8007932:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7adb      	ldrb	r3, [r3, #11]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800793c:	4b04      	ldr	r3, [pc, #16]	@ (8007950 <HAL_PCD_SuspendCallback+0x48>)
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	4a03      	ldr	r2, [pc, #12]	@ (8007950 <HAL_PCD_SuspendCallback+0x48>)
 8007942:	f043 0306 	orr.w	r3, r3, #6
 8007946:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	e000ed00 	.word	0xe000ed00

08007954 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fd1d 	bl	80063a2 <USBD_LL_Resume>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	4611      	mov	r1, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fd75 	bl	8006476 <USBD_LL_IsoOUTIncomplete>
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079a6:	78fa      	ldrb	r2, [r7, #3]
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe fd31 	bl	8006412 <USBD_LL_IsoINIncomplete>
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fe fd87 	bl	80064da <USBD_LL_DevConnected>
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fe fd84 	bl	80064f0 <USBD_LL_DevDisconnected>
}
 80079e8:	bf00      	nop
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d13c      	bne.n	8007a7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a00:	4a20      	ldr	r2, [pc, #128]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a0c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a10:	4b1c      	ldr	r3, [pc, #112]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007a16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a18:	4b1a      	ldr	r3, [pc, #104]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a1a:	2204      	movs	r2, #4
 8007a1c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a1e:	4b19      	ldr	r3, [pc, #100]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a20:	2202      	movs	r2, #2
 8007a22:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a24:	4b17      	ldr	r3, [pc, #92]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a2a:	4b16      	ldr	r3, [pc, #88]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a30:	4b14      	ldr	r3, [pc, #80]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a36:	4b13      	ldr	r3, [pc, #76]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a3c:	4b11      	ldr	r3, [pc, #68]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a42:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a48:	4b0e      	ldr	r3, [pc, #56]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a4e:	480d      	ldr	r0, [pc, #52]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a50:	f7f9 feaa 	bl	80017a8 <HAL_PCD_Init>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a5a:	f7f8 ff67 	bl	800092c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a5e:	2180      	movs	r1, #128	@ 0x80
 8007a60:	4808      	ldr	r0, [pc, #32]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a62:	f7fb f8d4 	bl	8002c0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a66:	2240      	movs	r2, #64	@ 0x40
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4806      	ldr	r0, [pc, #24]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a6c:	f7fb f888 	bl	8002b80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a70:	2280      	movs	r2, #128	@ 0x80
 8007a72:	2101      	movs	r1, #1
 8007a74:	4803      	ldr	r0, [pc, #12]	@ (8007a84 <USBD_LL_Init+0x94>)
 8007a76:	f7fb f883 	bl	8002b80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20000f14 	.word	0x20000f14

08007a88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7f9 ff91 	bl	80019c6 <HAL_PCD_Start>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f942 	bl	8007d34 <USBD_Get_USB_Status>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	461a      	mov	r2, r3
 8007acc:	4603      	mov	r3, r0
 8007ace:	70fb      	strb	r3, [r7, #3]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70bb      	strb	r3, [r7, #2]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ae6:	78bb      	ldrb	r3, [r7, #2]
 8007ae8:	883a      	ldrh	r2, [r7, #0]
 8007aea:	78f9      	ldrb	r1, [r7, #3]
 8007aec:	f7fa fc65 	bl	80023ba <HAL_PCD_EP_Open>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f91c 	bl	8007d34 <USBD_Get_USB_Status>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b24:	78fa      	ldrb	r2, [r7, #3]
 8007b26:	4611      	mov	r1, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fa fcae 	bl	800248a <HAL_PCD_EP_Close>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 f8fd 	bl	8007d34 <USBD_Get_USB_Status>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fa fd66 	bl	8002638 <HAL_PCD_EP_SetStall>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 f8de 	bl	8007d34 <USBD_Get_USB_Status>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fa fdaa 	bl	80026fe <HAL_PCD_EP_ClrStall>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f8bf 	bl	8007d34 <USBD_Get_USB_Status>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	da0b      	bge.n	8007bf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	4613      	mov	r3, r2
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	3316      	adds	r3, #22
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	e00b      	b.n	8007c10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bfe:	68f9      	ldr	r1, [r7, #12]
 8007c00:	4613      	mov	r3, r2
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007c0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fa fb99 	bl	8002372 <HAL_PCD_SetAddress>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f874 	bl	8007d34 <USBD_Get_USB_Status>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b086      	sub	sp, #24
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
 8007c66:	460b      	mov	r3, r1
 8007c68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c78:	7af9      	ldrb	r1, [r7, #11]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	f7fa fca1 	bl	80025c4 <HAL_PCD_EP_Transmit>
 8007c82:	4603      	mov	r3, r0
 8007c84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 f853 	bl	8007d34 <USBD_Get_USB_Status>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c92:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	607a      	str	r2, [r7, #4]
 8007ca6:	603b      	str	r3, [r7, #0]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007cba:	7af9      	ldrb	r1, [r7, #11]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	f7fa fc2d 	bl	800251e <HAL_PCD_EP_Receive>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 f832 	bl	8007d34 <USBD_Get_USB_Status>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cd4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cf0:	78fa      	ldrb	r2, [r7, #3]
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fa fc4d 	bl	8002594 <HAL_PCD_EP_GetRxCount>
 8007cfa:	4603      	mov	r3, r0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d0c:	4b03      	ldr	r3, [pc, #12]	@ (8007d1c <USBD_static_malloc+0x18>)
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	200013f8 	.word	0x200013f8

08007d20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]

}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d817      	bhi.n	8007d78 <USBD_Get_USB_Status+0x44>
 8007d48:	a201      	add	r2, pc, #4	@ (adr r2, 8007d50 <USBD_Get_USB_Status+0x1c>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007d61 	.word	0x08007d61
 8007d54:	08007d67 	.word	0x08007d67
 8007d58:	08007d6d 	.word	0x08007d6d
 8007d5c:	08007d73 	.word	0x08007d73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
    break;
 8007d64:	e00b      	b.n	8007d7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d66:	2303      	movs	r3, #3
 8007d68:	73fb      	strb	r3, [r7, #15]
    break;
 8007d6a:	e008      	b.n	8007d7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d70:	e005      	b.n	8007d7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d72:	2303      	movs	r3, #3
 8007d74:	73fb      	strb	r3, [r7, #15]
    break;
 8007d76:	e002      	b.n	8007d7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d7c:	bf00      	nop
  }
  return usb_status;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <memset>:
 8007d8c:	4402      	add	r2, r0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d100      	bne.n	8007d96 <memset+0xa>
 8007d94:	4770      	bx	lr
 8007d96:	f803 1b01 	strb.w	r1, [r3], #1
 8007d9a:	e7f9      	b.n	8007d90 <memset+0x4>

08007d9c <__libc_init_array>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007dd4 <__libc_init_array+0x38>)
 8007da0:	4c0d      	ldr	r4, [pc, #52]	@ (8007dd8 <__libc_init_array+0x3c>)
 8007da2:	1b64      	subs	r4, r4, r5
 8007da4:	10a4      	asrs	r4, r4, #2
 8007da6:	2600      	movs	r6, #0
 8007da8:	42a6      	cmp	r6, r4
 8007daa:	d109      	bne.n	8007dc0 <__libc_init_array+0x24>
 8007dac:	4d0b      	ldr	r5, [pc, #44]	@ (8007ddc <__libc_init_array+0x40>)
 8007dae:	4c0c      	ldr	r4, [pc, #48]	@ (8007de0 <__libc_init_array+0x44>)
 8007db0:	f000 f818 	bl	8007de4 <_init>
 8007db4:	1b64      	subs	r4, r4, r5
 8007db6:	10a4      	asrs	r4, r4, #2
 8007db8:	2600      	movs	r6, #0
 8007dba:	42a6      	cmp	r6, r4
 8007dbc:	d105      	bne.n	8007dca <__libc_init_array+0x2e>
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}
 8007dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc4:	4798      	blx	r3
 8007dc6:	3601      	adds	r6, #1
 8007dc8:	e7ee      	b.n	8007da8 <__libc_init_array+0xc>
 8007dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dce:	4798      	blx	r3
 8007dd0:	3601      	adds	r6, #1
 8007dd2:	e7f2      	b.n	8007dba <__libc_init_array+0x1e>
 8007dd4:	08007e5c 	.word	0x08007e5c
 8007dd8:	08007e5c 	.word	0x08007e5c
 8007ddc:	08007e5c 	.word	0x08007e5c
 8007de0:	08007e60 	.word	0x08007e60

08007de4 <_init>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr

08007df0 <_fini>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	bf00      	nop
 8007df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df6:	bc08      	pop	{r3}
 8007df8:	469e      	mov	lr, r3
 8007dfa:	4770      	bx	lr
