
TFG-Brushless-ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008004  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800819c  0800819c  0000919c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081f4  080081f4  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  080081f4  080081f4  000091f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081fc  080081fc  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081fc  080081fc  000091fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008200  08008200  00009200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008204  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001520  200000fc  08008300  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000161c  08008300  0000a61c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013847  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032bf  00000000  00000000  0001d973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00020c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  00021e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a13e  00000000  00000000  00022b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015751  00000000  00000000  0003ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b7e2  00000000  00000000  00052421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edc03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a30  00000000  00000000  000edc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000f2678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008184 	.word	0x08008184

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008184 	.word	0x08008184

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <PWMSet>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PWMSet(mosfet_pins pin, uint16_t value)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	80bb      	strh	r3, [r7, #4]
    // TIM 3 Channel 2 - HI_V
    // TIM 3 Channel 3 - HI_W
    // TIM 1 Channel 3 - LO_U
    // TIM 1 Channel 2 - LO_V
    // TIM 1 Channel 1 - LO_W
	switch(pin)
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2b05      	cmp	r3, #5
 80004dc:	d82c      	bhi.n	8000538 <PWMSet+0x70>
 80004de:	a201      	add	r2, pc, #4	@ (adr r2, 80004e4 <PWMSet+0x1c>)
 80004e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e4:	080004fd 	.word	0x080004fd
 80004e8:	08000507 	.word	0x08000507
 80004ec:	08000511 	.word	0x08000511
 80004f0:	0800051b 	.word	0x0800051b
 80004f4:	08000525 	.word	0x08000525
 80004f8:	0800052f 	.word	0x0800052f
	{
	case HI_U:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 80004fc:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <PWMSet+0x80>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	88ba      	ldrh	r2, [r7, #4]
 8000502:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000504:	e019      	b.n	800053a <PWMSet+0x72>
	case HI_V:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, value);
 8000506:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <PWMSet+0x80>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	88ba      	ldrh	r2, [r7, #4]
 800050c:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 800050e:	e014      	b.n	800053a <PWMSet+0x72>
	case HI_W:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <PWMSet+0x80>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	88ba      	ldrh	r2, [r7, #4]
 8000516:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8000518:	e00f      	b.n	800053a <PWMSet+0x72>
	case LO_U:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, value);
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <PWMSet+0x84>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	88ba      	ldrh	r2, [r7, #4]
 8000520:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8000522:	e00a      	b.n	800053a <PWMSet+0x72>
	case LO_V:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value);
 8000524:	4b09      	ldr	r3, [pc, #36]	@ (800054c <PWMSet+0x84>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	88ba      	ldrh	r2, [r7, #4]
 800052a:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 800052c:	e005      	b.n	800053a <PWMSet+0x72>
	case LO_W:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, value);
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <PWMSet+0x84>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	88ba      	ldrh	r2, [r7, #4]
 8000534:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000536:	e000      	b.n	800053a <PWMSet+0x72>
	default:
		break;
 8000538:	bf00      	nop
	}
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200001a8 	.word	0x200001a8
 800054c:	20000160 	.word	0x20000160

08000550 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_1)
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d10f      	bne.n	8000580 <HAL_GPIO_EXTI_Callback+0x30>
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_SET)
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	4619      	mov	r1, r3
 8000564:	481b      	ldr	r0, [pc, #108]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x84>)
 8000566:	f001 fabf 	bl	8001ae8 <HAL_GPIO_ReadPin>
 800056a:	4603      	mov	r3, r0
 800056c:	2b01      	cmp	r3, #1
 800056e:	d103      	bne.n	8000578 <HAL_GPIO_EXTI_Callback+0x28>
		  Hall_U_State = 1;
 8000570:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_SET)
		  Hall_W_State = 1;
	  else
		  Hall_W_State = 0;
  }
}
 8000576:	e029      	b.n	80005cc <HAL_GPIO_EXTI_Callback+0x7c>
		  Hall_U_State = 0;
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <HAL_GPIO_EXTI_Callback+0x88>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
}
 800057e:	e025      	b.n	80005cc <HAL_GPIO_EXTI_Callback+0x7c>
  else if(GPIO_Pin == GPIO_PIN_2)
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	2b04      	cmp	r3, #4
 8000584:	d10f      	bne.n	80005a6 <HAL_GPIO_EXTI_Callback+0x56>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_SET)
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	4619      	mov	r1, r3
 800058a:	4812      	ldr	r0, [pc, #72]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x84>)
 800058c:	f001 faac 	bl	8001ae8 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	2b01      	cmp	r3, #1
 8000594:	d103      	bne.n	800059e <HAL_GPIO_EXTI_Callback+0x4e>
		  Hall_V_State = 1;
 8000596:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x8c>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
}
 800059c:	e016      	b.n	80005cc <HAL_GPIO_EXTI_Callback+0x7c>
		  Hall_V_State = 0;
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x8c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
}
 80005a4:	e012      	b.n	80005cc <HAL_GPIO_EXTI_Callback+0x7c>
  else if(GPIO_Pin == GPIO_PIN_10)
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005ac:	d10e      	bne.n	80005cc <HAL_GPIO_EXTI_Callback+0x7c>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_SET)
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	4619      	mov	r1, r3
 80005b2:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x84>)
 80005b4:	f001 fa98 	bl	8001ae8 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d103      	bne.n	80005c6 <HAL_GPIO_EXTI_Callback+0x76>
		  Hall_W_State = 1;
 80005be:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
}
 80005c4:	e002      	b.n	80005cc <HAL_GPIO_EXTI_Callback+0x7c>
		  Hall_W_State = 0;
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020400 	.word	0x40020400
 80005d8:	200001f0 	.word	0x200001f0
 80005dc:	200001f1 	.word	0x200001f1
 80005e0:	200001f2 	.word	0x200001f2

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fce0 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f8ee 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 fab4 	bl	8000b5c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005f4:	f007 f8b0 	bl	8007758 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80005f8:	f000 fa42 	bl	8000a80 <MX_TIM3_Init>
  MX_ADC1_Init();
 80005fc:	f000 f952 	bl	80008a4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000600:	f000 f9a2 	bl	8000948 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000604:	2100      	movs	r1, #0
 8000606:	486b      	ldr	r0, [pc, #428]	@ (80007b4 <main+0x1d0>)
 8000608:	f003 f96e 	bl	80038e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800060c:	2104      	movs	r1, #4
 800060e:	4869      	ldr	r0, [pc, #420]	@ (80007b4 <main+0x1d0>)
 8000610:	f003 f96a 	bl	80038e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000614:	2108      	movs	r1, #8
 8000616:	4867      	ldr	r0, [pc, #412]	@ (80007b4 <main+0x1d0>)
 8000618:	f003 f966 	bl	80038e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800061c:	2100      	movs	r1, #0
 800061e:	4866      	ldr	r0, [pc, #408]	@ (80007b8 <main+0x1d4>)
 8000620:	f003 f962 	bl	80038e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000624:	2104      	movs	r1, #4
 8000626:	4864      	ldr	r0, [pc, #400]	@ (80007b8 <main+0x1d4>)
 8000628:	f003 f95e 	bl	80038e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800062c:	2108      	movs	r1, #8
 800062e:	4862      	ldr	r0, [pc, #392]	@ (80007b8 <main+0x1d4>)
 8000630:	f003 f95a 	bl	80038e8 <HAL_TIM_PWM_Start>
    /* USER CODE BEGIN 3 */

	// U = Yellow
	// V = Blue
	// W = Green
	state = (Hall_U_State << 2) | (Hall_V_State << 1) | (Hall_W_State);
 8000634:	4b61      	ldr	r3, [pc, #388]	@ (80007bc <main+0x1d8>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	b25a      	sxtb	r2, r3
 800063c:	4b60      	ldr	r3, [pc, #384]	@ (80007c0 <main+0x1dc>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	b25b      	sxtb	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b25a      	sxtb	r2, r3
 8000648:	4b5e      	ldr	r3, [pc, #376]	@ (80007c4 <main+0x1e0>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b25b      	sxtb	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b25b      	sxtb	r3, r3
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b5c      	ldr	r3, [pc, #368]	@ (80007c8 <main+0x1e4>)
 8000656:	701a      	strb	r2, [r3, #0]

	switch(state)
 8000658:	4b5b      	ldr	r3, [pc, #364]	@ (80007c8 <main+0x1e4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3b01      	subs	r3, #1
 800065e:	2b05      	cmp	r3, #5
 8000660:	f200 80a6 	bhi.w	80007b0 <main+0x1cc>
 8000664:	a201      	add	r2, pc, #4	@ (adr r2, 800066c <main+0x88>)
 8000666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066a:	bf00      	nop
 800066c:	0800074d 	.word	0x0800074d
 8000670:	080006e9 	.word	0x080006e9
 8000674:	0800071b 	.word	0x0800071b
 8000678:	08000685 	.word	0x08000685
 800067c:	0800077f 	.word	0x0800077f
 8000680:	080006b7 	.word	0x080006b7
	{
	case 0b100:// Rotor facing
		PWMSet(HI_U, 0);
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f7ff ff1e 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 0);
 800068c:	2100      	movs	r1, #0
 800068e:	2003      	movs	r0, #3
 8000690:	f7ff ff1a 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, 127);
 8000694:	217f      	movs	r1, #127	@ 0x7f
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ff16 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 0);
 800069c:	2100      	movs	r1, #0
 800069e:	2004      	movs	r0, #4
 80006a0:	f7ff ff12 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, 0);
 80006a4:	2100      	movs	r1, #0
 80006a6:	2002      	movs	r0, #2
 80006a8:	f7ff ff0e 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 127);
 80006ac:	217f      	movs	r1, #127	@ 0x7f
 80006ae:	2005      	movs	r0, #5
 80006b0:	f7ff ff0a 	bl	80004c8 <PWMSet>
		break;
 80006b4:	e07d      	b.n	80007b2 <main+0x1ce>
	case 0b110:
		PWMSet(HI_U, 0);
 80006b6:	2100      	movs	r1, #0
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff ff05 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 127);
 80006be:	217f      	movs	r1, #127	@ 0x7f
 80006c0:	2003      	movs	r0, #3
 80006c2:	f7ff ff01 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, 127);
 80006c6:	217f      	movs	r1, #127	@ 0x7f
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff fefd 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 0);
 80006ce:	2100      	movs	r1, #0
 80006d0:	2004      	movs	r0, #4
 80006d2:	f7ff fef9 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, 0);
 80006d6:	2100      	movs	r1, #0
 80006d8:	2002      	movs	r0, #2
 80006da:	f7ff fef5 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2005      	movs	r0, #5
 80006e2:	f7ff fef1 	bl	80004c8 <PWMSet>
		break;
 80006e6:	e064      	b.n	80007b2 <main+0x1ce>
	case 0b010:
		PWMSet(HI_U, 0);
 80006e8:	2100      	movs	r1, #0
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff feec 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 127);
 80006f0:	217f      	movs	r1, #127	@ 0x7f
 80006f2:	2003      	movs	r0, #3
 80006f4:	f7ff fee8 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, 0);
 80006f8:	2100      	movs	r1, #0
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fee4 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 0);
 8000700:	2100      	movs	r1, #0
 8000702:	2004      	movs	r0, #4
 8000704:	f7ff fee0 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, 127);
 8000708:	217f      	movs	r1, #127	@ 0x7f
 800070a:	2002      	movs	r0, #2
 800070c:	f7ff fedc 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 0);
 8000710:	2100      	movs	r1, #0
 8000712:	2005      	movs	r0, #5
 8000714:	f7ff fed8 	bl	80004c8 <PWMSet>
		break;
 8000718:	e04b      	b.n	80007b2 <main+0x1ce>
	case 0b011:
		PWMSet(HI_U, 0);
 800071a:	2100      	movs	r1, #0
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff fed3 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 0);
 8000722:	2100      	movs	r1, #0
 8000724:	2003      	movs	r0, #3
 8000726:	f7ff fecf 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, 0);
 800072a:	2100      	movs	r1, #0
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff fecb 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 127);
 8000732:	217f      	movs	r1, #127	@ 0x7f
 8000734:	2004      	movs	r0, #4
 8000736:	f7ff fec7 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, 127);
 800073a:	217f      	movs	r1, #127	@ 0x7f
 800073c:	2002      	movs	r0, #2
 800073e:	f7ff fec3 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 0);
 8000742:	2100      	movs	r1, #0
 8000744:	2005      	movs	r0, #5
 8000746:	f7ff febf 	bl	80004c8 <PWMSet>
		break;
 800074a:	e032      	b.n	80007b2 <main+0x1ce>
	case 0b001:
		PWMSet(HI_U, 127);
 800074c:	217f      	movs	r1, #127	@ 0x7f
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff feba 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 0);
 8000754:	2100      	movs	r1, #0
 8000756:	2003      	movs	r0, #3
 8000758:	f7ff feb6 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff feb2 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 127);
 8000764:	217f      	movs	r1, #127	@ 0x7f
 8000766:	2004      	movs	r0, #4
 8000768:	f7ff feae 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, 0);
 800076c:	2100      	movs	r1, #0
 800076e:	2002      	movs	r0, #2
 8000770:	f7ff feaa 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 0);
 8000774:	2100      	movs	r1, #0
 8000776:	2005      	movs	r0, #5
 8000778:	f7ff fea6 	bl	80004c8 <PWMSet>
		break;
 800077c:	e019      	b.n	80007b2 <main+0x1ce>
	case 0b101:
		PWMSet(HI_U, 127);
 800077e:	217f      	movs	r1, #127	@ 0x7f
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff fea1 	bl	80004c8 <PWMSet>
		PWMSet(LO_U, 0);
 8000786:	2100      	movs	r1, #0
 8000788:	2003      	movs	r0, #3
 800078a:	f7ff fe9d 	bl	80004c8 <PWMSet>
		PWMSet(HI_V, 0);
 800078e:	2100      	movs	r1, #0
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff fe99 	bl	80004c8 <PWMSet>
		PWMSet(LO_V, 0);
 8000796:	2100      	movs	r1, #0
 8000798:	2004      	movs	r0, #4
 800079a:	f7ff fe95 	bl	80004c8 <PWMSet>
		PWMSet(HI_W, 0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2002      	movs	r0, #2
 80007a2:	f7ff fe91 	bl	80004c8 <PWMSet>
		PWMSet(LO_W, 127);
 80007a6:	217f      	movs	r1, #127	@ 0x7f
 80007a8:	2005      	movs	r0, #5
 80007aa:	f7ff fe8d 	bl	80004c8 <PWMSet>
		break;
 80007ae:	e000      	b.n	80007b2 <main+0x1ce>
	default:
		break;
 80007b0:	bf00      	nop
	state = (Hall_U_State << 2) | (Hall_V_State << 1) | (Hall_W_State);
 80007b2:	e73f      	b.n	8000634 <main+0x50>
 80007b4:	20000160 	.word	0x20000160
 80007b8:	200001a8 	.word	0x200001a8
 80007bc:	200001f0 	.word	0x200001f0
 80007c0:	200001f1 	.word	0x200001f1
 80007c4:	200001f2 	.word	0x200001f2
 80007c8:	200001f3 	.word	0x200001f3

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	@ 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2230      	movs	r2, #48	@ 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f007 fca6 	bl	800812c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	4b29      	ldr	r3, [pc, #164]	@ (800089c <SystemClock_Config+0xd0>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a28      	ldr	r2, [pc, #160]	@ (800089c <SystemClock_Config+0xd0>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	4b26      	ldr	r3, [pc, #152]	@ (800089c <SystemClock_Config+0xd0>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <SystemClock_Config+0xd4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a22      	ldr	r2, [pc, #136]	@ (80008a0 <SystemClock_Config+0xd4>)
 8000816:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <SystemClock_Config+0xd4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000828:	2303      	movs	r3, #3
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000832:	2301      	movs	r3, #1
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000836:	2310      	movs	r3, #16
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000844:	2319      	movs	r3, #25
 8000846:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000848:	2390      	movs	r3, #144	@ 0x90
 800084a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800084c:	2306      	movs	r3, #6
 800084e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000850:	2303      	movs	r3, #3
 8000852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f002 fbc5 	bl	8002fe8 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000864:	f000 f9ec 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fe27 	bl	80034d8 <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000890:	f000 f9d6 	bl	8000c40 <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	3750      	adds	r7, #80	@ 0x50
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008b6:	4b21      	ldr	r3, [pc, #132]	@ (800093c <MX_ADC1_Init+0x98>)
 80008b8:	4a21      	ldr	r2, [pc, #132]	@ (8000940 <MX_ADC1_Init+0x9c>)
 80008ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <MX_ADC1_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c2:	4b1e      	ldr	r3, [pc, #120]	@ (800093c <MX_ADC1_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008c8:	4b1c      	ldr	r3, [pc, #112]	@ (800093c <MX_ADC1_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_ADC1_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d4:	4b19      	ldr	r3, [pc, #100]	@ (800093c <MX_ADC1_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008dc:	4b17      	ldr	r3, [pc, #92]	@ (800093c <MX_ADC1_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e2:	4b16      	ldr	r3, [pc, #88]	@ (800093c <MX_ADC1_Init+0x98>)
 80008e4:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <MX_ADC1_Init+0xa0>)
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_ADC1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_ADC1_Init+0x98>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_ADC1_Init+0x98>)
 80008fe:	2201      	movs	r2, #1
 8000900:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000902:	480e      	ldr	r0, [pc, #56]	@ (800093c <MX_ADC1_Init+0x98>)
 8000904:	f000 fbe8 	bl	80010d8 <HAL_ADC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 f997 	bl	8000c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000912:	2305      	movs	r3, #5
 8000914:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	@ (800093c <MX_ADC1_Init+0x98>)
 8000924:	f000 fc1c 	bl	8001160 <HAL_ADC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800092e:	f000 f987 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000118 	.word	0x20000118
 8000940:	40012000 	.word	0x40012000
 8000944:	0f000001 	.word	0x0f000001

08000948 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b092      	sub	sp, #72	@ 0x48
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
 8000968:	615a      	str	r2, [r3, #20]
 800096a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2220      	movs	r2, #32
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f007 fbda 	bl	800812c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000978:	4b3f      	ldr	r3, [pc, #252]	@ (8000a78 <MX_TIM1_Init+0x130>)
 800097a:	4a40      	ldr	r2, [pc, #256]	@ (8000a7c <MX_TIM1_Init+0x134>)
 800097c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 250;
 800097e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a78 <MX_TIM1_Init+0x130>)
 8000980:	22fa      	movs	r2, #250	@ 0xfa
 8000982:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b3c      	ldr	r3, [pc, #240]	@ (8000a78 <MX_TIM1_Init+0x130>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800098a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a78 <MX_TIM1_Init+0x130>)
 800098c:	22ff      	movs	r2, #255	@ 0xff
 800098e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b39      	ldr	r3, [pc, #228]	@ (8000a78 <MX_TIM1_Init+0x130>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000996:	4b38      	ldr	r3, [pc, #224]	@ (8000a78 <MX_TIM1_Init+0x130>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099c:	4b36      	ldr	r3, [pc, #216]	@ (8000a78 <MX_TIM1_Init+0x130>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a2:	4835      	ldr	r0, [pc, #212]	@ (8000a78 <MX_TIM1_Init+0x130>)
 80009a4:	f002 ff50 	bl	8003848 <HAL_TIM_PWM_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80009ae:	f000 f947 	bl	8000c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009be:	4619      	mov	r1, r3
 80009c0:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <MX_TIM1_Init+0x130>)
 80009c2:	f003 fb41 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80009cc:	f000 f938 	bl	8000c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d0:	2360      	movs	r3, #96	@ 0x60
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 127;
 80009d4:	237f      	movs	r3, #127	@ 0x7f
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f0:	2200      	movs	r2, #0
 80009f2:	4619      	mov	r1, r3
 80009f4:	4820      	ldr	r0, [pc, #128]	@ (8000a78 <MX_TIM1_Init+0x130>)
 80009f6:	f003 f827 	bl	8003a48 <HAL_TIM_PWM_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a00:	f000 f91e 	bl	8000c40 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4819      	ldr	r0, [pc, #100]	@ (8000a78 <MX_TIM1_Init+0x130>)
 8000a12:	f003 f819 	bl	8003a48 <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000a1c:	f000 f910 	bl	8000c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a24:	2208      	movs	r2, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	4813      	ldr	r0, [pc, #76]	@ (8000a78 <MX_TIM1_Init+0x130>)
 8000a2a:	f003 f80d 	bl	8003a48 <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000a34:	f000 f904 	bl	8000c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4807      	ldr	r0, [pc, #28]	@ (8000a78 <MX_TIM1_Init+0x130>)
 8000a5c:	f003 fb62 	bl	8004124 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000a66:	f000 f8eb 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a6a:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <MX_TIM1_Init+0x130>)
 8000a6c:	f000 f992 	bl	8000d94 <HAL_TIM_MspPostInit>

}
 8000a70:	bf00      	nop
 8000a72:	3748      	adds	r7, #72	@ 0x48
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000160 	.word	0x20000160
 8000a7c:	40010000 	.word	0x40010000

08000a80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8000b58 <MX_TIM3_Init+0xd8>)
 8000aa6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 250;
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000aaa:	22fa      	movs	r2, #250	@ 0xfa
 8000aac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000ab4:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000ab6:	22ff      	movs	r2, #255	@ 0xff
 8000ab8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ac6:	4823      	ldr	r0, [pc, #140]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000ac8:	f002 febe 	bl	8003848 <HAL_TIM_PWM_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000ad2:	f000 f8b5 	bl	8000c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481b      	ldr	r0, [pc, #108]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000ae6:	f003 faaf 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000af0:	f000 f8a6 	bl	8000c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af4:	2360      	movs	r3, #96	@ 0x60
 8000af6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4812      	ldr	r0, [pc, #72]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000b0c:	f002 ff9c 	bl	8003a48 <HAL_TIM_PWM_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b16:	f000 f893 	bl	8000c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000b22:	f002 ff91 	bl	8003a48 <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b2c:	f000 f888 	bl	8000c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2208      	movs	r2, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	4807      	ldr	r0, [pc, #28]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000b38:	f002 ff86 	bl	8003a48 <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8000b42:	f000 f87d 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b46:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <MX_TIM3_Init+0xd4>)
 8000b48:	f000 f924 	bl	8000d94 <HAL_TIM_MspPostInit>

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200001a8 	.word	0x200001a8
 8000b58:	40000400 	.word	0x40000400

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b30      	ldr	r3, [pc, #192]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b2d      	ldr	r3, [pc, #180]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a28      	ldr	r2, [pc, #160]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a1a      	ldr	r2, [pc, #104]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_GPIO_Init+0xdc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Hall_U_Pin Hall_V_Pin Hall_W_Pin */
  GPIO_InitStruct.Pin = Hall_U_Pin|Hall_V_Pin|Hall_W_Pin;
 8000be2:	f240 4306 	movw	r3, #1030	@ 0x406
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000be8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4810      	ldr	r0, [pc, #64]	@ (8000c3c <MX_GPIO_Init+0xe0>)
 8000bfa:	f000 fdf1 	bl	80017e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2007      	movs	r0, #7
 8000c04:	f000 fdb5 	bl	8001772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c08:	2007      	movs	r0, #7
 8000c0a:	f000 fdce 	bl	80017aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2008      	movs	r0, #8
 8000c14:	f000 fdad 	bl	8001772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c18:	2008      	movs	r0, #8
 8000c1a:	f000 fdc6 	bl	80017aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2028      	movs	r0, #40	@ 0x28
 8000c24:	f000 fda5 	bl	8001772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c28:	2028      	movs	r0, #40	@ 0x28
 8000c2a:	f000 fdbe 	bl	80017aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <Error_Handler+0x8>

08000c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a17      	ldr	r2, [pc, #92]	@ (8000d18 <HAL_ADC_MspInit+0x7c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d127      	bne.n	8000d0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a15      	ldr	r2, [pc, #84]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <HAL_ADC_MspInit+0x80>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = I_SENSE_U_Pin|I_SENSE_V_Pin|I_SENSE_W_Pin|V_SENSE_U_Pin
 8000cf6:	233f      	movs	r3, #63	@ 0x3f
 8000cf8:	617b      	str	r3, [r7, #20]
                          |V_SENSE_V_Pin|V_SENSE_W_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <HAL_ADC_MspInit+0x84>)
 8000d0a:	f000 fd69 	bl	80017e0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	@ 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40012000 	.word	0x40012000
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a15      	ldr	r2, [pc, #84]	@ (8000d88 <HAL_TIM_PWM_MspInit+0x64>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d10e      	bne.n	8000d54 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x68>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a13      	ldr	r2, [pc, #76]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x68>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x68>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d52:	e012      	b.n	8000d7a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <HAL_TIM_PWM_MspInit+0x6c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d10d      	bne.n	8000d7a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x68>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a09      	ldr	r2, [pc, #36]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x68>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <HAL_TIM_PWM_MspInit+0x68>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40000400 	.word	0x40000400

08000d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a33      	ldr	r2, [pc, #204]	@ (8000e80 <HAL_TIM_MspPostInit+0xec>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d11f      	bne.n	8000df6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <HAL_TIM_MspPostInit+0xf0>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a31      	ldr	r2, [pc, #196]	@ (8000e84 <HAL_TIM_MspPostInit+0xf0>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <HAL_TIM_MspPostInit+0xf0>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LO_W_Pin|LO_V_Pin|LO_U_Pin;
 8000dd2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4826      	ldr	r0, [pc, #152]	@ (8000e88 <HAL_TIM_MspPostInit+0xf4>)
 8000df0:	f000 fcf6 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000df4:	e040      	b.n	8000e78 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a24      	ldr	r2, [pc, #144]	@ (8000e8c <HAL_TIM_MspPostInit+0xf8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d13b      	bne.n	8000e78 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <HAL_TIM_MspPostInit+0xf0>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	4a1e      	ldr	r2, [pc, #120]	@ (8000e84 <HAL_TIM_MspPostInit+0xf0>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e10:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <HAL_TIM_MspPostInit+0xf0>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <HAL_TIM_MspPostInit+0xf0>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <HAL_TIM_MspPostInit+0xf0>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2c:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <HAL_TIM_MspPostInit+0xf0>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HI_U_Pin|HI_V_Pin;
 8000e38:	23c0      	movs	r3, #192	@ 0xc0
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <HAL_TIM_MspPostInit+0xf4>)
 8000e54:	f000 fcc4 	bl	80017e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HI_W_Pin;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HI_W_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <HAL_TIM_MspPostInit+0xfc>)
 8000e74:	f000 fcb4 	bl	80017e0 <HAL_GPIO_Init>
}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	@ 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40010000 	.word	0x40010000
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40020400 	.word	0x40020400

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eea:	f000 f8b1 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Hall_U_Pin);
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f000 fe0e 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Hall_V_Pin);
 8000f04:	2004      	movs	r0, #4
 8000f06:	f000 fe07 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Hall_W_Pin);
 8000f12:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f16:	f000 fdff 	bl	8001b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <OTG_FS_IRQHandler+0x10>)
 8000f26:	f000 ff53 	bl	8001dd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000f18 	.word	0x20000f18

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f5c:	f7ff ffea 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f62:	490d      	ldr	r1, [pc, #52]	@ (8000f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f78:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f86:	f007 f8d9 	bl	800813c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fb2b 	bl	80005e4 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8000f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000f9c:	08008204 	.word	0x08008204
  ldr r2, =_sbss
 8000fa0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000fa4:	2000161c 	.word	0x2000161c

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	@ (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 fbc1 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe34 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fbd9 	bl	80017c6 <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800102c:	f000 fba1 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	@ (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	200001f4 	.word	0x200001f4

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200001f4 	.word	0x200001f4

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e033      	b.n	8001156 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fdd0 	bl	8000c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800111e:	f023 0302 	bic.w	r3, r3, #2
 8001122:	f043 0202 	orr.w	r2, r3, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f94a 	bl	80013c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f023 0303 	bic.w	r3, r3, #3
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	641a      	str	r2, [r3, #64]	@ 0x40
 8001146:	e001      	b.n	800114c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_ADC_ConfigChannel+0x1c>
 8001178:	2302      	movs	r3, #2
 800117a:	e113      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x244>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b09      	cmp	r3, #9
 800118a:	d925      	bls.n	80011d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68d9      	ldr	r1, [r3, #12]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	3b1e      	subs	r3, #30
 80011a2:	2207      	movs	r2, #7
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43da      	mvns	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	400a      	ands	r2, r1
 80011b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68d9      	ldr	r1, [r3, #12]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	4603      	mov	r3, r0
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4403      	add	r3, r0
 80011ca:	3b1e      	subs	r3, #30
 80011cc:	409a      	lsls	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	e022      	b.n	800121e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6919      	ldr	r1, [r3, #16]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	2207      	movs	r2, #7
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	400a      	ands	r2, r1
 80011fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6919      	ldr	r1, [r3, #16]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	4618      	mov	r0, r3
 800120e:	4603      	mov	r3, r0
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4403      	add	r3, r0
 8001214:	409a      	lsls	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b06      	cmp	r3, #6
 8001224:	d824      	bhi.n	8001270 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b05      	subs	r3, #5
 8001238:	221f      	movs	r2, #31
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b05      	subs	r3, #5
 8001262:	fa00 f203 	lsl.w	r2, r0, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	635a      	str	r2, [r3, #52]	@ 0x34
 800126e:	e04c      	b.n	800130a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b0c      	cmp	r3, #12
 8001276:	d824      	bhi.n	80012c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	3b23      	subs	r3, #35	@ 0x23
 800128a:	221f      	movs	r2, #31
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43da      	mvns	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	400a      	ands	r2, r1
 8001298:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	3b23      	subs	r3, #35	@ 0x23
 80012b4:	fa00 f203 	lsl.w	r2, r0, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	631a      	str	r2, [r3, #48]	@ 0x30
 80012c0:	e023      	b.n	800130a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	3b41      	subs	r3, #65	@ 0x41
 80012d4:	221f      	movs	r2, #31
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	400a      	ands	r2, r1
 80012e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	3b41      	subs	r3, #65	@ 0x41
 80012fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800130a:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <HAL_ADC_ConfigChannel+0x250>)
 800130c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a28      	ldr	r2, [pc, #160]	@ (80013b4 <HAL_ADC_ConfigChannel+0x254>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d10f      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1d8>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b12      	cmp	r3, #18
 800131e:	d10b      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1d      	ldr	r2, [pc, #116]	@ (80013b4 <HAL_ADC_ConfigChannel+0x254>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12b      	bne.n	800139a <HAL_ADC_ConfigChannel+0x23a>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <HAL_ADC_ConfigChannel+0x258>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d003      	beq.n	8001354 <HAL_ADC_ConfigChannel+0x1f4>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b11      	cmp	r3, #17
 8001352:	d122      	bne.n	800139a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a11      	ldr	r2, [pc, #68]	@ (80013b8 <HAL_ADC_ConfigChannel+0x258>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d111      	bne.n	800139a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_ADC_ConfigChannel+0x25c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a11      	ldr	r2, [pc, #68]	@ (80013c0 <HAL_ADC_ConfigChannel+0x260>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	0c9a      	lsrs	r2, r3, #18
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800138c:	e002      	b.n	8001394 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3b01      	subs	r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f9      	bne.n	800138e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40012300 	.word	0x40012300
 80013b4:	40012000 	.word	0x40012000
 80013b8:	10000012 	.word	0x10000012
 80013bc:	20000000 	.word	0x20000000
 80013c0:	431bde83 	.word	0x431bde83

080013c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013cc:	4b79      	ldr	r3, [pc, #484]	@ (80015b4 <ADC_Init+0x1f0>)
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6859      	ldr	r1, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	021a      	lsls	r2, r3, #8
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800141c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800143e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6899      	ldr	r1, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001456:	4a58      	ldr	r2, [pc, #352]	@ (80015b8 <ADC_Init+0x1f4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d022      	beq.n	80014a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800146a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6899      	ldr	r1, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800148c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6899      	ldr	r1, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	e00f      	b.n	80014c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0202 	bic.w	r2, r2, #2
 80014d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6899      	ldr	r1, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7e1b      	ldrb	r3, [r3, #24]
 80014dc:	005a      	lsls	r2, r3, #1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01b      	beq.n	8001528 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800150e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6859      	ldr	r1, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	3b01      	subs	r3, #1
 800151c:	035a      	lsls	r2, r3, #13
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	e007      	b.n	8001538 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001536:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001546:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	3b01      	subs	r3, #1
 8001554:	051a      	lsls	r2, r3, #20
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800156c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6899      	ldr	r1, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800157a:	025a      	lsls	r2, r3, #9
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6899      	ldr	r1, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	029a      	lsls	r2, r3, #10
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	609a      	str	r2, [r3, #8]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40012300 	.word	0x40012300
 80015b8:	0f000001 	.word	0x0f000001

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	@ (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	@ (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	@ (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	@ 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	@ 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800173c:	f7ff ff8e 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff29 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff3e 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff8e 	bl	80016b0 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5d 	bl	800165c <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff31 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffa2 	bl	8001718 <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e159      	b.n	8001ab0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 8148 	bne.w	8001aaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d005      	beq.n	8001832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	2b02      	cmp	r3, #2
 8001830:	d130      	bne.n	8001894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b03      	cmp	r3, #3
 800189e:	d017      	beq.n	80018d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d123      	bne.n	8001924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80a2 	beq.w	8001aaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b57      	ldr	r3, [pc, #348]	@ (8001ac8 <HAL_GPIO_Init+0x2e8>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	4a56      	ldr	r2, [pc, #344]	@ (8001ac8 <HAL_GPIO_Init+0x2e8>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001974:	6453      	str	r3, [r2, #68]	@ 0x44
 8001976:	4b54      	ldr	r3, [pc, #336]	@ (8001ac8 <HAL_GPIO_Init+0x2e8>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001982:	4a52      	ldr	r2, [pc, #328]	@ (8001acc <HAL_GPIO_Init+0x2ec>)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a49      	ldr	r2, [pc, #292]	@ (8001ad0 <HAL_GPIO_Init+0x2f0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x202>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a48      	ldr	r2, [pc, #288]	@ (8001ad4 <HAL_GPIO_Init+0x2f4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x1fe>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a47      	ldr	r2, [pc, #284]	@ (8001ad8 <HAL_GPIO_Init+0x2f8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x1fa>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a46      	ldr	r2, [pc, #280]	@ (8001adc <HAL_GPIO_Init+0x2fc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x1f6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a45      	ldr	r2, [pc, #276]	@ (8001ae0 <HAL_GPIO_Init+0x300>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x1f2>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e008      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019d2:	2307      	movs	r3, #7
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e004      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019da:	2302      	movs	r3, #2
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019e2:	2300      	movs	r3, #0
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f002 0203 	and.w	r2, r2, #3
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4093      	lsls	r3, r2
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f4:	4935      	ldr	r1, [pc, #212]	@ (8001acc <HAL_GPIO_Init+0x2ec>)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a26:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a50:	4a24      	ldr	r2, [pc, #144]	@ (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a56:	4b23      	ldr	r3, [pc, #140]	@ (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a80:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae4 <HAL_GPIO_Init+0x304>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	f67f aea2 	bls.w	80017fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3724      	adds	r7, #36	@ 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e001      	b.n	8001b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b22:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd0a 	bl	8000550 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40013c00 	.word	0x40013c00

08001b48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e101      	b.n	8001d5e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d106      	bne.n	8001b7a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f005 ffcf 	bl	8007b18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b88:	d102      	bne.n	8001b90 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fc2e 	bl	80043f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7c1a      	ldrb	r2, [r3, #16]
 8001ba2:	f88d 2000 	strb.w	r2, [sp]
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001baa:	f002 fb0d 	bl	80041c8 <USB_CoreInit>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0ce      	b.n	8001d5e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 fc26 	bl	8004418 <USB_SetCurrentMode>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0bf      	b.n	8001d5e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	e04a      	b.n	8001c7a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3315      	adds	r3, #21
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	3314      	adds	r3, #20
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	b298      	uxth	r0, r3
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	332e      	adds	r3, #46	@ 0x2e
 8001c20:	4602      	mov	r2, r0
 8001c22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	3318      	adds	r3, #24
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	331c      	adds	r3, #28
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	3320      	adds	r3, #32
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3324      	adds	r3, #36	@ 0x24
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	3301      	adds	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	791b      	ldrb	r3, [r3, #4]
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d3af      	bcc.n	8001be4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e044      	b.n	8001d14 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	3301      	adds	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	791b      	ldrb	r3, [r3, #4]
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d3b5      	bcc.n	8001c8a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7c1a      	ldrb	r2, [r3, #16]
 8001d26:	f88d 2000 	strb.w	r2, [sp]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d2e:	f002 fbbf 	bl	80044b0 <USB_DevInit>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e00c      	b.n	8001d5e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 fc03 	bl	8005562 <USB_DevDisconnect>

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_PCD_Start+0x1c>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e022      	b.n	8001dc8 <HAL_PCD_Start+0x62>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d105      	bne.n	8001daa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fb10 	bl	80043d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fbb1 	bl	8005520 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b08d      	sub	sp, #52	@ 0x34
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fc6f 	bl	80056ca <USB_GetMode>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 848c 	bne.w	800270c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fbd3 	bl	80055a4 <USB_ReadInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8482 	beq.w	800270a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fbc0 	bl	80055a4 <USB_ReadInterrupts>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d107      	bne.n	8001e3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f002 0202 	and.w	r2, r2, #2
 8001e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fbae 	bl	80055a4 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d161      	bne.n	8001f16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699a      	ldr	r2, [r3, #24]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0210 	bic.w	r2, r2, #16
 8001e60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3304      	adds	r3, #4
 8001e80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	0c5b      	lsrs	r3, r3, #17
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d124      	bne.n	8001ed8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d035      	beq.n	8001f06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	6a38      	ldr	r0, [r7, #32]
 8001eae:	f003 f9e5 	bl	800527c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ebe:	441a      	add	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ed0:	441a      	add	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	615a      	str	r2, [r3, #20]
 8001ed6:	e016      	b.n	8001f06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	0c5b      	lsrs	r3, r3, #17
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	2b06      	cmp	r3, #6
 8001ee2:	d110      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001eea:	2208      	movs	r2, #8
 8001eec:	4619      	mov	r1, r3
 8001eee:	6a38      	ldr	r0, [r7, #32]
 8001ef0:	f003 f9c4 	bl	800527c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f00:	441a      	add	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0210 	orr.w	r2, r2, #16
 8001f14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fb42 	bl	80055a4 <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f26:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001f2a:	f040 80a7 	bne.w	800207c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fb47 	bl	80055ca <USB_ReadDevAllOutEpInterrupt>
 8001f3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001f3e:	e099      	b.n	8002074 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 808e 	beq.w	8002068 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 fb6b 	bl	8005632 <USB_ReadDevOutEPInterrupt>
 8001f5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00c      	beq.n	8001f82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f74:	461a      	mov	r2, r3
 8001f76:	2301      	movs	r3, #1
 8001f78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fea1 	bl	8002cc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00c      	beq.n	8001fa6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 ff77 	bl	8002e94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d030      	beq.n	800202e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd4:	2b80      	cmp	r3, #128	@ 0x80
 8001fd6:	d109      	bne.n	8001fec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3304      	adds	r3, #4
 8002000:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	78db      	ldrb	r3, [r3, #3]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d108      	bne.n	800201c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2200      	movs	r2, #0
 800200e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	b2db      	uxtb	r3, r3
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f005 fe7a 	bl	8007d10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	015a      	lsls	r2, r3, #5
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	4413      	add	r3, r2
 8002024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002028:	461a      	mov	r2, r3
 800202a:	2302      	movs	r3, #2
 800202c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002044:	461a      	mov	r2, r3
 8002046:	2320      	movs	r3, #32
 8002048:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	4413      	add	r3, r2
 800205c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002060:	461a      	mov	r2, r3
 8002062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002066:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	3301      	adds	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800206e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002070:	085b      	lsrs	r3, r3, #1
 8002072:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002076:	2b00      	cmp	r3, #0
 8002078:	f47f af62 	bne.w	8001f40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fa8f 	bl	80055a4 <USB_ReadInterrupts>
 8002086:	4603      	mov	r3, r0
 8002088:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800208c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002090:	f040 80db 	bne.w	800224a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f003 fab0 	bl	80055fe <USB_ReadDevAllInEpInterrupt>
 800209e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80020a4:	e0cd      	b.n	8002242 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80c2 	beq.w	8002236 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 fad6 	bl	800566e <USB_ReadDevInEPInterrupt>
 80020c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d057      	beq.n	800217e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	2201      	movs	r2, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69f9      	ldr	r1, [r7, #28]
 80020ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020ee:	4013      	ands	r3, r2
 80020f0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020fe:	461a      	mov	r2, r3
 8002100:	2301      	movs	r3, #1
 8002102:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	799b      	ldrb	r3, [r3, #6]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d132      	bne.n	8002172 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	3320      	adds	r3, #32
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4403      	add	r3, r0
 800212c:	331c      	adds	r3, #28
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4419      	add	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4403      	add	r3, r0
 8002140:	3320      	adds	r3, #32
 8002142:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	2b00      	cmp	r3, #0
 8002148:	d113      	bne.n	8002172 <HAL_PCD_IRQHandler+0x3a2>
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3324      	adds	r3, #36	@ 0x24
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800216a:	461a      	mov	r2, r3
 800216c:	2101      	movs	r1, #1
 800216e:	f003 fadd 	bl	800572c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	b2db      	uxtb	r3, r3
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f005 fd4e 	bl	8007c1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002194:	461a      	mov	r2, r3
 8002196:	2308      	movs	r3, #8
 8002198:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021b0:	461a      	mov	r2, r3
 80021b2:	2310      	movs	r3, #16
 80021b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021cc:	461a      	mov	r2, r3
 80021ce:	2340      	movs	r3, #64	@ 0x40
 80021d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d023      	beq.n	8002224 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021de:	6a38      	ldr	r0, [r7, #32]
 80021e0:	f002 faca 	bl	8004778 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	3310      	adds	r3, #16
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	3304      	adds	r3, #4
 80021f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	78db      	ldrb	r3, [r3, #3]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d108      	bne.n	8002212 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2200      	movs	r2, #0
 8002204:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4619      	mov	r1, r3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f005 fd91 	bl	8007d34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800221e:	461a      	mov	r2, r3
 8002220:	2302      	movs	r3, #2
 8002222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800222e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fcbb 	bl	8002bac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	3301      	adds	r3, #1
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	f47f af2e 	bne.w	80020a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 f9a8 	bl	80055a4 <USB_ReadInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800225a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800225e:	d122      	bne.n	80022a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002286:	2100      	movs	r1, #0
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fea1 	bl	8002fd0 <HAL_PCDEx_LPM_Callback>
 800228e:	e002      	b.n	8002296 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f005 fd2f 	bl	8007cf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80022a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 f97a 	bl	80055a4 <USB_ReadInterrupts>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022ba:	d112      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f005 fceb 	bl	8007ca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80022e0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 f95c 	bl	80055a4 <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022f6:	f040 80b7 	bne.w	8002468 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2110      	movs	r1, #16
 8002314:	4618      	mov	r0, r3
 8002316:	f002 fa2f 	bl	8004778 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800231e:	e046      	b.n	80023ae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800232c:	461a      	mov	r2, r3
 800232e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002332:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002344:	0151      	lsls	r1, r2, #5
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	440a      	add	r2, r1
 800234a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800234e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002352:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	4413      	add	r3, r2
 800235c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002360:	461a      	mov	r2, r3
 8002362:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002366:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002378:	0151      	lsls	r1, r2, #5
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	440a      	add	r2, r1
 800237e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002382:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002386:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002398:	0151      	lsls	r1, r2, #5
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	440a      	add	r2, r1
 800239e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80023a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80023a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023aa:	3301      	adds	r3, #1
 80023ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	791b      	ldrb	r3, [r3, #4]
 80023b2:	461a      	mov	r2, r3
 80023b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d3b2      	bcc.n	8002320 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023c8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80023cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7bdb      	ldrb	r3, [r3, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023e6:	f043 030b 	orr.w	r3, r3, #11
 80023ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023fc:	f043 030b 	orr.w	r3, r3, #11
 8002400:	6453      	str	r3, [r2, #68]	@ 0x44
 8002402:	e015      	b.n	8002430 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002412:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002416:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800241a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800242a:	f043 030b 	orr.w	r3, r3, #11
 800242e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800243e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002442:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002452:	461a      	mov	r2, r3
 8002454:	f003 f96a 	bl	800572c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f003 f899 	bl	80055a4 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800247c:	d123      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f003 f92f 	bl	80056e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f002 f9ec 	bl	800486a <USB_GetDevSpeed>
 8002492:	4603      	mov	r3, r0
 8002494:	461a      	mov	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681c      	ldr	r4, [r3, #0]
 800249e:	f001 f9c7 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 80024a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024a8:	461a      	mov	r2, r3
 80024aa:	4620      	mov	r0, r4
 80024ac:	f001 fef0 	bl	8004290 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f005 fbda 	bl	8007c6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80024c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 f86a 	bl	80055a4 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d10a      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f005 fbb7 	bl	8007c4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f002 0208 	and.w	r2, r2, #8
 80024ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 f855 	bl	80055a4 <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002500:	2b80      	cmp	r3, #128	@ 0x80
 8002502:	d123      	bne.n	800254c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002510:	2301      	movs	r3, #1
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
 8002514:	e014      	b.n	8002540 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	b2db      	uxtb	r3, r3
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fb08 	bl	8002b4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	3301      	adds	r3, #1
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	791b      	ldrb	r3, [r3, #4]
 8002544:	461a      	mov	r2, r3
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	4293      	cmp	r3, r2
 800254a:	d3e4      	bcc.n	8002516 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f003 f827 	bl	80055a4 <USB_ReadInterrupts>
 8002556:	4603      	mov	r3, r0
 8002558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800255c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002560:	d13c      	bne.n	80025dc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002562:	2301      	movs	r3, #1
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
 8002566:	e02b      	b.n	80025c0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3318      	adds	r3, #24
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d115      	bne.n	80025ba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800258e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002590:	2b00      	cmp	r3, #0
 8002592:	da12      	bge.n	80025ba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3317      	adds	r3, #23
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4619      	mov	r1, r3
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fac8 	bl	8002b4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	3301      	adds	r3, #1
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	791b      	ldrb	r3, [r3, #4]
 80025c4:	461a      	mov	r2, r3
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d3cd      	bcc.n	8002568 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80025da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f002 ffdf 	bl	80055a4 <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025f0:	d156      	bne.n	80026a0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025f2:	2301      	movs	r3, #1
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f6:	e045      	b.n	8002684 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d12e      	bne.n	800267e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002620:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	da2b      	bge.n	800267e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002632:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002636:	429a      	cmp	r2, r3
 8002638:	d121      	bne.n	800267e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002676:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800267a:	6053      	str	r3, [r2, #4]
            break;
 800267c:	e008      	b.n	8002690 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	3301      	adds	r3, #1
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	791b      	ldrb	r3, [r3, #4]
 8002688:	461a      	mov	r2, r3
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	4293      	cmp	r3, r2
 800268e:	d3b3      	bcc.n	80025f8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800269e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 ff7d 	bl	80055a4 <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b4:	d10a      	bne.n	80026cc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f005 fb4e 	bl	8007d58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80026ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f002 ff67 	bl	80055a4 <USB_ReadInterrupts>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d115      	bne.n	800270c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f005 fb3e 	bl	8007d74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	e000      	b.n	800270c <HAL_PCD_IRQHandler+0x93c>
      return;
 800270a:	bf00      	nop
    }
  }
}
 800270c:	3734      	adds	r7, #52	@ 0x34
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}

08002712 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_PCD_SetAddress+0x1a>
 8002728:	2302      	movs	r3, #2
 800272a:	e012      	b.n	8002752 <HAL_PCD_SetAddress+0x40>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fec6 	bl	80054d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	4608      	mov	r0, r1
 8002764:	4611      	mov	r1, r2
 8002766:	461a      	mov	r2, r3
 8002768:	4603      	mov	r3, r0
 800276a:	70fb      	strb	r3, [r7, #3]
 800276c:	460b      	mov	r3, r1
 800276e:	803b      	strh	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277c:	2b00      	cmp	r3, #0
 800277e:	da0f      	bge.n	80027a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 020f 	and.w	r2, r3, #15
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	3310      	adds	r3, #16
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	3304      	adds	r3, #4
 8002796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	705a      	strb	r2, [r3, #1]
 800279e:	e00f      	b.n	80027c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 020f 	and.w	r2, r3, #15
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	3304      	adds	r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027cc:	883a      	ldrh	r2, [r7, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	78ba      	ldrb	r2, [r7, #2]
 80027d6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	785b      	ldrb	r3, [r3, #1]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027ea:	78bb      	ldrb	r3, [r7, #2]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_PCD_EP_Open+0xaa>
 8002800:	2302      	movs	r3, #2
 8002802:	e00e      	b.n	8002822 <HAL_PCD_EP_Open+0xc8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f002 f84e 	bl	80048b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002820:	7afb      	ldrb	r3, [r7, #11]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283a:	2b00      	cmp	r3, #0
 800283c:	da0f      	bge.n	800285e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 020f 	and.w	r2, r3, #15
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	3310      	adds	r3, #16
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	705a      	strb	r2, [r3, #1]
 800285c:	e00f      	b.n	800287e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	f003 020f 	and.w	r2, r3, #15
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	3304      	adds	r3, #4
 8002876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_PCD_EP_Close+0x6e>
 8002894:	2302      	movs	r3, #2
 8002896:	e00e      	b.n	80028b6 <HAL_PCD_EP_Close+0x8c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68f9      	ldr	r1, [r7, #12]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 f88c 	bl	80049c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	460b      	mov	r3, r1
 80028cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	f003 020f 	and.w	r2, r3, #15
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	3304      	adds	r3, #4
 80028e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2200      	movs	r2, #0
 80028fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002900:	7afb      	ldrb	r3, [r7, #11]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	b2da      	uxtb	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	799b      	ldrb	r3, [r3, #6]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d102      	bne.n	800291a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	799b      	ldrb	r3, [r3, #6]
 8002922:	461a      	mov	r2, r3
 8002924:	6979      	ldr	r1, [r7, #20]
 8002926:	f002 f929 	bl	8004b7c <USB_EPStartXfer>

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	f003 020f 	and.w	r2, r3, #15
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	460b      	mov	r3, r1
 8002972:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002974:	7afb      	ldrb	r3, [r7, #11]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	3310      	adds	r3, #16
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2201      	movs	r2, #1
 80029a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a4:	7afb      	ldrb	r3, [r7, #11]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	799b      	ldrb	r3, [r3, #6]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	799b      	ldrb	r3, [r3, #6]
 80029c6:	461a      	mov	r2, r3
 80029c8:	6979      	ldr	r1, [r7, #20]
 80029ca:	f002 f8d7 	bl	8004b7c <USB_EPStartXfer>

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	7912      	ldrb	r2, [r2, #4]
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e04f      	b.n	8002a96 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	da0f      	bge.n	8002a1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	f003 020f 	and.w	r2, r3, #15
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	3310      	adds	r3, #16
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	3304      	adds	r3, #4
 8002a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	705a      	strb	r2, [r3, #1]
 8002a1c:	e00d      	b.n	8002a3a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	3304      	adds	r3, #4
 8002a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_PCD_EP_SetStall+0x82>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e01d      	b.n	8002a96 <HAL_PCD_EP_SetStall+0xbe>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68f9      	ldr	r1, [r7, #12]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f002 fc5f 	bl	800532c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7999      	ldrb	r1, [r3, #6]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a86:	461a      	mov	r2, r3
 8002a88:	f002 fe50 	bl	800572c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	7912      	ldrb	r2, [r2, #4]
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e042      	b.n	8002b42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	da0f      	bge.n	8002ae4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	3310      	adds	r3, #16
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	705a      	strb	r2, [r3, #1]
 8002ae2:	e00f      	b.n	8002b04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_PCD_EP_ClrStall+0x86>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e00e      	b.n	8002b42 <HAL_PCD_EP_ClrStall+0xa4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 fc68 	bl	8005408 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	da0c      	bge.n	8002b78 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 020f 	and.w	r2, r3, #15
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	3310      	adds	r3, #16
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	e00c      	b.n	8002b92 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 020f 	and.w	r2, r3, #15
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3304      	adds	r3, #4
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 fa87 	bl	80050ac <USB_EPStopXfer>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	@ 0x28
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	3310      	adds	r3, #16
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d901      	bls.n	8002be4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e06b      	b.n	8002cbc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d902      	bls.n	8002c00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3303      	adds	r3, #3
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c08:	e02a      	b.n	8002c60 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d902      	bls.n	8002c26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3303      	adds	r3, #3
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68d9      	ldr	r1, [r3, #12]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	4603      	mov	r3, r0
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f002 fadc 	bl	8005200 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	441a      	add	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	441a      	add	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d809      	bhi.n	8002c8a <PCD_WriteEmptyTxFifo+0xde>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d203      	bcs.n	8002c8a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1bf      	bne.n	8002c0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d811      	bhi.n	8002cba <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	6939      	ldr	r1, [r7, #16]
 8002cb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	333c      	adds	r3, #60	@ 0x3c
 8002cdc:	3304      	adds	r3, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	799b      	ldrb	r3, [r3, #6]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d17b      	bne.n	8002df2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d015      	beq.n	8002d30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	4a61      	ldr	r2, [pc, #388]	@ (8002e8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	f240 80b9 	bls.w	8002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80b3 	beq.w	8002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d26:	461a      	mov	r2, r3
 8002d28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d2c:	6093      	str	r3, [r2, #8]
 8002d2e:	e0a7      	b.n	8002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d46:	461a      	mov	r2, r3
 8002d48:	2320      	movs	r3, #32
 8002d4a:	6093      	str	r3, [r2, #8]
 8002d4c:	e098      	b.n	8002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 8093 	bne.w	8002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d90f      	bls.n	8002d82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d7e:	6093      	str	r3, [r2, #8]
 8002d80:	e07e      	b.n	8002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	3304      	adds	r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	0159      	lsls	r1, r3, #5
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	440b      	add	r3, r1
 8002da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dae:	1ad2      	subs	r2, r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d114      	bne.n	8002de4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2101      	movs	r1, #1
 8002dd0:	f002 fcac 	bl	800572c <USB_EP0_OutStart>
 8002dd4:	e006      	b.n	8002de4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	441a      	add	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	4619      	mov	r1, r3
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f004 fefa 	bl	8007be4 <HAL_PCD_DataOutStageCallback>
 8002df0:	e046      	b.n	8002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	4a26      	ldr	r2, [pc, #152]	@ (8002e90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d124      	bne.n	8002e44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e10:	461a      	mov	r2, r3
 8002e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e16:	6093      	str	r3, [r2, #8]
 8002e18:	e032      	b.n	8002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e30:	461a      	mov	r2, r3
 8002e32:	2320      	movs	r3, #32
 8002e34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f004 fed1 	bl	8007be4 <HAL_PCD_DataOutStageCallback>
 8002e42:	e01d      	b.n	8002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d114      	bne.n	8002e74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2100      	movs	r1, #0
 8002e70:	f002 fc5c 	bl	800572c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f004 feb2 	bl	8007be4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	4f54300a 	.word	0x4f54300a
 8002e90:	4f54310a 	.word	0x4f54310a

08002e94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	333c      	adds	r3, #60	@ 0x3c
 8002eac:	3304      	adds	r3, #4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a15      	ldr	r2, [pc, #84]	@ (8002f1c <PCD_EP_OutSetupPacket_int+0x88>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d90e      	bls.n	8002ee8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ee6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f004 fe69 	bl	8007bc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <PCD_EP_OutSetupPacket_int+0x88>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d90c      	bls.n	8002f10 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	799b      	ldrb	r3, [r3, #6]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d108      	bne.n	8002f10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	f002 fc0e 	bl	800572c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	4f54300a 	.word	0x4f54300a

08002f20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f3e:	883b      	ldrh	r3, [r7, #0]
 8002f40:	0419      	lsls	r1, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f4c:	e028      	b.n	8002fa0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4413      	add	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	e00d      	b.n	8002f7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	3340      	adds	r3, #64	@ 0x40
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	4413      	add	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d3ec      	bcc.n	8002f62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f88:	883b      	ldrh	r3, [r7, #0]
 8002f8a:	0418      	lsls	r0, r3, #16
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	4302      	orrs	r2, r0
 8002f98:	3340      	adds	r3, #64	@ 0x40
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e267      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d075      	beq.n	80030f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003006:	4b88      	ldr	r3, [pc, #544]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b04      	cmp	r3, #4
 8003010:	d00c      	beq.n	800302c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003012:	4b85      	ldr	r3, [pc, #532]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800301a:	2b08      	cmp	r3, #8
 800301c:	d112      	bne.n	8003044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4b82      	ldr	r3, [pc, #520]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800302a:	d10b      	bne.n	8003044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	4b7e      	ldr	r3, [pc, #504]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d05b      	beq.n	80030f0 <HAL_RCC_OscConfig+0x108>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d157      	bne.n	80030f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e242      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800304c:	d106      	bne.n	800305c <HAL_RCC_OscConfig+0x74>
 800304e:	4b76      	ldr	r3, [pc, #472]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a75      	ldr	r2, [pc, #468]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e01d      	b.n	8003098 <HAL_RCC_OscConfig+0xb0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x98>
 8003066:	4b70      	ldr	r3, [pc, #448]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a6f      	ldr	r2, [pc, #444]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b6d      	ldr	r3, [pc, #436]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6c      	ldr	r2, [pc, #432]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0xb0>
 8003080:	4b69      	ldr	r3, [pc, #420]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a68      	ldr	r2, [pc, #416]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b66      	ldr	r3, [pc, #408]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a65      	ldr	r2, [pc, #404]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fd ffea 	bl	8001078 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fd ffe6 	bl	8001078 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	@ 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e207      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0xc0>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fd ffd6 	bl	8001078 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fd ffd2 	bl	8001078 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	@ 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1f3      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e2:	4b51      	ldr	r3, [pc, #324]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0xe8>
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d063      	beq.n	80031c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310a:	4b47      	ldr	r3, [pc, #284]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003112:	2b08      	cmp	r3, #8
 8003114:	d11c      	bne.n	8003150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b44      	ldr	r3, [pc, #272]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	4b41      	ldr	r3, [pc, #260]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x152>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e1c7      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	4b3b      	ldr	r3, [pc, #236]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4937      	ldr	r1, [pc, #220]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	e03a      	b.n	80031c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003158:	4b34      	ldr	r3, [pc, #208]	@ (800322c <HAL_RCC_OscConfig+0x244>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fd ff8b 	bl	8001078 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003166:	f7fd ff87 	bl	8001078 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1a8      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	4b2b      	ldr	r3, [pc, #172]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b28      	ldr	r3, [pc, #160]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4925      	ldr	r1, [pc, #148]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e015      	b.n	80031c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b24      	ldr	r3, [pc, #144]	@ (800322c <HAL_RCC_OscConfig+0x244>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fd ff6a 	bl	8001078 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fd ff66 	bl	8001078 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e187      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d036      	beq.n	8003240 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d016      	beq.n	8003208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <HAL_RCC_OscConfig+0x248>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fd ff4a 	bl	8001078 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e8:	f7fd ff46 	bl	8001078 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e167      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <HAL_RCC_OscConfig+0x240>)
 80031fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x200>
 8003206:	e01b      	b.n	8003240 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <HAL_RCC_OscConfig+0x248>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320e:	f7fd ff33 	bl	8001078 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	e00e      	b.n	8003234 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003216:	f7fd ff2f 	bl	8001078 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d907      	bls.n	8003234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e150      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
 8003228:	40023800 	.word	0x40023800
 800322c:	42470000 	.word	0x42470000
 8003230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	4b88      	ldr	r3, [pc, #544]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ea      	bne.n	8003216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8097 	beq.w	800337c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b81      	ldr	r3, [pc, #516]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10f      	bne.n	800327e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	4b7d      	ldr	r3, [pc, #500]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	4a7c      	ldr	r2, [pc, #496]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800326c:	6413      	str	r3, [r2, #64]	@ 0x40
 800326e:	4b7a      	ldr	r3, [pc, #488]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b77      	ldr	r3, [pc, #476]	@ (800345c <HAL_RCC_OscConfig+0x474>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d118      	bne.n	80032bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328a:	4b74      	ldr	r3, [pc, #464]	@ (800345c <HAL_RCC_OscConfig+0x474>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a73      	ldr	r2, [pc, #460]	@ (800345c <HAL_RCC_OscConfig+0x474>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7fd feef 	bl	8001078 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7fd feeb 	bl	8001078 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e10c      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	4b6a      	ldr	r3, [pc, #424]	@ (800345c <HAL_RCC_OscConfig+0x474>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x2ea>
 80032c4:	4b64      	ldr	r3, [pc, #400]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c8:	4a63      	ldr	r2, [pc, #396]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d0:	e01c      	b.n	800330c <HAL_RCC_OscConfig+0x324>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x30c>
 80032da:	4b5f      	ldr	r3, [pc, #380]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032de:	4a5e      	ldr	r2, [pc, #376]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0x324>
 80032f4:	4b58      	ldr	r3, [pc, #352]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	4a57      	ldr	r2, [pc, #348]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003300:	4b55      	ldr	r3, [pc, #340]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	4a54      	ldr	r2, [pc, #336]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003306:	f023 0304 	bic.w	r3, r3, #4
 800330a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d015      	beq.n	8003340 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fd feb0 	bl	8001078 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7fd feac 	bl	8001078 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0cb      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003332:	4b49      	ldr	r3, [pc, #292]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0ee      	beq.n	800331c <HAL_RCC_OscConfig+0x334>
 800333e:	e014      	b.n	800336a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003340:	f7fd fe9a 	bl	8001078 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003346:	e00a      	b.n	800335e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003348:	f7fd fe96 	bl	8001078 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e0b5      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335e:	4b3e      	ldr	r3, [pc, #248]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ee      	bne.n	8003348 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003370:	4b39      	ldr	r3, [pc, #228]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	4a38      	ldr	r2, [pc, #224]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80a1 	beq.w	80034c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003386:	4b34      	ldr	r3, [pc, #208]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b08      	cmp	r3, #8
 8003390:	d05c      	beq.n	800344c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d141      	bne.n	800341e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b31      	ldr	r3, [pc, #196]	@ (8003460 <HAL_RCC_OscConfig+0x478>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fd fe6a 	bl	8001078 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd fe66 	bl	8001078 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e087      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	4b27      	ldr	r3, [pc, #156]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	041b      	lsls	r3, r3, #16
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	061b      	lsls	r3, r3, #24
 80033ea:	491b      	ldr	r1, [pc, #108]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <HAL_RCC_OscConfig+0x478>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fd fe3f 	bl	8001078 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fd fe3b 	bl	8001078 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e05c      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003410:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x416>
 800341c:	e054      	b.n	80034c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <HAL_RCC_OscConfig+0x478>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fd fe28 	bl	8001078 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342c:	f7fd fe24 	bl	8001078 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e045      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <HAL_RCC_OscConfig+0x470>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x444>
 800344a:	e03d      	b.n	80034c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d107      	bne.n	8003464 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e038      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
 8003458:	40023800 	.word	0x40023800
 800345c:	40007000 	.word	0x40007000
 8003460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003464:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <HAL_RCC_OscConfig+0x4ec>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d028      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d121      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d11a      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800349a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800349c:	4293      	cmp	r3, r2
 800349e:	d111      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	3b01      	subs	r3, #1
 80034ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0cc      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034ec:	4b68      	ldr	r3, [pc, #416]	@ (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d90c      	bls.n	8003514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b65      	ldr	r3, [pc, #404]	@ (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b63      	ldr	r3, [pc, #396]	@ (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b8      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800352c:	4b59      	ldr	r3, [pc, #356]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a58      	ldr	r2, [pc, #352]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003544:	4b53      	ldr	r3, [pc, #332]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a52      	ldr	r2, [pc, #328]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800354e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4b50      	ldr	r3, [pc, #320]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	494d      	ldr	r1, [pc, #308]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d044      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b47      	ldr	r3, [pc, #284]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d119      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e07f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d003      	beq.n	8003596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	2b03      	cmp	r3, #3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003596:	4b3f      	ldr	r3, [pc, #252]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e067      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b6:	4b37      	ldr	r3, [pc, #220]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 0203 	bic.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4934      	ldr	r1, [pc, #208]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c8:	f7fd fd56 	bl	8001078 <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d0:	f7fd fd52 	bl	8001078 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e04f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 020c 	and.w	r2, r3, #12
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1eb      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f8:	4b25      	ldr	r3, [pc, #148]	@ (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d20c      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003606:	4b22      	ldr	r3, [pc, #136]	@ (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b20      	ldr	r3, [pc, #128]	@ (8003690 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e032      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4916      	ldr	r1, [pc, #88]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364a:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	490e      	ldr	r1, [pc, #56]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800365e:	f000 f821 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003662:	4602      	mov	r2, r0
 8003664:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	490a      	ldr	r1, [pc, #40]	@ (8003698 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	5ccb      	ldrb	r3, [r1, r3]
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a09      	ldr	r2, [pc, #36]	@ (800369c <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800367a:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd fcb6 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023c00 	.word	0x40023c00
 8003694:	40023800 	.word	0x40023800
 8003698:	080081e4 	.word	0x080081e4
 800369c:	20000000 	.word	0x20000000
 80036a0:	20000004 	.word	0x20000004

080036a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a8:	b090      	sub	sp, #64	@ 0x40
 80036aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b0:	2300      	movs	r3, #0
 80036b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b4:	2300      	movs	r3, #0
 80036b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036bc:	4b59      	ldr	r3, [pc, #356]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x180>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d00d      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x40>
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	f200 80a1 	bhi.w	8003810 <HAL_RCC_GetSysClockFreq+0x16c>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x34>
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d003      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x3a>
 80036d6:	e09b      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d8:	4b53      	ldr	r3, [pc, #332]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x184>)
 80036da:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80036dc:	e09b      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036de:	4b53      	ldr	r3, [pc, #332]	@ (800382c <HAL_RCC_GetSysClockFreq+0x188>)
 80036e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036e2:	e098      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x180>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x180>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d028      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x180>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	2200      	movs	r2, #0
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	627a      	str	r2, [r7, #36]	@ 0x24
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800370c:	2100      	movs	r1, #0
 800370e:	4b47      	ldr	r3, [pc, #284]	@ (800382c <HAL_RCC_GetSysClockFreq+0x188>)
 8003710:	fb03 f201 	mul.w	r2, r3, r1
 8003714:	2300      	movs	r3, #0
 8003716:	fb00 f303 	mul.w	r3, r0, r3
 800371a:	4413      	add	r3, r2
 800371c:	4a43      	ldr	r2, [pc, #268]	@ (800382c <HAL_RCC_GetSysClockFreq+0x188>)
 800371e:	fba0 1202 	umull	r1, r2, r0, r2
 8003722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003724:	460a      	mov	r2, r1
 8003726:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800372a:	4413      	add	r3, r2
 800372c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800372e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003730:	2200      	movs	r2, #0
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	61fa      	str	r2, [r7, #28]
 8003736:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800373a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800373e:	f7fc fd4b 	bl	80001d8 <__aeabi_uldivmod>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4613      	mov	r3, r2
 8003748:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800374a:	e053      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374c:	4b35      	ldr	r3, [pc, #212]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x180>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	2200      	movs	r2, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	617a      	str	r2, [r7, #20]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800375e:	f04f 0b00 	mov.w	fp, #0
 8003762:	4652      	mov	r2, sl
 8003764:	465b      	mov	r3, fp
 8003766:	f04f 0000 	mov.w	r0, #0
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	0159      	lsls	r1, r3, #5
 8003770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003774:	0150      	lsls	r0, r2, #5
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	ebb2 080a 	subs.w	r8, r2, sl
 800377e:	eb63 090b 	sbc.w	r9, r3, fp
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800378e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003792:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003796:	ebb2 0408 	subs.w	r4, r2, r8
 800379a:	eb63 0509 	sbc.w	r5, r3, r9
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	00eb      	lsls	r3, r5, #3
 80037a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ac:	00e2      	lsls	r2, r4, #3
 80037ae:	4614      	mov	r4, r2
 80037b0:	461d      	mov	r5, r3
 80037b2:	eb14 030a 	adds.w	r3, r4, sl
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	eb45 030b 	adc.w	r3, r5, fp
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ca:	4629      	mov	r1, r5
 80037cc:	028b      	lsls	r3, r1, #10
 80037ce:	4621      	mov	r1, r4
 80037d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037d4:	4621      	mov	r1, r4
 80037d6:	028a      	lsls	r2, r1, #10
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037de:	2200      	movs	r2, #0
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	60fa      	str	r2, [r7, #12]
 80037e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037e8:	f7fc fcf6 	bl	80001d8 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4613      	mov	r3, r2
 80037f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x180>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	3301      	adds	r3, #1
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003804:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800380e:	e002      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003810:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x184>)
 8003812:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003818:	4618      	mov	r0, r3
 800381a:	3740      	adds	r7, #64	@ 0x40
 800381c:	46bd      	mov	sp, r7
 800381e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	00f42400 	.word	0x00f42400
 800382c:	017d7840 	.word	0x017d7840

08003830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	@ (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000000 	.word	0x20000000

08003848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e041      	b.n	80038de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fa58 	bl	8000d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 f9a0 	bl	8003bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_TIM_PWM_Start+0x24>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e022      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b04      	cmp	r3, #4
 8003910:	d109      	bne.n	8003926 <HAL_TIM_PWM_Start+0x3e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e015      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d109      	bne.n	8003940 <HAL_TIM_PWM_Start+0x58>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e008      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e068      	b.n	8003a2c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <HAL_TIM_PWM_Start+0x82>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003968:	e013      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d104      	bne.n	800397a <HAL_TIM_PWM_Start+0x92>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003978:	e00b      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d104      	bne.n	800398a <HAL_TIM_PWM_Start+0xa2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003988:	e003      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2201      	movs	r2, #1
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fb2e 	bl	8003ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a23      	ldr	r2, [pc, #140]	@ (8003a34 <HAL_TIM_PWM_Start+0x14c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d107      	bne.n	80039ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1d      	ldr	r2, [pc, #116]	@ (8003a34 <HAL_TIM_PWM_Start+0x14c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d018      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x10e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039cc:	d013      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x10e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a19      	ldr	r2, [pc, #100]	@ (8003a38 <HAL_TIM_PWM_Start+0x150>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00e      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x10e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a17      	ldr	r2, [pc, #92]	@ (8003a3c <HAL_TIM_PWM_Start+0x154>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d009      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x10e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a16      	ldr	r2, [pc, #88]	@ (8003a40 <HAL_TIM_PWM_Start+0x158>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d004      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x10e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a14      	ldr	r2, [pc, #80]	@ (8003a44 <HAL_TIM_PWM_Start+0x15c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d111      	bne.n	8003a1a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b06      	cmp	r3, #6
 8003a06:	d010      	beq.n	8003a2a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a18:	e007      	b.n	8003a2a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0201 	orr.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40010000 	.word	0x40010000
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	40000c00 	.word	0x40000c00
 8003a44:	40014000 	.word	0x40014000

08003a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e0ae      	b.n	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	f200 809f 	bhi.w	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a76:	a201      	add	r2, pc, #4	@ (adr r2, 8003a7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003ab1 	.word	0x08003ab1
 8003a80:	08003bb5 	.word	0x08003bb5
 8003a84:	08003bb5 	.word	0x08003bb5
 8003a88:	08003bb5 	.word	0x08003bb5
 8003a8c:	08003af1 	.word	0x08003af1
 8003a90:	08003bb5 	.word	0x08003bb5
 8003a94:	08003bb5 	.word	0x08003bb5
 8003a98:	08003bb5 	.word	0x08003bb5
 8003a9c:	08003b33 	.word	0x08003b33
 8003aa0:	08003bb5 	.word	0x08003bb5
 8003aa4:	08003bb5 	.word	0x08003bb5
 8003aa8:	08003bb5 	.word	0x08003bb5
 8003aac:	08003b73 	.word	0x08003b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f914 	bl	8003ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0208 	orr.w	r2, r2, #8
 8003aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0204 	bic.w	r2, r2, #4
 8003ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6999      	ldr	r1, [r3, #24]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	619a      	str	r2, [r3, #24]
      break;
 8003aee:	e064      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f95a 	bl	8003db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6999      	ldr	r1, [r3, #24]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	619a      	str	r2, [r3, #24]
      break;
 8003b30:	e043      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f9a5 	bl	8003e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0208 	orr.w	r2, r2, #8
 8003b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0204 	bic.w	r2, r2, #4
 8003b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69d9      	ldr	r1, [r3, #28]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	61da      	str	r2, [r3, #28]
      break;
 8003b70:	e023      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f9ef 	bl	8003f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69d9      	ldr	r1, [r3, #28]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	021a      	lsls	r2, r3, #8
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	61da      	str	r2, [r3, #28]
      break;
 8003bb2:	e002      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a3a      	ldr	r2, [pc, #232]	@ (8003cc8 <TIM_Base_SetConfig+0xfc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00f      	beq.n	8003c04 <TIM_Base_SetConfig+0x38>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bea:	d00b      	beq.n	8003c04 <TIM_Base_SetConfig+0x38>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a37      	ldr	r2, [pc, #220]	@ (8003ccc <TIM_Base_SetConfig+0x100>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d007      	beq.n	8003c04 <TIM_Base_SetConfig+0x38>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a36      	ldr	r2, [pc, #216]	@ (8003cd0 <TIM_Base_SetConfig+0x104>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <TIM_Base_SetConfig+0x38>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a35      	ldr	r2, [pc, #212]	@ (8003cd4 <TIM_Base_SetConfig+0x108>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d108      	bne.n	8003c16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc8 <TIM_Base_SetConfig+0xfc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d01b      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c24:	d017      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a28      	ldr	r2, [pc, #160]	@ (8003ccc <TIM_Base_SetConfig+0x100>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a27      	ldr	r2, [pc, #156]	@ (8003cd0 <TIM_Base_SetConfig+0x104>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00f      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a26      	ldr	r2, [pc, #152]	@ (8003cd4 <TIM_Base_SetConfig+0x108>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00b      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a25      	ldr	r2, [pc, #148]	@ (8003cd8 <TIM_Base_SetConfig+0x10c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a24      	ldr	r2, [pc, #144]	@ (8003cdc <TIM_Base_SetConfig+0x110>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_Base_SetConfig+0x8a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a23      	ldr	r2, [pc, #140]	@ (8003ce0 <TIM_Base_SetConfig+0x114>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d108      	bne.n	8003c68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003cc8 <TIM_Base_SetConfig+0xfc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d103      	bne.n	8003c9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f023 0201 	bic.w	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	611a      	str	r2, [r3, #16]
  }
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40000800 	.word	0x40000800
 8003cd4:	40000c00 	.word	0x40000c00
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800

08003ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f023 0201 	bic.w	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f023 0302 	bic.w	r3, r3, #2
 8003d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dac <TIM_OC1_SetConfig+0xc8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d10c      	bne.n	8003d5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0308 	bic.w	r3, r3, #8
 8003d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f023 0304 	bic.w	r3, r3, #4
 8003d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a13      	ldr	r2, [pc, #76]	@ (8003dac <TIM_OC1_SetConfig+0xc8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d111      	bne.n	8003d86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	621a      	str	r2, [r3, #32]
}
 8003da0:	bf00      	nop
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40010000 	.word	0x40010000

08003db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f023 0210 	bic.w	r2, r3, #16
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0320 	bic.w	r3, r3, #32
 8003dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e84 <TIM_OC2_SetConfig+0xd4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d10d      	bne.n	8003e2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a15      	ldr	r2, [pc, #84]	@ (8003e84 <TIM_OC2_SetConfig+0xd4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d113      	bne.n	8003e5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000

08003e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <TIM_OC3_SetConfig+0xd0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10d      	bne.n	8003f02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a14      	ldr	r2, [pc, #80]	@ (8003f58 <TIM_OC3_SetConfig+0xd0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d113      	bne.n	8003f32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	621a      	str	r2, [r3, #32]
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	40010000 	.word	0x40010000

08003f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	031b      	lsls	r3, r3, #12
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a10      	ldr	r2, [pc, #64]	@ (8003ff8 <TIM_OC4_SetConfig+0x9c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d109      	bne.n	8003fd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40010000 	.word	0x40010000

08003ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2201      	movs	r2, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1a      	ldr	r2, [r3, #32]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	43db      	mvns	r3, r3
 800401e:	401a      	ands	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800405c:	2302      	movs	r3, #2
 800405e:	e050      	b.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1c      	ldr	r2, [pc, #112]	@ (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ac:	d013      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a18      	ldr	r2, [pc, #96]	@ (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a16      	ldr	r2, [pc, #88]	@ (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a15      	ldr	r2, [pc, #84]	@ (800411c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a13      	ldr	r2, [pc, #76]	@ (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10c      	bne.n	80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40014000 	.word	0x40014000

08004124 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800413c:	2302      	movs	r3, #2
 800413e:	e03d      	b.n	80041bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c8:	b084      	sub	sp, #16
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	f107 001c 	add.w	r0, r7, #28
 80041d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d123      	bne.n	800422a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80041f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800420a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800420e:	2b01      	cmp	r3, #1
 8004210:	d105      	bne.n	800421e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f001 fae2 	bl	80057e8 <USB_CoreReset>
 8004224:	4603      	mov	r3, r0
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e01b      	b.n	8004262 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f001 fad6 	bl	80057e8 <USB_CoreReset>
 800423c:	4603      	mov	r3, r0
 800423e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004240:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	639a      	str	r2, [r3, #56]	@ 0x38
 8004254:	e005      	b.n	8004262 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004262:	7fbb      	ldrb	r3, [r7, #30]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d10b      	bne.n	8004280 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f043 0206 	orr.w	r2, r3, #6
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800428c:	b004      	add	sp, #16
 800428e:	4770      	bx	lr

08004290 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d165      	bne.n	8004370 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4a41      	ldr	r2, [pc, #260]	@ (80043ac <USB_SetTurnaroundTime+0x11c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d906      	bls.n	80042ba <USB_SetTurnaroundTime+0x2a>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4a40      	ldr	r2, [pc, #256]	@ (80043b0 <USB_SetTurnaroundTime+0x120>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d202      	bcs.n	80042ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042b4:	230f      	movs	r3, #15
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e062      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4a3c      	ldr	r2, [pc, #240]	@ (80043b0 <USB_SetTurnaroundTime+0x120>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d306      	bcc.n	80042d0 <USB_SetTurnaroundTime+0x40>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	4a3b      	ldr	r2, [pc, #236]	@ (80043b4 <USB_SetTurnaroundTime+0x124>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d202      	bcs.n	80042d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042ca:	230e      	movs	r3, #14
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e057      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4a38      	ldr	r2, [pc, #224]	@ (80043b4 <USB_SetTurnaroundTime+0x124>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d306      	bcc.n	80042e6 <USB_SetTurnaroundTime+0x56>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4a37      	ldr	r2, [pc, #220]	@ (80043b8 <USB_SetTurnaroundTime+0x128>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d202      	bcs.n	80042e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042e0:	230d      	movs	r3, #13
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	e04c      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4a33      	ldr	r2, [pc, #204]	@ (80043b8 <USB_SetTurnaroundTime+0x128>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d306      	bcc.n	80042fc <USB_SetTurnaroundTime+0x6c>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4a32      	ldr	r2, [pc, #200]	@ (80043bc <USB_SetTurnaroundTime+0x12c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d802      	bhi.n	80042fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042f6:	230c      	movs	r3, #12
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	e041      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4a2f      	ldr	r2, [pc, #188]	@ (80043bc <USB_SetTurnaroundTime+0x12c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d906      	bls.n	8004312 <USB_SetTurnaroundTime+0x82>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4a2e      	ldr	r2, [pc, #184]	@ (80043c0 <USB_SetTurnaroundTime+0x130>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d802      	bhi.n	8004312 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800430c:	230b      	movs	r3, #11
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e036      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4a2a      	ldr	r2, [pc, #168]	@ (80043c0 <USB_SetTurnaroundTime+0x130>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d906      	bls.n	8004328 <USB_SetTurnaroundTime+0x98>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4a29      	ldr	r2, [pc, #164]	@ (80043c4 <USB_SetTurnaroundTime+0x134>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d802      	bhi.n	8004328 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004322:	230a      	movs	r3, #10
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	e02b      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4a26      	ldr	r2, [pc, #152]	@ (80043c4 <USB_SetTurnaroundTime+0x134>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d906      	bls.n	800433e <USB_SetTurnaroundTime+0xae>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4a25      	ldr	r2, [pc, #148]	@ (80043c8 <USB_SetTurnaroundTime+0x138>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d202      	bcs.n	800433e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004338:	2309      	movs	r3, #9
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e020      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4a21      	ldr	r2, [pc, #132]	@ (80043c8 <USB_SetTurnaroundTime+0x138>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d306      	bcc.n	8004354 <USB_SetTurnaroundTime+0xc4>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4a20      	ldr	r2, [pc, #128]	@ (80043cc <USB_SetTurnaroundTime+0x13c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d802      	bhi.n	8004354 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800434e:	2308      	movs	r3, #8
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e015      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4a1d      	ldr	r2, [pc, #116]	@ (80043cc <USB_SetTurnaroundTime+0x13c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d906      	bls.n	800436a <USB_SetTurnaroundTime+0xda>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4a1c      	ldr	r2, [pc, #112]	@ (80043d0 <USB_SetTurnaroundTime+0x140>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d202      	bcs.n	800436a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004364:	2307      	movs	r3, #7
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e00a      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800436a:	2306      	movs	r3, #6
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e007      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004376:	2309      	movs	r3, #9
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e001      	b.n	8004380 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800437c:	2309      	movs	r3, #9
 800437e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004398:	431a      	orrs	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	00d8acbf 	.word	0x00d8acbf
 80043b0:	00e4e1c0 	.word	0x00e4e1c0
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	01067380 	.word	0x01067380
 80043bc:	011a499f 	.word	0x011a499f
 80043c0:	01312cff 	.word	0x01312cff
 80043c4:	014ca43f 	.word	0x014ca43f
 80043c8:	016e3600 	.word	0x016e3600
 80043cc:	01a6ab1f 	.word	0x01a6ab1f
 80043d0:	01e84800 	.word	0x01e84800

080043d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f043 0201 	orr.w	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 0201 	bic.w	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d115      	bne.n	8004466 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004446:	200a      	movs	r0, #10
 8004448:	f7fc fe22 	bl	8001090 <HAL_Delay>
      ms += 10U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	330a      	adds	r3, #10
 8004450:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f001 f939 	bl	80056ca <USB_GetMode>
 8004458:	4603      	mov	r3, r0
 800445a:	2b01      	cmp	r3, #1
 800445c:	d01e      	beq.n	800449c <USB_SetCurrentMode+0x84>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2bc7      	cmp	r3, #199	@ 0xc7
 8004462:	d9f0      	bls.n	8004446 <USB_SetCurrentMode+0x2e>
 8004464:	e01a      	b.n	800449c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d115      	bne.n	8004498 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004478:	200a      	movs	r0, #10
 800447a:	f7fc fe09 	bl	8001090 <HAL_Delay>
      ms += 10U;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	330a      	adds	r3, #10
 8004482:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f001 f920 	bl	80056ca <USB_GetMode>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <USB_SetCurrentMode+0x84>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2bc7      	cmp	r3, #199	@ 0xc7
 8004494:	d9f0      	bls.n	8004478 <USB_SetCurrentMode+0x60>
 8004496:	e001      	b.n	800449c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e005      	b.n	80044a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2bc8      	cmp	r3, #200	@ 0xc8
 80044a0:	d101      	bne.n	80044a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044b0:	b084      	sub	sp, #16
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	e009      	b.n	80044e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	3340      	adds	r3, #64	@ 0x40
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	2200      	movs	r2, #0
 80044dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3301      	adds	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b0e      	cmp	r3, #14
 80044e8:	d9f2      	bls.n	80044d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d11c      	bne.n	800452c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004516:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	639a      	str	r2, [r3, #56]	@ 0x38
 800452a:	e00b      	b.n	8004544 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800454a:	461a      	mov	r2, r3
 800454c:	2300      	movs	r3, #0
 800454e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004550:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004554:	2b01      	cmp	r3, #1
 8004556:	d10d      	bne.n	8004574 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004560:	2100      	movs	r1, #0
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f968 	bl	8004838 <USB_SetDevSpeed>
 8004568:	e008      	b.n	800457c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800456a:	2101      	movs	r1, #1
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f963 	bl	8004838 <USB_SetDevSpeed>
 8004572:	e003      	b.n	800457c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004574:	2103      	movs	r1, #3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f95e 	bl	8004838 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800457c:	2110      	movs	r1, #16
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f8fa 	bl	8004778 <USB_FlushTxFifo>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f924 	bl	80047dc <USB_FlushRxFifo>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a4:	461a      	mov	r2, r3
 80045a6:	2300      	movs	r3, #0
 80045a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b0:	461a      	mov	r2, r3
 80045b2:	2300      	movs	r3, #0
 80045b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045bc:	461a      	mov	r2, r3
 80045be:	2300      	movs	r3, #0
 80045c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	e043      	b.n	8004650 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045de:	d118      	bne.n	8004612 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f2:	461a      	mov	r2, r3
 80045f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e013      	b.n	8004624 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004608:	461a      	mov	r2, r3
 800460a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	e008      	b.n	8004624 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800461e:	461a      	mov	r2, r3
 8004620:	2300      	movs	r3, #0
 8004622:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004630:	461a      	mov	r2, r3
 8004632:	2300      	movs	r3, #0
 8004634:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004642:	461a      	mov	r2, r3
 8004644:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004648:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3301      	adds	r3, #1
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004654:	461a      	mov	r2, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4293      	cmp	r3, r2
 800465a:	d3b5      	bcc.n	80045c8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	e043      	b.n	80046ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004674:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004678:	d118      	bne.n	80046ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468c:	461a      	mov	r2, r3
 800468e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	e013      	b.n	80046be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e008      	b.n	80046be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b8:	461a      	mov	r2, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	3301      	adds	r3, #1
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046ee:	461a      	mov	r2, r3
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d3b5      	bcc.n	8004662 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004708:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004716:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004718:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f043 0210 	orr.w	r2, r3, #16
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699a      	ldr	r2, [r3, #24]
 8004730:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <USB_DevInit+0x2c4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004738:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f043 0208 	orr.w	r2, r3, #8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800474c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004750:	2b01      	cmp	r3, #1
 8004752:	d107      	bne.n	8004764 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800475c:	f043 0304 	orr.w	r3, r3, #4
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004764:	7dfb      	ldrb	r3, [r7, #23]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004770:	b004      	add	sp, #16
 8004772:	4770      	bx	lr
 8004774:	803c3800 	.word	0x803c3800

08004778 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004792:	d901      	bls.n	8004798 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e01b      	b.n	80047d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	daf2      	bge.n	8004786 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	019b      	lsls	r3, r3, #6
 80047a8:	f043 0220 	orr.w	r2, r3, #32
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3301      	adds	r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047bc:	d901      	bls.n	80047c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e006      	b.n	80047d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d0f0      	beq.n	80047b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3301      	adds	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047f4:	d901      	bls.n	80047fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e018      	b.n	800482c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	daf2      	bge.n	80047e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2210      	movs	r2, #16
 800480a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3301      	adds	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004818:	d901      	bls.n	800481e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e006      	b.n	800482c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b10      	cmp	r3, #16
 8004828:	d0f0      	beq.n	800480c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004858:	4313      	orrs	r3, r2
 800485a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800486a:	b480      	push	{r7}
 800486c:	b087      	sub	sp, #28
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0306 	and.w	r3, r3, #6
 8004882:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
 800488e:	e00a      	b.n	80048a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d002      	beq.n	800489c <USB_GetDevSpeed+0x32>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b06      	cmp	r3, #6
 800489a:	d102      	bne.n	80048a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800489c:	2302      	movs	r3, #2
 800489e:	75fb      	strb	r3, [r7, #23]
 80048a0:	e001      	b.n	80048a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048a2:	230f      	movs	r3, #15
 80048a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d13a      	bne.n	8004946 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	2101      	movs	r1, #1
 80048e2:	fa01 f303 	lsl.w	r3, r1, r3
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d155      	bne.n	80049b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	791b      	ldrb	r3, [r3, #4]
 8004922:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004924:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	059b      	lsls	r3, r3, #22
 800492a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800492c:	4313      	orrs	r3, r2
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	e036      	b.n	80049b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	2101      	movs	r1, #1
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004964:	4313      	orrs	r3, r2
 8004966:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d11a      	bne.n	80049b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	791b      	ldrb	r3, [r3, #4]
 8004998:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800499a:	430b      	orrs	r3, r1
 800499c:	4313      	orrs	r3, r2
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d161      	bne.n	8004aa4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049f6:	d11f      	bne.n	8004a38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	2101      	movs	r1, #1
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a58:	4013      	ands	r3, r2
 8004a5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	68f9      	ldr	r1, [r7, #12]
 8004a78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	0159      	lsls	r1, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	440b      	add	r3, r1
 8004a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4b35      	ldr	r3, [pc, #212]	@ (8004b74 <USB_DeactivateEndpoint+0x1b0>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
 8004aa2:	e060      	b.n	8004b66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aba:	d11f      	bne.n	8004afc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ad6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ada:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004af6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004afa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	43db      	mvns	r3, r3
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	2101      	movs	r1, #1
 8004b32:	fa01 f303 	lsl.w	r3, r1, r3
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b40:	4013      	ands	r3, r2
 8004b42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	0159      	lsls	r1, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	440b      	add	r3, r1
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <USB_DeactivateEndpoint+0x1b4>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	ec337800 	.word	0xec337800
 8004b78:	eff37800 	.word	0xeff37800

08004b7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	@ 0x28
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	4613      	mov	r3, r2
 8004b88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f040 817a 	bne.w	8004e92 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d132      	bne.n	8004c0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bc0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004bc4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004bc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004be4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004be8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c04:	0cdb      	lsrs	r3, r3, #19
 8004c06:	04db      	lsls	r3, r3, #19
 8004c08:	6113      	str	r3, [r2, #16]
 8004c0a:	e092      	b.n	8004d32 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	0151      	lsls	r1, r2, #5
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	440a      	add	r2, r1
 8004c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c26:	0cdb      	lsrs	r3, r3, #19
 8004c28:	04db      	lsls	r3, r3, #19
 8004c2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c4e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d11a      	bne.n	8004c8c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d903      	bls.n	8004c6a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c88:	6113      	str	r3, [r2, #16]
 8004c8a:	e01b      	b.n	8004cc4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c98:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6919      	ldr	r1, [r3, #16]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	440b      	add	r3, r1
 8004ca4:	1e59      	subs	r1, r3, #1
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004cb0:	4ba2      	ldr	r3, [pc, #648]	@ (8004f3c <USB_EPStartXfer+0x3c0>)
 8004cb2:	400b      	ands	r3, r1
 8004cb4:	69b9      	ldr	r1, [r7, #24]
 8004cb6:	0148      	lsls	r0, r1, #5
 8004cb8:	69f9      	ldr	r1, [r7, #28]
 8004cba:	4401      	add	r1, r0
 8004cbc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cda:	69b9      	ldr	r1, [r7, #24]
 8004cdc:	0148      	lsls	r0, r1, #5
 8004cde:	69f9      	ldr	r1, [r7, #28]
 8004ce0:	4401      	add	r1, r0
 8004ce2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	791b      	ldrb	r3, [r3, #4]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d11f      	bne.n	8004d32 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d0c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004d10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d14b      	bne.n	8004dd0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	791b      	ldrb	r3, [r3, #4]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d128      	bne.n	8004dae <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d110      	bne.n	8004d8e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	e00f      	b.n	8004dae <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dc8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e165      	b.n	800509c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004dee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	791b      	ldrb	r3, [r3, #4]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d015      	beq.n	8004e24 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 814d 	beq.w	800509c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	2101      	movs	r1, #1
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	69f9      	ldr	r1, [r7, #28]
 8004e1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	634b      	str	r3, [r1, #52]	@ 0x34
 8004e22:	e13b      	b.n	800509c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d110      	bne.n	8004e56 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	e00f      	b.n	8004e76 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	68d9      	ldr	r1, [r3, #12]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781a      	ldrb	r2, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	b298      	uxth	r0, r3
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4603      	mov	r3, r0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f9b8 	bl	8005200 <USB_WritePacket>
 8004e90:	e104      	b.n	800509c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eac:	0cdb      	lsrs	r3, r3, #19
 8004eae:	04db      	lsls	r3, r3, #19
 8004eb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ecc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ed0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ed4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d131      	bne.n	8004f40 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0a:	69b9      	ldr	r1, [r7, #24]
 8004f0c:	0148      	lsls	r0, r1, #5
 8004f0e:	69f9      	ldr	r1, [r7, #28]
 8004f10:	4401      	add	r1, r0
 8004f12:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f16:	4313      	orrs	r3, r2
 8004f18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f38:	6113      	str	r3, [r2, #16]
 8004f3a:	e061      	b.n	8005000 <USB_EPStartXfer+0x484>
 8004f3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d123      	bne.n	8004f90 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f5e:	69b9      	ldr	r1, [r7, #24]
 8004f60:	0148      	lsls	r0, r1, #5
 8004f62:	69f9      	ldr	r1, [r7, #28]
 8004f64:	4401      	add	r1, r0
 8004f66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f8c:	6113      	str	r3, [r2, #16]
 8004f8e:	e037      	b.n	8005000 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4413      	add	r3, r2
 8004f9a:	1e5a      	subs	r2, r3, #1
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	8afa      	ldrh	r2, [r7, #22]
 8004fac:	fb03 f202 	mul.w	r2, r3, r2
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	8afb      	ldrh	r3, [r7, #22]
 8004fc4:	04d9      	lsls	r1, r3, #19
 8004fc6:	4b38      	ldr	r3, [pc, #224]	@ (80050a8 <USB_EPStartXfer+0x52c>)
 8004fc8:	400b      	ands	r3, r1
 8004fca:	69b9      	ldr	r1, [r7, #24]
 8004fcc:	0148      	lsls	r0, r1, #5
 8004fce:	69f9      	ldr	r1, [r7, #28]
 8004fd0:	4401      	add	r1, r0
 8004fd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff0:	69b9      	ldr	r1, [r7, #24]
 8004ff2:	0148      	lsls	r0, r1, #5
 8004ff4:	69f9      	ldr	r1, [r7, #28]
 8004ff6:	4401      	add	r1, r0
 8004ff8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10d      	bne.n	8005022 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	68d9      	ldr	r1, [r3, #12]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501e:	460a      	mov	r2, r1
 8005020:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	791b      	ldrb	r3, [r3, #4]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d128      	bne.n	800507c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d110      	bne.n	800505c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005054:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e00f      	b.n	800507c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800507a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005096:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800509a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	1ff80000 	.word	0x1ff80000

080050ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d14a      	bne.n	8005160 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e2:	f040 8086 	bne.w	80051f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	7812      	ldrb	r2, [r2, #0]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005104:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005108:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	7812      	ldrb	r2, [r2, #0]
 800511e:	0151      	lsls	r1, r2, #5
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	440a      	add	r2, r1
 8005124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005128:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800512c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3301      	adds	r3, #1
 8005132:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f242 7210 	movw	r2, #10000	@ 0x2710
 800513a:	4293      	cmp	r3, r2
 800513c:	d902      	bls.n	8005144 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	75fb      	strb	r3, [r7, #23]
          break;
 8005142:	e056      	b.n	80051f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800515c:	d0e7      	beq.n	800512e <USB_EPStopXfer+0x82>
 800515e:	e048      	b.n	80051f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005178:	d13b      	bne.n	80051f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	440a      	add	r2, r1
 8005194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005198:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800519c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	7812      	ldrb	r2, [r2, #0]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d902      	bls.n	80051d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
          break;
 80051d6:	e00c      	b.n	80051f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051f0:	d0e7      	beq.n	80051c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005200:	b480      	push	{r7}
 8005202:	b089      	sub	sp, #36	@ 0x24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	4611      	mov	r1, r2
 800520c:	461a      	mov	r2, r3
 800520e:	460b      	mov	r3, r1
 8005210:	71fb      	strb	r3, [r7, #7]
 8005212:	4613      	mov	r3, r2
 8005214:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800521e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005222:	2b00      	cmp	r3, #0
 8005224:	d123      	bne.n	800526e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005226:	88bb      	ldrh	r3, [r7, #4]
 8005228:	3303      	adds	r3, #3
 800522a:	089b      	lsrs	r3, r3, #2
 800522c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	e018      	b.n	8005266 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	031a      	lsls	r2, r3, #12
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005240:	461a      	mov	r2, r3
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	3301      	adds	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3301      	adds	r3, #1
 8005252:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	3301      	adds	r3, #1
 8005258:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	3301      	adds	r3, #1
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	429a      	cmp	r2, r3
 800526c:	d3e2      	bcc.n	8005234 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3724      	adds	r7, #36	@ 0x24
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800527c:	b480      	push	{r7}
 800527e:	b08b      	sub	sp, #44	@ 0x2c
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	089b      	lsrs	r3, r3, #2
 8005296:	b29b      	uxth	r3, r3
 8005298:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	e014      	b.n	80052d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	3301      	adds	r3, #1
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	3301      	adds	r3, #1
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	3301      	adds	r3, #1
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	3301      	adds	r3, #1
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	3301      	adds	r3, #1
 80052d0:	623b      	str	r3, [r7, #32]
 80052d2:	6a3a      	ldr	r2, [r7, #32]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d3e6      	bcc.n	80052a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052da:	8bfb      	ldrh	r3, [r7, #30]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01e      	beq.n	800531e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ea:	461a      	mov	r2, r3
 80052ec:	f107 0310 	add.w	r3, r7, #16
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005300:	b2da      	uxtb	r2, r3
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	701a      	strb	r2, [r3, #0]
      i++;
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	3301      	adds	r3, #1
 800530a:	623b      	str	r3, [r7, #32]
      pDest++;
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	3301      	adds	r3, #1
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005312:	8bfb      	ldrh	r3, [r7, #30]
 8005314:	3b01      	subs	r3, #1
 8005316:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005318:	8bfb      	ldrh	r3, [r7, #30]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1ea      	bne.n	80052f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005320:	4618      	mov	r0, r3
 8005322:	372c      	adds	r7, #44	@ 0x2c
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d12c      	bne.n	80053a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	db12      	blt.n	8005380 <USB_EPSetStall+0x54>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00f      	beq.n	8005380 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800537a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800537e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800539a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e02b      	b.n	80053fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db12      	blt.n	80053da <USB_EPSetStall+0xae>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00f      	beq.n	80053da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d128      	bne.n	8005476 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800543e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005442:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	791b      	ldrb	r3, [r3, #4]
 8005448:	2b03      	cmp	r3, #3
 800544a:	d003      	beq.n	8005454 <USB_EPClearStall+0x4c>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	791b      	ldrb	r3, [r3, #4]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d138      	bne.n	80054c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800546e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e027      	b.n	80054c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	440a      	add	r2, r1
 800548c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005490:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005494:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	791b      	ldrb	r3, [r3, #4]
 800549a:	2b03      	cmp	r3, #3
 800549c:	d003      	beq.n	80054a6 <USB_EPClearStall+0x9e>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	791b      	ldrb	r3, [r3, #4]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d10f      	bne.n	80054c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80054f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005508:	68f9      	ldr	r1, [r7, #12]
 800550a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800550e:	4313      	orrs	r3, r2
 8005510:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800554e:	f023 0302 	bic.w	r3, r3, #2
 8005552:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800557c:	f023 0303 	bic.w	r3, r3, #3
 8005580:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005590:	f043 0302 	orr.w	r3, r3, #2
 8005594:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4013      	ands	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055bc:	68fb      	ldr	r3, [r7, #12]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	4013      	ands	r3, r2
 80055ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	0c1b      	lsrs	r3, r3, #16
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	4013      	ands	r3, r2
 8005620:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	b29b      	uxth	r3, r3
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	460b      	mov	r3, r1
 800563c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4013      	ands	r3, r2
 800565e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005660:	68bb      	ldr	r3, [r7, #8]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800566e:	b480      	push	{r7}
 8005670:	b087      	sub	sp, #28
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	460b      	mov	r3, r1
 8005678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005690:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	fa22 f303 	lsr.w	r3, r2, r3
 800569e:	01db      	lsls	r3, r3, #7
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4013      	ands	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056bc:	68bb      	ldr	r3, [r7, #8]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f003 0301 	and.w	r3, r3, #1
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005700:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005704:	f023 0307 	bic.w	r3, r3, #7
 8005708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800571c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	460b      	mov	r3, r1
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	333c      	adds	r3, #60	@ 0x3c
 8005742:	3304      	adds	r3, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4a26      	ldr	r2, [pc, #152]	@ (80057e4 <USB_EP0_OutStart+0xb8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d90a      	bls.n	8005766 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800575c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005760:	d101      	bne.n	8005766 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	e037      	b.n	80057d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576c:	461a      	mov	r2, r3
 800576e:	2300      	movs	r3, #0
 8005770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005780:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005794:	f043 0318 	orr.w	r3, r3, #24
 8005798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80057ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057ae:	7afb      	ldrb	r3, [r7, #11]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d10f      	bne.n	80057d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ba:	461a      	mov	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80057d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	4f54300a 	.word	0x4f54300a

080057e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005800:	d901      	bls.n	8005806 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e01b      	b.n	800583e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	daf2      	bge.n	80057f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3301      	adds	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800582a:	d901      	bls.n	8005830 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e006      	b.n	800583e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d0f0      	beq.n	800581e <USB_CoreReset+0x36>

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005858:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800585c:	f002 fc22 	bl	80080a4 <USBD_static_malloc>
 8005860:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	32b0      	adds	r2, #176	@ 0xb0
 8005872:	2100      	movs	r1, #0
 8005874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005878:	2302      	movs	r3, #2
 800587a:	e0d4      	b.n	8005a26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800587c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005880:	2100      	movs	r1, #0
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f002 fc52 	bl	800812c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	32b0      	adds	r2, #176	@ 0xb0
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	32b0      	adds	r2, #176	@ 0xb0
 80058a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	7c1b      	ldrb	r3, [r3, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d138      	bne.n	8005926 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80058b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005a30 <USBD_CDC_Init+0x1e4>)
 80058b6:	7819      	ldrb	r1, [r3, #0]
 80058b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058bc:	2202      	movs	r2, #2
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f002 facd 	bl	8007e5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80058c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a30 <USBD_CDC_Init+0x1e4>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f003 020f 	and.w	r2, r3, #15
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	3324      	adds	r3, #36	@ 0x24
 80058da:	2201      	movs	r2, #1
 80058dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80058de:	4b55      	ldr	r3, [pc, #340]	@ (8005a34 <USBD_CDC_Init+0x1e8>)
 80058e0:	7819      	ldrb	r1, [r3, #0]
 80058e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058e6:	2202      	movs	r2, #2
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f002 fab8 	bl	8007e5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058ee:	4b51      	ldr	r3, [pc, #324]	@ (8005a34 <USBD_CDC_Init+0x1e8>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f003 020f 	and.w	r2, r3, #15
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005906:	2201      	movs	r2, #1
 8005908:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800590a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a38 <USBD_CDC_Init+0x1ec>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f003 020f 	and.w	r2, r3, #15
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	3326      	adds	r3, #38	@ 0x26
 8005920:	2210      	movs	r2, #16
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e035      	b.n	8005992 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005926:	4b42      	ldr	r3, [pc, #264]	@ (8005a30 <USBD_CDC_Init+0x1e4>)
 8005928:	7819      	ldrb	r1, [r3, #0]
 800592a:	2340      	movs	r3, #64	@ 0x40
 800592c:	2202      	movs	r2, #2
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 fa95 	bl	8007e5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005934:	4b3e      	ldr	r3, [pc, #248]	@ (8005a30 <USBD_CDC_Init+0x1e4>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f003 020f 	and.w	r2, r3, #15
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	3324      	adds	r3, #36	@ 0x24
 800594a:	2201      	movs	r2, #1
 800594c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800594e:	4b39      	ldr	r3, [pc, #228]	@ (8005a34 <USBD_CDC_Init+0x1e8>)
 8005950:	7819      	ldrb	r1, [r3, #0]
 8005952:	2340      	movs	r3, #64	@ 0x40
 8005954:	2202      	movs	r2, #2
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f002 fa81 	bl	8007e5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800595c:	4b35      	ldr	r3, [pc, #212]	@ (8005a34 <USBD_CDC_Init+0x1e8>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 020f 	and.w	r2, r3, #15
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005974:	2201      	movs	r2, #1
 8005976:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005978:	4b2f      	ldr	r3, [pc, #188]	@ (8005a38 <USBD_CDC_Init+0x1ec>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f003 020f 	and.w	r2, r3, #15
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3326      	adds	r3, #38	@ 0x26
 800598e:	2210      	movs	r2, #16
 8005990:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005992:	4b29      	ldr	r3, [pc, #164]	@ (8005a38 <USBD_CDC_Init+0x1ec>)
 8005994:	7819      	ldrb	r1, [r3, #0]
 8005996:	2308      	movs	r3, #8
 8005998:	2203      	movs	r2, #3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f002 fa5f 	bl	8007e5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80059a0:	4b25      	ldr	r3, [pc, #148]	@ (8005a38 <USBD_CDC_Init+0x1ec>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	f003 020f 	and.w	r2, r3, #15
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	3324      	adds	r3, #36	@ 0x24
 80059b6:	2201      	movs	r2, #1
 80059b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	33b0      	adds	r3, #176	@ 0xb0
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80059f0:	2302      	movs	r3, #2
 80059f2:	e018      	b.n	8005a26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	7c1b      	ldrb	r3, [r3, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005a34 <USBD_CDC_Init+0x1e8>)
 80059fe:	7819      	ldrb	r1, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f002 fb16 	bl	800803c <USBD_LL_PrepareReceive>
 8005a10:	e008      	b.n	8005a24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a12:	4b08      	ldr	r3, [pc, #32]	@ (8005a34 <USBD_CDC_Init+0x1e8>)
 8005a14:	7819      	ldrb	r1, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a1c:	2340      	movs	r3, #64	@ 0x40
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f002 fb0c 	bl	800803c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000093 	.word	0x20000093
 8005a34:	20000094 	.word	0x20000094
 8005a38:	20000095 	.word	0x20000095

08005a3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005a48:	4b3a      	ldr	r3, [pc, #232]	@ (8005b34 <USBD_CDC_DeInit+0xf8>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f002 fa2b 	bl	8007eaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005a54:	4b37      	ldr	r3, [pc, #220]	@ (8005b34 <USBD_CDC_DeInit+0xf8>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	f003 020f 	and.w	r2, r3, #15
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	3324      	adds	r3, #36	@ 0x24
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005a6e:	4b32      	ldr	r3, [pc, #200]	@ (8005b38 <USBD_CDC_DeInit+0xfc>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f002 fa18 	bl	8007eaa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b38 <USBD_CDC_DeInit+0xfc>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	f003 020f 	and.w	r2, r3, #15
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a92:	2200      	movs	r2, #0
 8005a94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005a96:	4b29      	ldr	r3, [pc, #164]	@ (8005b3c <USBD_CDC_DeInit+0x100>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f002 fa04 	bl	8007eaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005aa2:	4b26      	ldr	r3, [pc, #152]	@ (8005b3c <USBD_CDC_DeInit+0x100>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	3324      	adds	r3, #36	@ 0x24
 8005ab8:	2200      	movs	r2, #0
 8005aba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005abc:	4b1f      	ldr	r3, [pc, #124]	@ (8005b3c <USBD_CDC_DeInit+0x100>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 020f 	and.w	r2, r3, #15
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	3326      	adds	r3, #38	@ 0x26
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	32b0      	adds	r2, #176	@ 0xb0
 8005ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01f      	beq.n	8005b28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	33b0      	adds	r3, #176	@ 0xb0
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	32b0      	adds	r2, #176	@ 0xb0
 8005b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f002 fad8 	bl	80080c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	32b0      	adds	r2, #176	@ 0xb0
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000093 	.word	0x20000093
 8005b38:	20000094 	.word	0x20000094
 8005b3c:	20000095 	.word	0x20000095

08005b40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	32b0      	adds	r2, #176	@ 0xb0
 8005b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e0bf      	b.n	8005cf0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d050      	beq.n	8005c1e <USBD_CDC_Setup+0xde>
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	f040 80af 	bne.w	8005ce0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	88db      	ldrh	r3, [r3, #6]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d03a      	beq.n	8005c00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	da1b      	bge.n	8005bcc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	33b0      	adds	r3, #176	@ 0xb0
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005baa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	88d2      	ldrh	r2, [r2, #6]
 8005bb0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	88db      	ldrh	r3, [r3, #6]
 8005bb6:	2b07      	cmp	r3, #7
 8005bb8:	bf28      	it	cs
 8005bba:	2307      	movcs	r3, #7
 8005bbc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	89fa      	ldrh	r2, [r7, #14]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 fd47 	bl	8007658 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005bca:	e090      	b.n	8005cee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	785a      	ldrb	r2, [r3, #1]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	88db      	ldrh	r3, [r3, #6]
 8005bda:	2b3f      	cmp	r3, #63	@ 0x3f
 8005bdc:	d803      	bhi.n	8005be6 <USBD_CDC_Setup+0xa6>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	88db      	ldrh	r3, [r3, #6]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	e000      	b.n	8005be8 <USBD_CDC_Setup+0xa8>
 8005be6:	2240      	movs	r2, #64	@ 0x40
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005bee:	6939      	ldr	r1, [r7, #16]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 fd59 	bl	80076b0 <USBD_CtlPrepareRx>
      break;
 8005bfe:	e076      	b.n	8005cee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	33b0      	adds	r3, #176	@ 0xb0
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	7850      	ldrb	r0, [r2, #1]
 8005c16:	2200      	movs	r2, #0
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	4798      	blx	r3
      break;
 8005c1c:	e067      	b.n	8005cee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	2b0b      	cmp	r3, #11
 8005c24:	d851      	bhi.n	8005cca <USBD_CDC_Setup+0x18a>
 8005c26:	a201      	add	r2, pc, #4	@ (adr r2, 8005c2c <USBD_CDC_Setup+0xec>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c5d 	.word	0x08005c5d
 8005c30:	08005cd9 	.word	0x08005cd9
 8005c34:	08005ccb 	.word	0x08005ccb
 8005c38:	08005ccb 	.word	0x08005ccb
 8005c3c:	08005ccb 	.word	0x08005ccb
 8005c40:	08005ccb 	.word	0x08005ccb
 8005c44:	08005ccb 	.word	0x08005ccb
 8005c48:	08005ccb 	.word	0x08005ccb
 8005c4c:	08005ccb 	.word	0x08005ccb
 8005c50:	08005ccb 	.word	0x08005ccb
 8005c54:	08005c87 	.word	0x08005c87
 8005c58:	08005cb1 	.word	0x08005cb1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d107      	bne.n	8005c78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c68:	f107 030a 	add.w	r3, r7, #10
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 fcf1 	bl	8007658 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c76:	e032      	b.n	8005cde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f001 fc7b 	bl	8007576 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c80:	2303      	movs	r3, #3
 8005c82:	75fb      	strb	r3, [r7, #23]
          break;
 8005c84:	e02b      	b.n	8005cde <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d107      	bne.n	8005ca2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c92:	f107 030d 	add.w	r3, r7, #13
 8005c96:	2201      	movs	r2, #1
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 fcdc 	bl	8007658 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ca0:	e01d      	b.n	8005cde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 fc66 	bl	8007576 <USBD_CtlError>
            ret = USBD_FAIL;
 8005caa:	2303      	movs	r3, #3
 8005cac:	75fb      	strb	r3, [r7, #23]
          break;
 8005cae:	e016      	b.n	8005cde <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d00f      	beq.n	8005cdc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 fc59 	bl	8007576 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005cc8:	e008      	b.n	8005cdc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 fc52 	bl	8007576 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8005cd6:	e002      	b.n	8005cde <USBD_CDC_Setup+0x19e>
          break;
 8005cd8:	bf00      	nop
 8005cda:	e008      	b.n	8005cee <USBD_CDC_Setup+0x1ae>
          break;
 8005cdc:	bf00      	nop
      }
      break;
 8005cde:	e006      	b.n	8005cee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fc47 	bl	8007576 <USBD_CtlError>
      ret = USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	75fb      	strb	r3, [r7, #23]
      break;
 8005cec:	bf00      	nop
  }

  return (uint8_t)ret;
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005d0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	32b0      	adds	r2, #176	@ 0xb0
 8005d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e065      	b.n	8005dee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	32b0      	adds	r2, #176	@ 0xb0
 8005d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	f003 020f 	and.w	r2, r3, #15
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	3318      	adds	r3, #24
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d02f      	beq.n	8005dac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	f003 020f 	and.w	r2, r3, #15
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	3318      	adds	r3, #24
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	f003 010f 	and.w	r1, r3, #15
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	440b      	add	r3, r1
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4403      	add	r3, r0
 8005d74:	331c      	adds	r3, #28
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d112      	bne.n	8005dac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	f003 020f 	and.w	r2, r3, #15
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	3318      	adds	r3, #24
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d9e:	78f9      	ldrb	r1, [r7, #3]
 8005da0:	2300      	movs	r3, #0
 8005da2:	2200      	movs	r2, #0
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f002 f928 	bl	8007ffa <USBD_LL_Transmit>
 8005daa:	e01f      	b.n	8005dec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	33b0      	adds	r3, #176	@ 0xb0
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d010      	beq.n	8005dec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	33b0      	adds	r3, #176	@ 0xb0
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	32b0      	adds	r2, #176	@ 0xb0
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	32b0      	adds	r2, #176	@ 0xb0
 8005e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e01a      	b.n	8005e5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f002 f926 	bl	800807e <USBD_LL_GetRxDataSize>
 8005e32:	4602      	mov	r2, r0
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	33b0      	adds	r3, #176	@ 0xb0
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005e58:	4611      	mov	r1, r2
 8005e5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	32b0      	adds	r2, #176	@ 0xb0
 8005e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e024      	b.n	8005ed2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	33b0      	adds	r3, #176	@ 0xb0
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d019      	beq.n	8005ed0 <USBD_CDC_EP0_RxReady+0x6a>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005ea2:	2bff      	cmp	r3, #255	@ 0xff
 8005ea4:	d014      	beq.n	8005ed0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	33b0      	adds	r3, #176	@ 0xb0
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005ebe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ec6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	22ff      	movs	r2, #255	@ 0xff
 8005ecc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ee4:	2182      	movs	r1, #130	@ 0x82
 8005ee6:	4818      	ldr	r0, [pc, #96]	@ (8005f48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ee8:	f000 fd0f 	bl	800690a <USBD_GetEpDesc>
 8005eec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005eee:	2101      	movs	r1, #1
 8005ef0:	4815      	ldr	r0, [pc, #84]	@ (8005f48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ef2:	f000 fd0a 	bl	800690a <USBD_GetEpDesc>
 8005ef6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ef8:	2181      	movs	r1, #129	@ 0x81
 8005efa:	4813      	ldr	r0, [pc, #76]	@ (8005f48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005efc:	f000 fd05 	bl	800690a <USBD_GetEpDesc>
 8005f00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2210      	movs	r2, #16
 8005f0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f1c:	711a      	strb	r2, [r3, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d006      	beq.n	8005f36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f30:	711a      	strb	r2, [r3, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2243      	movs	r2, #67	@ 0x43
 8005f3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f3c:	4b02      	ldr	r3, [pc, #8]	@ (8005f48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000050 	.word	0x20000050

08005f4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f54:	2182      	movs	r1, #130	@ 0x82
 8005f56:	4818      	ldr	r0, [pc, #96]	@ (8005fb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f58:	f000 fcd7 	bl	800690a <USBD_GetEpDesc>
 8005f5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4815      	ldr	r0, [pc, #84]	@ (8005fb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f62:	f000 fcd2 	bl	800690a <USBD_GetEpDesc>
 8005f66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f68:	2181      	movs	r1, #129	@ 0x81
 8005f6a:	4813      	ldr	r0, [pc, #76]	@ (8005fb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f6c:	f000 fccd 	bl	800690a <USBD_GetEpDesc>
 8005f70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d006      	beq.n	8005f92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2200      	movs	r2, #0
 8005f88:	711a      	strb	r2, [r3, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f042 0202 	orr.w	r2, r2, #2
 8005f90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d006      	beq.n	8005fa6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	711a      	strb	r2, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f042 0202 	orr.w	r2, r2, #2
 8005fa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2243      	movs	r2, #67	@ 0x43
 8005faa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fac:	4b02      	ldr	r3, [pc, #8]	@ (8005fb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000050 	.word	0x20000050

08005fbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fc4:	2182      	movs	r1, #130	@ 0x82
 8005fc6:	4818      	ldr	r0, [pc, #96]	@ (8006028 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fc8:	f000 fc9f 	bl	800690a <USBD_GetEpDesc>
 8005fcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fce:	2101      	movs	r1, #1
 8005fd0:	4815      	ldr	r0, [pc, #84]	@ (8006028 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fd2:	f000 fc9a 	bl	800690a <USBD_GetEpDesc>
 8005fd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fd8:	2181      	movs	r1, #129	@ 0x81
 8005fda:	4813      	ldr	r0, [pc, #76]	@ (8006028 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fdc:	f000 fc95 	bl	800690a <USBD_GetEpDesc>
 8005fe0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2210      	movs	r2, #16
 8005fec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d006      	beq.n	8006002 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ffc:	711a      	strb	r2, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006010:	711a      	strb	r2, [r3, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2243      	movs	r2, #67	@ 0x43
 800601a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800601c:	4b02      	ldr	r3, [pc, #8]	@ (8006028 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000050 	.word	0x20000050

0800602c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	220a      	movs	r2, #10
 8006038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800603a:	4b03      	ldr	r3, [pc, #12]	@ (8006048 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	2000000c 	.word	0x2000000c

0800604c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800605c:	2303      	movs	r3, #3
 800605e:	e009      	b.n	8006074 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	33b0      	adds	r3, #176	@ 0xb0
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	32b0      	adds	r2, #176	@ 0xb0
 8006096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e008      	b.n	80060b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	32b0      	adds	r2, #176	@ 0xb0
 80060d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e004      	b.n	80060f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	32b0      	adds	r2, #176	@ 0xb0
 8006112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006116:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	32b0      	adds	r2, #176	@ 0xb0
 8006122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800612a:	2303      	movs	r3, #3
 800612c:	e018      	b.n	8006160 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	7c1b      	ldrb	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006136:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <USBD_CDC_ReceivePacket+0x68>)
 8006138:	7819      	ldrb	r1, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006140:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 ff79 	bl	800803c <USBD_LL_PrepareReceive>
 800614a:	e008      	b.n	800615e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800614c:	4b06      	ldr	r3, [pc, #24]	@ (8006168 <USBD_CDC_ReceivePacket+0x68>)
 800614e:	7819      	ldrb	r1, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006156:	2340      	movs	r3, #64	@ 0x40
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 ff6f 	bl	800803c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000094 	.word	0x20000094

0800616c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006180:	2303      	movs	r3, #3
 8006182:	e01f      	b.n	80061c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	79fa      	ldrb	r2, [r7, #7]
 80061b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f001 fde9 	bl	8007d90 <USBD_LL_Init>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e025      	b.n	8006230 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	32ae      	adds	r2, #174	@ 0xae
 80061f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00f      	beq.n	8006220 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	32ae      	adds	r2, #174	@ 0xae
 800620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006210:	f107 020e 	add.w	r2, r7, #14
 8006214:	4610      	mov	r0, r2
 8006216:	4798      	blx	r3
 8006218:	4602      	mov	r2, r0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f001 fdf1 	bl	8007e28 <USBD_LL_Start>
 8006246:	4603      	mov	r3, r0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006258:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	460b      	mov	r3, r1
 8006270:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	78fa      	ldrb	r2, [r7, #3]
 800628a:	4611      	mov	r1, r2
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	4798      	blx	r3
 8006290:	4603      	mov	r3, r0
 8006292:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	78fa      	ldrb	r2, [r7, #3]
 80062b8:	4611      	mov	r1, r2
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062c4:	2303      	movs	r3, #3
 80062c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 f90c 	bl	8007502 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80062f8:	461a      	mov	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006306:	f003 031f 	and.w	r3, r3, #31
 800630a:	2b02      	cmp	r3, #2
 800630c:	d01a      	beq.n	8006344 <USBD_LL_SetupStage+0x72>
 800630e:	2b02      	cmp	r3, #2
 8006310:	d822      	bhi.n	8006358 <USBD_LL_SetupStage+0x86>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <USBD_LL_SetupStage+0x4a>
 8006316:	2b01      	cmp	r3, #1
 8006318:	d00a      	beq.n	8006330 <USBD_LL_SetupStage+0x5e>
 800631a:	e01d      	b.n	8006358 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fb63 	bl	80069f0 <USBD_StdDevReq>
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
      break;
 800632e:	e020      	b.n	8006372 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fbcb 	bl	8006ad4 <USBD_StdItfReq>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
      break;
 8006342:	e016      	b.n	8006372 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fc2d 	bl	8006bac <USBD_StdEPReq>
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]
      break;
 8006356:	e00c      	b.n	8006372 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800635e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006362:	b2db      	uxtb	r3, r3
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 fdbe 	bl	8007ee8 <USBD_LL_StallEP>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]
      break;
 8006370:	bf00      	nop
  }

  return ret;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	460b      	mov	r3, r1
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800638e:	7afb      	ldrb	r3, [r7, #11]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d16e      	bne.n	8006472 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800639a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	f040 8098 	bne.w	80064d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d913      	bls.n	80063dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	1ad2      	subs	r2, r2, r3
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	4293      	cmp	r3, r2
 80063cc:	bf28      	it	cs
 80063ce:	4613      	movcs	r3, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f001 f988 	bl	80076ea <USBD_CtlContinueRx>
 80063da:	e07d      	b.n	80064d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d014      	beq.n	8006414 <USBD_LL_DataOutStage+0x98>
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d81d      	bhi.n	800642a <USBD_LL_DataOutStage+0xae>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <USBD_LL_DataOutStage+0x7c>
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d003      	beq.n	80063fe <USBD_LL_DataOutStage+0x82>
 80063f6:	e018      	b.n	800642a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	75bb      	strb	r3, [r7, #22]
            break;
 80063fc:	e018      	b.n	8006430 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006404:	b2db      	uxtb	r3, r3
 8006406:	4619      	mov	r1, r3
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 fa64 	bl	80068d6 <USBD_CoreFindIF>
 800640e:	4603      	mov	r3, r0
 8006410:	75bb      	strb	r3, [r7, #22]
            break;
 8006412:	e00d      	b.n	8006430 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800641a:	b2db      	uxtb	r3, r3
 800641c:	4619      	mov	r1, r3
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 fa66 	bl	80068f0 <USBD_CoreFindEP>
 8006424:	4603      	mov	r3, r0
 8006426:	75bb      	strb	r3, [r7, #22]
            break;
 8006428:	e002      	b.n	8006430 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	75bb      	strb	r3, [r7, #22]
            break;
 800642e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006430:	7dbb      	ldrb	r3, [r7, #22]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d119      	bne.n	800646a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b03      	cmp	r3, #3
 8006440:	d113      	bne.n	800646a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006442:	7dba      	ldrb	r2, [r7, #22]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	32ae      	adds	r2, #174	@ 0xae
 8006448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006452:	7dba      	ldrb	r2, [r7, #22]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800645a:	7dba      	ldrb	r2, [r7, #22]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	32ae      	adds	r2, #174	@ 0xae
 8006460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f001 f94e 	bl	800770c <USBD_CtlSendStatus>
 8006470:	e032      	b.n	80064d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006472:	7afb      	ldrb	r3, [r7, #11]
 8006474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006478:	b2db      	uxtb	r3, r3
 800647a:	4619      	mov	r1, r3
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fa37 	bl	80068f0 <USBD_CoreFindEP>
 8006482:	4603      	mov	r3, r0
 8006484:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006486:	7dbb      	ldrb	r3, [r7, #22]
 8006488:	2bff      	cmp	r3, #255	@ 0xff
 800648a:	d025      	beq.n	80064d8 <USBD_LL_DataOutStage+0x15c>
 800648c:	7dbb      	ldrb	r3, [r7, #22]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d122      	bne.n	80064d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b03      	cmp	r3, #3
 800649c:	d117      	bne.n	80064ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800649e:	7dba      	ldrb	r2, [r7, #22]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	32ae      	adds	r2, #174	@ 0xae
 80064a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00f      	beq.n	80064ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80064ae:	7dba      	ldrb	r2, [r7, #22]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064b6:	7dba      	ldrb	r2, [r7, #22]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	32ae      	adds	r2, #174	@ 0xae
 80064bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	7afa      	ldrb	r2, [r7, #11]
 80064c4:	4611      	mov	r1, r2
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	4798      	blx	r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
 80064d6:	e000      	b.n	80064da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b086      	sub	sp, #24
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	460b      	mov	r3, r1
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80064f0:	7afb      	ldrb	r3, [r7, #11]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d16f      	bne.n	80065d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3314      	adds	r3, #20
 80064fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006502:	2b02      	cmp	r3, #2
 8006504:	d15a      	bne.n	80065bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	429a      	cmp	r2, r3
 8006510:	d914      	bls.n	800653c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	461a      	mov	r2, r3
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f001 f8b0 	bl	800768e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800652e:	2300      	movs	r3, #0
 8006530:	2200      	movs	r2, #0
 8006532:	2100      	movs	r1, #0
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f001 fd81 	bl	800803c <USBD_LL_PrepareReceive>
 800653a:	e03f      	b.n	80065bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	429a      	cmp	r2, r3
 8006546:	d11c      	bne.n	8006582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006550:	429a      	cmp	r2, r3
 8006552:	d316      	bcc.n	8006582 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800655e:	429a      	cmp	r2, r3
 8006560:	d20f      	bcs.n	8006582 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006562:	2200      	movs	r2, #0
 8006564:	2100      	movs	r1, #0
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f001 f891 	bl	800768e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006574:	2300      	movs	r3, #0
 8006576:	2200      	movs	r2, #0
 8006578:	2100      	movs	r1, #0
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f001 fd5e 	bl	800803c <USBD_LL_PrepareReceive>
 8006580:	e01c      	b.n	80065bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b03      	cmp	r3, #3
 800658c:	d10f      	bne.n	80065ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065ae:	2180      	movs	r1, #128	@ 0x80
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f001 fc99 	bl	8007ee8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f001 f8bb 	bl	8007732 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d03a      	beq.n	800663c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff fe42 	bl	8006250 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80065d4:	e032      	b.n	800663c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065d6:	7afb      	ldrb	r3, [r7, #11]
 80065d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	4619      	mov	r1, r3
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f985 	bl	80068f0 <USBD_CoreFindEP>
 80065e6:	4603      	mov	r3, r0
 80065e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	2bff      	cmp	r3, #255	@ 0xff
 80065ee:	d025      	beq.n	800663c <USBD_LL_DataInStage+0x15a>
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d122      	bne.n	800663c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d11c      	bne.n	800663c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006602:	7dfa      	ldrb	r2, [r7, #23]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	32ae      	adds	r2, #174	@ 0xae
 8006608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d014      	beq.n	800663c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006612:	7dfa      	ldrb	r2, [r7, #23]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800661a:	7dfa      	ldrb	r2, [r7, #23]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	32ae      	adds	r2, #174	@ 0xae
 8006620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	7afa      	ldrb	r2, [r7, #11]
 8006628:	4611      	mov	r1, r2
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	4798      	blx	r3
 800662e:	4603      	mov	r3, r0
 8006630:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006632:	7dbb      	ldrb	r3, [r7, #22]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006638:	7dbb      	ldrb	r3, [r7, #22]
 800663a:	e000      	b.n	800663e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d014      	beq.n	80066ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00e      	beq.n	80066ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6852      	ldr	r2, [r2, #4]
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	4611      	mov	r1, r2
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80066a8:	2303      	movs	r3, #3
 80066aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066ac:	2340      	movs	r3, #64	@ 0x40
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fbd3 	bl	8007e5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2240      	movs	r2, #64	@ 0x40
 80066c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066c8:	2340      	movs	r3, #64	@ 0x40
 80066ca:	2200      	movs	r2, #0
 80066cc:	2180      	movs	r1, #128	@ 0x80
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 fbc5 	bl	8007e5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2240      	movs	r2, #64	@ 0x40
 80066de:	621a      	str	r2, [r3, #32]

  return ret;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	460b      	mov	r3, r1
 80066f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b04      	cmp	r3, #4
 800671c:	d006      	beq.n	800672c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006724:	b2da      	uxtb	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2204      	movs	r2, #4
 8006730:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b04      	cmp	r3, #4
 8006754:	d106      	bne.n	8006764 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800675c:	b2da      	uxtb	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b03      	cmp	r3, #3
 8006784:	d110      	bne.n	80067a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	32ae      	adds	r2, #174	@ 0xae
 80067c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e01c      	b.n	800680e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d115      	bne.n	800680c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	32ae      	adds	r2, #174	@ 0xae
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	32ae      	adds	r2, #174	@ 0xae
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	78fa      	ldrb	r2, [r7, #3]
 8006806:	4611      	mov	r1, r2
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	32ae      	adds	r2, #174	@ 0xae
 800682c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006834:	2303      	movs	r3, #3
 8006836:	e01c      	b.n	8006872 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b03      	cmp	r3, #3
 8006842:	d115      	bne.n	8006870 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	32ae      	adds	r2, #174	@ 0xae
 800684e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	32ae      	adds	r2, #174	@ 0xae
 8006862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	4611      	mov	r1, r2
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00e      	beq.n	80068cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6852      	ldr	r2, [r2, #4]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	4611      	mov	r1, r2
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068c8:	2303      	movs	r3, #3
 80068ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	885b      	ldrh	r3, [r3, #2]
 8006926:	b29b      	uxth	r3, r3
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	7812      	ldrb	r2, [r2, #0]
 800692c:	4293      	cmp	r3, r2
 800692e:	d91f      	bls.n	8006970 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006936:	e013      	b.n	8006960 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006938:	f107 030a 	add.w	r3, r7, #10
 800693c:	4619      	mov	r1, r3
 800693e:	6978      	ldr	r0, [r7, #20]
 8006940:	f000 f81b 	bl	800697a <USBD_GetNextDesc>
 8006944:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b05      	cmp	r3, #5
 800694c:	d108      	bne.n	8006960 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	789b      	ldrb	r3, [r3, #2]
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	429a      	cmp	r2, r3
 800695a:	d008      	beq.n	800696e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	885b      	ldrh	r3, [r3, #2]
 8006964:	b29a      	uxth	r2, r3
 8006966:	897b      	ldrh	r3, [r7, #10]
 8006968:	429a      	cmp	r2, r3
 800696a:	d8e5      	bhi.n	8006938 <USBD_GetEpDesc+0x2e>
 800696c:	e000      	b.n	8006970 <USBD_GetEpDesc+0x66>
          break;
 800696e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006970:	693b      	ldr	r3, [r7, #16]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	4413      	add	r3, r2
 8006992:	b29a      	uxth	r2, r3
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4413      	add	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80069a4:	68fb      	ldr	r3, [r7, #12]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b087      	sub	sp, #28
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	3301      	adds	r3, #1
 80069c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069d0:	8a3b      	ldrh	r3, [r7, #16]
 80069d2:	021b      	lsls	r3, r3, #8
 80069d4:	b21a      	sxth	r2, r3
 80069d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069da:	4313      	orrs	r3, r2
 80069dc:	b21b      	sxth	r3, r3
 80069de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069e0:	89fb      	ldrh	r3, [r7, #14]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a06:	2b40      	cmp	r3, #64	@ 0x40
 8006a08:	d005      	beq.n	8006a16 <USBD_StdDevReq+0x26>
 8006a0a:	2b40      	cmp	r3, #64	@ 0x40
 8006a0c:	d857      	bhi.n	8006abe <USBD_StdDevReq+0xce>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <USBD_StdDevReq+0x42>
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d153      	bne.n	8006abe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	32ae      	adds	r2, #174	@ 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a30:	e04a      	b.n	8006ac8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	d83b      	bhi.n	8006ab2 <USBD_StdDevReq+0xc2>
 8006a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a40 <USBD_StdDevReq+0x50>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a95 	.word	0x08006a95
 8006a44:	08006aa9 	.word	0x08006aa9
 8006a48:	08006ab3 	.word	0x08006ab3
 8006a4c:	08006a9f 	.word	0x08006a9f
 8006a50:	08006ab3 	.word	0x08006ab3
 8006a54:	08006a73 	.word	0x08006a73
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006ab3 	.word	0x08006ab3
 8006a60:	08006a8b 	.word	0x08006a8b
 8006a64:	08006a7d 	.word	0x08006a7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa3c 	bl	8006ee8 <USBD_GetDescriptor>
          break;
 8006a70:	e024      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fba1 	bl	80071bc <USBD_SetAddress>
          break;
 8006a7a:	e01f      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fbe0 	bl	8007244 <USBD_SetConfig>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
          break;
 8006a88:	e018      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fc83 	bl	8007398 <USBD_GetConfig>
          break;
 8006a92:	e013      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fcb4 	bl	8007404 <USBD_GetStatus>
          break;
 8006a9c:	e00e      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fce3 	bl	800746c <USBD_SetFeature>
          break;
 8006aa6:	e009      	b.n	8006abc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fd07 	bl	80074be <USBD_ClrFeature>
          break;
 8006ab0:	e004      	b.n	8006abc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fd5e 	bl	8007576 <USBD_CtlError>
          break;
 8006aba:	bf00      	nop
      }
      break;
 8006abc:	e004      	b.n	8006ac8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fd58 	bl	8007576 <USBD_CtlError>
      break;
 8006ac6:	bf00      	nop
  }

  return ret;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop

08006ad4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006aea:	2b40      	cmp	r3, #64	@ 0x40
 8006aec:	d005      	beq.n	8006afa <USBD_StdItfReq+0x26>
 8006aee:	2b40      	cmp	r3, #64	@ 0x40
 8006af0:	d852      	bhi.n	8006b98 <USBD_StdItfReq+0xc4>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <USBD_StdItfReq+0x26>
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d14e      	bne.n	8006b98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d840      	bhi.n	8006b8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	889b      	ldrh	r3, [r3, #4]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d836      	bhi.n	8006b80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	889b      	ldrh	r3, [r3, #4]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fedb 	bl	80068d6 <USBD_CoreFindIF>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2bff      	cmp	r3, #255	@ 0xff
 8006b28:	d01d      	beq.n	8006b66 <USBD_StdItfReq+0x92>
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11a      	bne.n	8006b66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b30:	7bba      	ldrb	r2, [r7, #14]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32ae      	adds	r2, #174	@ 0xae
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b40:	7bba      	ldrb	r2, [r7, #14]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b48:	7bba      	ldrb	r2, [r7, #14]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	32ae      	adds	r2, #174	@ 0xae
 8006b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b5e:	e004      	b.n	8006b6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b60:	2303      	movs	r3, #3
 8006b62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b64:	e001      	b.n	8006b6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b66:	2303      	movs	r3, #3
 8006b68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	88db      	ldrh	r3, [r3, #6]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d110      	bne.n	8006b94 <USBD_StdItfReq+0xc0>
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fdc7 	bl	800770c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b7e:	e009      	b.n	8006b94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fcf7 	bl	8007576 <USBD_CtlError>
          break;
 8006b88:	e004      	b.n	8006b94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fcf2 	bl	8007576 <USBD_CtlError>
          break;
 8006b92:	e000      	b.n	8006b96 <USBD_StdItfReq+0xc2>
          break;
 8006b94:	bf00      	nop
      }
      break;
 8006b96:	e004      	b.n	8006ba2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fceb 	bl	8007576 <USBD_CtlError>
      break;
 8006ba0:	bf00      	nop
  }

  return ret;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	889b      	ldrh	r3, [r3, #4]
 8006bbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bc8:	2b40      	cmp	r3, #64	@ 0x40
 8006bca:	d007      	beq.n	8006bdc <USBD_StdEPReq+0x30>
 8006bcc:	2b40      	cmp	r3, #64	@ 0x40
 8006bce:	f200 817f 	bhi.w	8006ed0 <USBD_StdEPReq+0x324>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02a      	beq.n	8006c2c <USBD_StdEPReq+0x80>
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	f040 817a 	bne.w	8006ed0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fe85 	bl	80068f0 <USBD_CoreFindEP>
 8006be6:	4603      	mov	r3, r0
 8006be8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bea:	7b7b      	ldrb	r3, [r7, #13]
 8006bec:	2bff      	cmp	r3, #255	@ 0xff
 8006bee:	f000 8174 	beq.w	8006eda <USBD_StdEPReq+0x32e>
 8006bf2:	7b7b      	ldrb	r3, [r7, #13]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 8170 	bne.w	8006eda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006bfa:	7b7a      	ldrb	r2, [r7, #13]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c02:	7b7a      	ldrb	r2, [r7, #13]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	32ae      	adds	r2, #174	@ 0xae
 8006c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8163 	beq.w	8006eda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c14:	7b7a      	ldrb	r2, [r7, #13]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	32ae      	adds	r2, #174	@ 0xae
 8006c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	4798      	blx	r3
 8006c26:	4603      	mov	r3, r0
 8006c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c2a:	e156      	b.n	8006eda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d008      	beq.n	8006c46 <USBD_StdEPReq+0x9a>
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	f300 8145 	bgt.w	8006ec4 <USBD_StdEPReq+0x318>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 809b 	beq.w	8006d76 <USBD_StdEPReq+0x1ca>
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d03c      	beq.n	8006cbe <USBD_StdEPReq+0x112>
 8006c44:	e13e      	b.n	8006ec4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d002      	beq.n	8006c58 <USBD_StdEPReq+0xac>
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d016      	beq.n	8006c84 <USBD_StdEPReq+0xd8>
 8006c56:	e02c      	b.n	8006cb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <USBD_StdEPReq+0xce>
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	2b80      	cmp	r3, #128	@ 0x80
 8006c62:	d00a      	beq.n	8006c7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f93d 	bl	8007ee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c6e:	2180      	movs	r1, #128	@ 0x80
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f939 	bl	8007ee8 <USBD_LL_StallEP>
 8006c76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c78:	e020      	b.n	8006cbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fc7a 	bl	8007576 <USBD_CtlError>
              break;
 8006c82:	e01b      	b.n	8006cbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	885b      	ldrh	r3, [r3, #2]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10e      	bne.n	8006caa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00b      	beq.n	8006caa <USBD_StdEPReq+0xfe>
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	2b80      	cmp	r3, #128	@ 0x80
 8006c96:	d008      	beq.n	8006caa <USBD_StdEPReq+0xfe>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	88db      	ldrh	r3, [r3, #6]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d104      	bne.n	8006caa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 f91f 	bl	8007ee8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fd2e 	bl	800770c <USBD_CtlSendStatus>

              break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fc5e 	bl	8007576 <USBD_CtlError>
              break;
 8006cba:	bf00      	nop
          }
          break;
 8006cbc:	e107      	b.n	8006ece <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d002      	beq.n	8006cd0 <USBD_StdEPReq+0x124>
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d016      	beq.n	8006cfc <USBD_StdEPReq+0x150>
 8006cce:	e04b      	b.n	8006d68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <USBD_StdEPReq+0x146>
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b80      	cmp	r3, #128	@ 0x80
 8006cda:	d00a      	beq.n	8006cf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 f901 	bl	8007ee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ce6:	2180      	movs	r1, #128	@ 0x80
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f8fd 	bl	8007ee8 <USBD_LL_StallEP>
 8006cee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cf0:	e040      	b.n	8006d74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fc3e 	bl	8007576 <USBD_CtlError>
              break;
 8006cfa:	e03b      	b.n	8006d74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	885b      	ldrh	r3, [r3, #2]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d136      	bne.n	8006d72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 f907 	bl	8007f26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fcf7 	bl	800770c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff fde4 	bl	80068f0 <USBD_CoreFindEP>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d2c:	7b7b      	ldrb	r3, [r7, #13]
 8006d2e:	2bff      	cmp	r3, #255	@ 0xff
 8006d30:	d01f      	beq.n	8006d72 <USBD_StdEPReq+0x1c6>
 8006d32:	7b7b      	ldrb	r3, [r7, #13]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11c      	bne.n	8006d72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d38:	7b7a      	ldrb	r2, [r7, #13]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d40:	7b7a      	ldrb	r2, [r7, #13]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32ae      	adds	r2, #174	@ 0xae
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d010      	beq.n	8006d72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d50:	7b7a      	ldrb	r2, [r7, #13]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32ae      	adds	r2, #174	@ 0xae
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d66:	e004      	b.n	8006d72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fc03 	bl	8007576 <USBD_CtlError>
              break;
 8006d70:	e000      	b.n	8006d74 <USBD_StdEPReq+0x1c8>
              break;
 8006d72:	bf00      	nop
          }
          break;
 8006d74:	e0ab      	b.n	8006ece <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d002      	beq.n	8006d88 <USBD_StdEPReq+0x1dc>
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d032      	beq.n	8006dec <USBD_StdEPReq+0x240>
 8006d86:	e097      	b.n	8006eb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <USBD_StdEPReq+0x1f2>
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b80      	cmp	r3, #128	@ 0x80
 8006d92:	d004      	beq.n	8006d9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fbed 	bl	8007576 <USBD_CtlError>
                break;
 8006d9c:	e091      	b.n	8006ec2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da0b      	bge.n	8006dbe <USBD_StdEPReq+0x212>
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	3310      	adds	r3, #16
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4413      	add	r3, r2
 8006dba:	3304      	adds	r3, #4
 8006dbc:	e00b      	b.n	8006dd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2202      	movs	r2, #2
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc37 	bl	8007658 <USBD_CtlSendData>
              break;
 8006dea:	e06a      	b.n	8006ec2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	da11      	bge.n	8006e18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	f003 020f 	and.w	r2, r3, #15
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	3324      	adds	r3, #36	@ 0x24
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d117      	bne.n	8006e3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fbb0 	bl	8007576 <USBD_CtlError>
                  break;
 8006e16:	e054      	b.n	8006ec2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	f003 020f 	and.w	r2, r3, #15
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fb9d 	bl	8007576 <USBD_CtlError>
                  break;
 8006e3c:	e041      	b.n	8006ec2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	da0b      	bge.n	8006e5e <USBD_StdEPReq+0x2b2>
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	3310      	adds	r3, #16
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4413      	add	r3, r2
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	e00b      	b.n	8006e76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	3304      	adds	r3, #4
 8006e76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <USBD_StdEPReq+0x2d8>
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b80      	cmp	r3, #128	@ 0x80
 8006e82:	d103      	bne.n	8006e8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e00e      	b.n	8006eaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f867 	bl	8007f64 <USBD_LL_IsStallEP>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	e002      	b.n	8006eaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2202      	movs	r2, #2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fbd1 	bl	8007658 <USBD_CtlSendData>
              break;
 8006eb6:	e004      	b.n	8006ec2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb5b 	bl	8007576 <USBD_CtlError>
              break;
 8006ec0:	bf00      	nop
          }
          break;
 8006ec2:	e004      	b.n	8006ece <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fb55 	bl	8007576 <USBD_CtlError>
          break;
 8006ecc:	bf00      	nop
      }
      break;
 8006ece:	e005      	b.n	8006edc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fb4f 	bl	8007576 <USBD_CtlError>
      break;
 8006ed8:	e000      	b.n	8006edc <USBD_StdEPReq+0x330>
      break;
 8006eda:	bf00      	nop
  }

  return ret;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	0a1b      	lsrs	r3, r3, #8
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3b01      	subs	r3, #1
 8006f08:	2b06      	cmp	r3, #6
 8006f0a:	f200 8128 	bhi.w	800715e <USBD_GetDescriptor+0x276>
 8006f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f14 <USBD_GetDescriptor+0x2c>)
 8006f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f14:	08006f31 	.word	0x08006f31
 8006f18:	08006f49 	.word	0x08006f49
 8006f1c:	08006f89 	.word	0x08006f89
 8006f20:	0800715f 	.word	0x0800715f
 8006f24:	0800715f 	.word	0x0800715f
 8006f28:	080070ff 	.word	0x080070ff
 8006f2c:	0800712b 	.word	0x0800712b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	f107 0108 	add.w	r1, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
      break;
 8006f46:	e112      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7c1b      	ldrb	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10d      	bne.n	8006f6c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f58:	f107 0208 	add.w	r2, r7, #8
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
 8006f60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	2202      	movs	r2, #2
 8006f68:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f6a:	e100      	b.n	800716e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f74:	f107 0208 	add.w	r2, r7, #8
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
 8006f7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	2202      	movs	r2, #2
 8006f84:	701a      	strb	r2, [r3, #0]
      break;
 8006f86:	e0f2      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	885b      	ldrh	r3, [r3, #2]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	f200 80ac 	bhi.w	80070ec <USBD_GetDescriptor+0x204>
 8006f94:	a201      	add	r2, pc, #4	@ (adr r2, 8006f9c <USBD_GetDescriptor+0xb4>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fb5 	.word	0x08006fb5
 8006fa0:	08006fe9 	.word	0x08006fe9
 8006fa4:	0800701d 	.word	0x0800701d
 8006fa8:	08007051 	.word	0x08007051
 8006fac:	08007085 	.word	0x08007085
 8006fb0:	080070b9 	.word	0x080070b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	7c12      	ldrb	r2, [r2, #16]
 8006fcc:	f107 0108 	add.w	r1, r7, #8
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fd6:	e091      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 facb 	bl	8007576 <USBD_CtlError>
            err++;
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fe6:	e089      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7c12      	ldrb	r2, [r2, #16]
 8007000:	f107 0108 	add.w	r1, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
 8007008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700a:	e077      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fab1 	bl	8007576 <USBD_CtlError>
            err++;
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	3301      	adds	r3, #1
 8007018:	72fb      	strb	r3, [r7, #11]
          break;
 800701a:	e06f      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	7c12      	ldrb	r2, [r2, #16]
 8007034:	f107 0108 	add.w	r1, r7, #8
 8007038:	4610      	mov	r0, r2
 800703a:	4798      	blx	r3
 800703c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800703e:	e05d      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa97 	bl	8007576 <USBD_CtlError>
            err++;
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	3301      	adds	r3, #1
 800704c:	72fb      	strb	r3, [r7, #11]
          break;
 800704e:	e055      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00b      	beq.n	8007074 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	7c12      	ldrb	r2, [r2, #16]
 8007068:	f107 0108 	add.w	r1, r7, #8
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
 8007070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007072:	e043      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa7d 	bl	8007576 <USBD_CtlError>
            err++;
 800707c:	7afb      	ldrb	r3, [r7, #11]
 800707e:	3301      	adds	r3, #1
 8007080:	72fb      	strb	r3, [r7, #11]
          break;
 8007082:	e03b      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7c12      	ldrb	r2, [r2, #16]
 800709c:	f107 0108 	add.w	r1, r7, #8
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070a6:	e029      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa63 	bl	8007576 <USBD_CtlError>
            err++;
 80070b0:	7afb      	ldrb	r3, [r7, #11]
 80070b2:	3301      	adds	r3, #1
 80070b4:	72fb      	strb	r3, [r7, #11]
          break;
 80070b6:	e021      	b.n	80070fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	7c12      	ldrb	r2, [r2, #16]
 80070d0:	f107 0108 	add.w	r1, r7, #8
 80070d4:	4610      	mov	r0, r2
 80070d6:	4798      	blx	r3
 80070d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070da:	e00f      	b.n	80070fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa49 	bl	8007576 <USBD_CtlError>
            err++;
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	3301      	adds	r3, #1
 80070e8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ea:	e007      	b.n	80070fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa41 	bl	8007576 <USBD_CtlError>
          err++;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	3301      	adds	r3, #1
 80070f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070fa:	bf00      	nop
      }
      break;
 80070fc:	e037      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7c1b      	ldrb	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800710c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800710e:	f107 0208 	add.w	r2, r7, #8
 8007112:	4610      	mov	r0, r2
 8007114:	4798      	blx	r3
 8007116:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007118:	e029      	b.n	800716e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fa2a 	bl	8007576 <USBD_CtlError>
        err++;
 8007122:	7afb      	ldrb	r3, [r7, #11]
 8007124:	3301      	adds	r3, #1
 8007126:	72fb      	strb	r3, [r7, #11]
      break;
 8007128:	e021      	b.n	800716e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7c1b      	ldrb	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10d      	bne.n	800714e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713a:	f107 0208 	add.w	r2, r7, #8
 800713e:	4610      	mov	r0, r2
 8007140:	4798      	blx	r3
 8007142:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3301      	adds	r3, #1
 8007148:	2207      	movs	r2, #7
 800714a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800714c:	e00f      	b.n	800716e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fa10 	bl	8007576 <USBD_CtlError>
        err++;
 8007156:	7afb      	ldrb	r3, [r7, #11]
 8007158:	3301      	adds	r3, #1
 800715a:	72fb      	strb	r3, [r7, #11]
      break;
 800715c:	e007      	b.n	800716e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fa08 	bl	8007576 <USBD_CtlError>
      err++;
 8007166:	7afb      	ldrb	r3, [r7, #11]
 8007168:	3301      	adds	r3, #1
 800716a:	72fb      	strb	r3, [r7, #11]
      break;
 800716c:	bf00      	nop
  }

  if (err != 0U)
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d11e      	bne.n	80071b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	88db      	ldrh	r3, [r3, #6]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d016      	beq.n	80071aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800717c:	893b      	ldrh	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00e      	beq.n	80071a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	88da      	ldrh	r2, [r3, #6]
 8007186:	893b      	ldrh	r3, [r7, #8]
 8007188:	4293      	cmp	r3, r2
 800718a:	bf28      	it	cs
 800718c:	4613      	movcs	r3, r2
 800718e:	b29b      	uxth	r3, r3
 8007190:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007192:	893b      	ldrh	r3, [r7, #8]
 8007194:	461a      	mov	r2, r3
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fa5d 	bl	8007658 <USBD_CtlSendData>
 800719e:	e009      	b.n	80071b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f9e7 	bl	8007576 <USBD_CtlError>
 80071a8:	e004      	b.n	80071b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 faae 	bl	800770c <USBD_CtlSendStatus>
 80071b0:	e000      	b.n	80071b4 <USBD_GetDescriptor+0x2cc>
    return;
 80071b2:	bf00      	nop
  }
}
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop

080071bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	889b      	ldrh	r3, [r3, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d131      	bne.n	8007232 <USBD_SetAddress+0x76>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	88db      	ldrh	r3, [r3, #6]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d12d      	bne.n	8007232 <USBD_SetAddress+0x76>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	885b      	ldrh	r3, [r3, #2]
 80071da:	2b7f      	cmp	r3, #127	@ 0x7f
 80071dc:	d829      	bhi.n	8007232 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	885b      	ldrh	r3, [r3, #2]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d104      	bne.n	8007200 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f9bc 	bl	8007576 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fe:	e01d      	b.n	800723c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7bfa      	ldrb	r2, [r7, #15]
 8007204:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fed5 	bl	8007fbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa7a 	bl	800770c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007226:	e009      	b.n	800723c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007230:	e004      	b.n	800723c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f99e 	bl	8007576 <USBD_CtlError>
  }
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	b2da      	uxtb	r2, r3
 8007258:	4b4e      	ldr	r3, [pc, #312]	@ (8007394 <USBD_SetConfig+0x150>)
 800725a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800725c:	4b4d      	ldr	r3, [pc, #308]	@ (8007394 <USBD_SetConfig+0x150>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d905      	bls.n	8007270 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f985 	bl	8007576 <USBD_CtlError>
    return USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	e08c      	b.n	800738a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d002      	beq.n	8007282 <USBD_SetConfig+0x3e>
 800727c:	2b03      	cmp	r3, #3
 800727e:	d029      	beq.n	80072d4 <USBD_SetConfig+0x90>
 8007280:	e075      	b.n	800736e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007282:	4b44      	ldr	r3, [pc, #272]	@ (8007394 <USBD_SetConfig+0x150>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d020      	beq.n	80072cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800728a:	4b42      	ldr	r3, [pc, #264]	@ (8007394 <USBD_SetConfig+0x150>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007294:	4b3f      	ldr	r3, [pc, #252]	@ (8007394 <USBD_SetConfig+0x150>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fe ffe3 	bl	8006266 <USBD_SetClassConfig>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d008      	beq.n	80072bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f962 	bl	8007576 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2202      	movs	r2, #2
 80072b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072ba:	e065      	b.n	8007388 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fa25 	bl	800770c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2203      	movs	r2, #3
 80072c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80072ca:	e05d      	b.n	8007388 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fa1d 	bl	800770c <USBD_CtlSendStatus>
      break;
 80072d2:	e059      	b.n	8007388 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072d4:	4b2f      	ldr	r3, [pc, #188]	@ (8007394 <USBD_SetConfig+0x150>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d112      	bne.n	8007302 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80072e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007394 <USBD_SetConfig+0x150>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072ee:	4b29      	ldr	r3, [pc, #164]	@ (8007394 <USBD_SetConfig+0x150>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7fe ffd2 	bl	800629e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fa06 	bl	800770c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007300:	e042      	b.n	8007388 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007302:	4b24      	ldr	r3, [pc, #144]	@ (8007394 <USBD_SetConfig+0x150>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	429a      	cmp	r2, r3
 800730e:	d02a      	beq.n	8007366 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fe ffc0 	bl	800629e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800731e:	4b1d      	ldr	r3, [pc, #116]	@ (8007394 <USBD_SetConfig+0x150>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007328:	4b1a      	ldr	r3, [pc, #104]	@ (8007394 <USBD_SetConfig+0x150>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fe ff99 	bl	8006266 <USBD_SetClassConfig>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00f      	beq.n	800735e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f918 	bl	8007576 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fe ffa5 	bl	800629e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800735c:	e014      	b.n	8007388 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f9d4 	bl	800770c <USBD_CtlSendStatus>
      break;
 8007364:	e010      	b.n	8007388 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9d0 	bl	800770c <USBD_CtlSendStatus>
      break;
 800736c:	e00c      	b.n	8007388 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f900 	bl	8007576 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007376:	4b07      	ldr	r3, [pc, #28]	@ (8007394 <USBD_SetConfig+0x150>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7fe ff8e 	bl	800629e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007382:	2303      	movs	r3, #3
 8007384:	73fb      	strb	r3, [r7, #15]
      break;
 8007386:	bf00      	nop
  }

  return ret;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	200001f8 	.word	0x200001f8

08007398 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	88db      	ldrh	r3, [r3, #6]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d004      	beq.n	80073b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f8e2 	bl	8007576 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073b2:	e023      	b.n	80073fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	dc02      	bgt.n	80073c6 <USBD_GetConfig+0x2e>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	dc03      	bgt.n	80073cc <USBD_GetConfig+0x34>
 80073c4:	e015      	b.n	80073f2 <USBD_GetConfig+0x5a>
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d00b      	beq.n	80073e2 <USBD_GetConfig+0x4a>
 80073ca:	e012      	b.n	80073f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3308      	adds	r3, #8
 80073d6:	2201      	movs	r2, #1
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f93c 	bl	8007658 <USBD_CtlSendData>
        break;
 80073e0:	e00c      	b.n	80073fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	2201      	movs	r2, #1
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f934 	bl	8007658 <USBD_CtlSendData>
        break;
 80073f0:	e004      	b.n	80073fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f8be 	bl	8007576 <USBD_CtlError>
        break;
 80073fa:	bf00      	nop
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007414:	b2db      	uxtb	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	2b02      	cmp	r3, #2
 800741a:	d81e      	bhi.n	800745a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	88db      	ldrh	r3, [r3, #6]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d004      	beq.n	800742e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f8a5 	bl	8007576 <USBD_CtlError>
        break;
 800742c:	e01a      	b.n	8007464 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f043 0202 	orr.w	r2, r3, #2
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	330c      	adds	r3, #12
 800744e:	2202      	movs	r2, #2
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f900 	bl	8007658 <USBD_CtlSendData>
      break;
 8007458:	e004      	b.n	8007464 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f88a 	bl	8007576 <USBD_CtlError>
      break;
 8007462:	bf00      	nop
  }
}
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	885b      	ldrh	r3, [r3, #2]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d107      	bne.n	800748e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f940 	bl	800770c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800748c:	e013      	b.n	80074b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	885b      	ldrh	r3, [r3, #2]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d10b      	bne.n	80074ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	889b      	ldrh	r3, [r3, #4]
 800749a:	0a1b      	lsrs	r3, r3, #8
 800749c:	b29b      	uxth	r3, r3
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f930 	bl	800770c <USBD_CtlSendStatus>
}
 80074ac:	e003      	b.n	80074b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f860 	bl	8007576 <USBD_CtlError>
}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d80b      	bhi.n	80074ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	885b      	ldrh	r3, [r3, #2]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d10c      	bne.n	80074f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f910 	bl	800770c <USBD_CtlSendStatus>
      }
      break;
 80074ec:	e004      	b.n	80074f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f840 	bl	8007576 <USBD_CtlError>
      break;
 80074f6:	e000      	b.n	80074fa <USBD_ClrFeature+0x3c>
      break;
 80074f8:	bf00      	nop
  }
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3301      	adds	r3, #1
 800751c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3301      	adds	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff fa40 	bl	80069b2 <SWAPBYTE>
 8007532:	4603      	mov	r3, r0
 8007534:	461a      	mov	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff fa33 	bl	80069b2 <SWAPBYTE>
 800754c:	4603      	mov	r3, r0
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff fa26 	bl	80069b2 <SWAPBYTE>
 8007566:	4603      	mov	r3, r0
 8007568:	461a      	mov	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	80da      	strh	r2, [r3, #6]
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007580:	2180      	movs	r1, #128	@ 0x80
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fcb0 	bl	8007ee8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007588:	2100      	movs	r1, #0
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fcac 	bl	8007ee8 <USBD_LL_StallEP>
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d036      	beq.n	800761c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075b2:	6938      	ldr	r0, [r7, #16]
 80075b4:	f000 f836 	bl	8007624 <USBD_GetLen>
 80075b8:	4603      	mov	r3, r0
 80075ba:	3301      	adds	r3, #1
 80075bc:	b29b      	uxth	r3, r3
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	4413      	add	r3, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	3301      	adds	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	4413      	add	r3, r2
 80075de:	2203      	movs	r2, #3
 80075e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	3301      	adds	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075e8:	e013      	b.n	8007612 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	4413      	add	r3, r2
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	7812      	ldrb	r2, [r2, #0]
 80075f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	3301      	adds	r3, #1
 80075fa:	613b      	str	r3, [r7, #16]
    idx++;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	3301      	adds	r3, #1
 8007600:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	4413      	add	r3, r2
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]
    idx++;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	3301      	adds	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e7      	bne.n	80075ea <USBD_GetString+0x52>
 800761a:	e000      	b.n	800761e <USBD_GetString+0x86>
    return;
 800761c:	bf00      	nop
  }
}
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007634:	e005      	b.n	8007642 <USBD_GetLen+0x1e>
  {
    len++;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	3301      	adds	r3, #1
 800763a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	3301      	adds	r3, #1
 8007640:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f5      	bne.n	8007636 <USBD_GetLen+0x12>
  }

  return len;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2202      	movs	r2, #2
 8007668:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	2100      	movs	r1, #0
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fcbb 	bl	8007ffa <USBD_LL_Transmit>

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	2100      	movs	r1, #0
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fcaa 	bl	8007ffa <USBD_LL_Transmit>

  return USBD_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2203      	movs	r2, #3
 80076c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	2100      	movs	r1, #0
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fcae 	bl	800803c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	2100      	movs	r1, #0
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fc9d 	bl	800803c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2204      	movs	r2, #4
 8007718:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800771c:	2300      	movs	r3, #0
 800771e:	2200      	movs	r2, #0
 8007720:	2100      	movs	r1, #0
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fc69 	bl	8007ffa <USBD_LL_Transmit>

  return USBD_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2205      	movs	r2, #5
 800773e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007742:	2300      	movs	r3, #0
 8007744:	2200      	movs	r2, #0
 8007746:	2100      	movs	r1, #0
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fc77 	bl	800803c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800775c:	2200      	movs	r2, #0
 800775e:	4912      	ldr	r1, [pc, #72]	@ (80077a8 <MX_USB_DEVICE_Init+0x50>)
 8007760:	4812      	ldr	r0, [pc, #72]	@ (80077ac <MX_USB_DEVICE_Init+0x54>)
 8007762:	f7fe fd03 	bl	800616c <USBD_Init>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800776c:	f7f9 fa68 	bl	8000c40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007770:	490f      	ldr	r1, [pc, #60]	@ (80077b0 <MX_USB_DEVICE_Init+0x58>)
 8007772:	480e      	ldr	r0, [pc, #56]	@ (80077ac <MX_USB_DEVICE_Init+0x54>)
 8007774:	f7fe fd2a 	bl	80061cc <USBD_RegisterClass>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800777e:	f7f9 fa5f 	bl	8000c40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007782:	490c      	ldr	r1, [pc, #48]	@ (80077b4 <MX_USB_DEVICE_Init+0x5c>)
 8007784:	4809      	ldr	r0, [pc, #36]	@ (80077ac <MX_USB_DEVICE_Init+0x54>)
 8007786:	f7fe fc61 	bl	800604c <USBD_CDC_RegisterInterface>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007790:	f7f9 fa56 	bl	8000c40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007794:	4805      	ldr	r0, [pc, #20]	@ (80077ac <MX_USB_DEVICE_Init+0x54>)
 8007796:	f7fe fd4f 	bl	8006238 <USBD_Start>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077a0:	f7f9 fa4e 	bl	8000c40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077a4:	bf00      	nop
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	200000ac 	.word	0x200000ac
 80077ac:	200001fc 	.word	0x200001fc
 80077b0:	20000018 	.word	0x20000018
 80077b4:	20000098 	.word	0x20000098

080077b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077bc:	2200      	movs	r2, #0
 80077be:	4905      	ldr	r1, [pc, #20]	@ (80077d4 <CDC_Init_FS+0x1c>)
 80077c0:	4805      	ldr	r0, [pc, #20]	@ (80077d8 <CDC_Init_FS+0x20>)
 80077c2:	f7fe fc5d 	bl	8006080 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077c6:	4905      	ldr	r1, [pc, #20]	@ (80077dc <CDC_Init_FS+0x24>)
 80077c8:	4803      	ldr	r0, [pc, #12]	@ (80077d8 <CDC_Init_FS+0x20>)
 80077ca:	f7fe fc7b 	bl	80060c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80077ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20000518 	.word	0x20000518
 80077d8:	200001fc 	.word	0x200001fc
 80077dc:	200004d8 	.word	0x200004d8

080077e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
 80077fc:	4613      	mov	r3, r2
 80077fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	2b23      	cmp	r3, #35	@ 0x23
 8007804:	d84a      	bhi.n	800789c <CDC_Control_FS+0xac>
 8007806:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <CDC_Control_FS+0x1c>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	0800789d 	.word	0x0800789d
 8007810:	0800789d 	.word	0x0800789d
 8007814:	0800789d 	.word	0x0800789d
 8007818:	0800789d 	.word	0x0800789d
 800781c:	0800789d 	.word	0x0800789d
 8007820:	0800789d 	.word	0x0800789d
 8007824:	0800789d 	.word	0x0800789d
 8007828:	0800789d 	.word	0x0800789d
 800782c:	0800789d 	.word	0x0800789d
 8007830:	0800789d 	.word	0x0800789d
 8007834:	0800789d 	.word	0x0800789d
 8007838:	0800789d 	.word	0x0800789d
 800783c:	0800789d 	.word	0x0800789d
 8007840:	0800789d 	.word	0x0800789d
 8007844:	0800789d 	.word	0x0800789d
 8007848:	0800789d 	.word	0x0800789d
 800784c:	0800789d 	.word	0x0800789d
 8007850:	0800789d 	.word	0x0800789d
 8007854:	0800789d 	.word	0x0800789d
 8007858:	0800789d 	.word	0x0800789d
 800785c:	0800789d 	.word	0x0800789d
 8007860:	0800789d 	.word	0x0800789d
 8007864:	0800789d 	.word	0x0800789d
 8007868:	0800789d 	.word	0x0800789d
 800786c:	0800789d 	.word	0x0800789d
 8007870:	0800789d 	.word	0x0800789d
 8007874:	0800789d 	.word	0x0800789d
 8007878:	0800789d 	.word	0x0800789d
 800787c:	0800789d 	.word	0x0800789d
 8007880:	0800789d 	.word	0x0800789d
 8007884:	0800789d 	.word	0x0800789d
 8007888:	0800789d 	.word	0x0800789d
 800788c:	0800789d 	.word	0x0800789d
 8007890:	0800789d 	.word	0x0800789d
 8007894:	0800789d 	.word	0x0800789d
 8007898:	0800789d 	.word	0x0800789d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800789c:	bf00      	nop
  }

  return (USBD_OK);
 800789e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80078b6:	6879      	ldr	r1, [r7, #4]
 80078b8:	4805      	ldr	r0, [pc, #20]	@ (80078d0 <CDC_Receive_FS+0x24>)
 80078ba:	f7fe fc03 	bl	80060c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078be:	4804      	ldr	r0, [pc, #16]	@ (80078d0 <CDC_Receive_FS+0x24>)
 80078c0:	f7fe fc1e 	bl	8006100 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80078c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	200001fc 	.word	0x200001fc

080078d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80078e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	6039      	str	r1, [r7, #0]
 8007902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2212      	movs	r2, #18
 8007908:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800790a:	4b03      	ldr	r3, [pc, #12]	@ (8007918 <USBD_FS_DeviceDescriptor+0x20>)
}
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	200000c8 	.word	0x200000c8

0800791c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2204      	movs	r2, #4
 800792c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800792e:	4b03      	ldr	r3, [pc, #12]	@ (800793c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	200000dc 	.word	0x200000dc

08007940 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4907      	ldr	r1, [pc, #28]	@ (8007974 <USBD_FS_ProductStrDescriptor+0x34>)
 8007956:	4808      	ldr	r0, [pc, #32]	@ (8007978 <USBD_FS_ProductStrDescriptor+0x38>)
 8007958:	f7ff fe1e 	bl	8007598 <USBD_GetString>
 800795c:	e004      	b.n	8007968 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	4904      	ldr	r1, [pc, #16]	@ (8007974 <USBD_FS_ProductStrDescriptor+0x34>)
 8007962:	4805      	ldr	r0, [pc, #20]	@ (8007978 <USBD_FS_ProductStrDescriptor+0x38>)
 8007964:	f7ff fe18 	bl	8007598 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007968:	4b02      	ldr	r3, [pc, #8]	@ (8007974 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000d18 	.word	0x20000d18
 8007978:	0800819c 	.word	0x0800819c

0800797c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	6039      	str	r1, [r7, #0]
 8007986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	4904      	ldr	r1, [pc, #16]	@ (800799c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800798c:	4804      	ldr	r0, [pc, #16]	@ (80079a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800798e:	f7ff fe03 	bl	8007598 <USBD_GetString>
  return USBD_StrDesc;
 8007992:	4b02      	ldr	r3, [pc, #8]	@ (800799c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000d18 	.word	0x20000d18
 80079a0:	080081b4 	.word	0x080081b4

080079a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	221a      	movs	r2, #26
 80079b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079b6:	f000 f843 	bl	8007a40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079ba:	4b02      	ldr	r3, [pc, #8]	@ (80079c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	200000e0 	.word	0x200000e0

080079c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4907      	ldr	r1, [pc, #28]	@ (80079fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80079de:	4808      	ldr	r0, [pc, #32]	@ (8007a00 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079e0:	f7ff fdda 	bl	8007598 <USBD_GetString>
 80079e4:	e004      	b.n	80079f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	4904      	ldr	r1, [pc, #16]	@ (80079fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80079ea:	4805      	ldr	r0, [pc, #20]	@ (8007a00 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079ec:	f7ff fdd4 	bl	8007598 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079f0:	4b02      	ldr	r3, [pc, #8]	@ (80079fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000d18 	.word	0x20000d18
 8007a00:	080081c8 	.word	0x080081c8

08007a04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	4907      	ldr	r1, [pc, #28]	@ (8007a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a1a:	4808      	ldr	r0, [pc, #32]	@ (8007a3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a1c:	f7ff fdbc 	bl	8007598 <USBD_GetString>
 8007a20:	e004      	b.n	8007a2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	4904      	ldr	r1, [pc, #16]	@ (8007a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a26:	4805      	ldr	r0, [pc, #20]	@ (8007a3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a28:	f7ff fdb6 	bl	8007598 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a2c:	4b02      	ldr	r3, [pc, #8]	@ (8007a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000d18 	.word	0x20000d18
 8007a3c:	080081d4 	.word	0x080081d4

08007a40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a46:	4b0f      	ldr	r3, [pc, #60]	@ (8007a84 <Get_SerialNum+0x44>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a88 <Get_SerialNum+0x48>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a52:	4b0e      	ldr	r3, [pc, #56]	@ (8007a8c <Get_SerialNum+0x4c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d009      	beq.n	8007a7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a66:	2208      	movs	r2, #8
 8007a68:	4909      	ldr	r1, [pc, #36]	@ (8007a90 <Get_SerialNum+0x50>)
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f814 	bl	8007a98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a70:	2204      	movs	r2, #4
 8007a72:	4908      	ldr	r1, [pc, #32]	@ (8007a94 <Get_SerialNum+0x54>)
 8007a74:	68b8      	ldr	r0, [r7, #8]
 8007a76:	f000 f80f 	bl	8007a98 <IntToUnicode>
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	1fff7a10 	.word	0x1fff7a10
 8007a88:	1fff7a14 	.word	0x1fff7a14
 8007a8c:	1fff7a18 	.word	0x1fff7a18
 8007a90:	200000e2 	.word	0x200000e2
 8007a94:	200000f2 	.word	0x200000f2

08007a98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]
 8007aae:	e027      	b.n	8007b00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	0f1b      	lsrs	r3, r3, #28
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d80b      	bhi.n	8007ad0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	0f1b      	lsrs	r3, r3, #28
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	440b      	add	r3, r1
 8007ac8:	3230      	adds	r2, #48	@ 0x30
 8007aca:	b2d2      	uxtb	r2, r2
 8007acc:	701a      	strb	r2, [r3, #0]
 8007ace:	e00a      	b.n	8007ae6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	0f1b      	lsrs	r3, r3, #28
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	4619      	mov	r1, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	440b      	add	r3, r1
 8007ae0:	3237      	adds	r2, #55	@ 0x37
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	3301      	adds	r3, #1
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	4413      	add	r3, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	3301      	adds	r3, #1
 8007afe:	75fb      	strb	r3, [r7, #23]
 8007b00:	7dfa      	ldrb	r2, [r7, #23]
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d3d3      	bcc.n	8007ab0 <IntToUnicode+0x18>
  }
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	@ 0x28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b20:	f107 0314 	add.w	r3, r7, #20
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	605a      	str	r2, [r3, #4]
 8007b2a:	609a      	str	r2, [r3, #8]
 8007b2c:	60da      	str	r2, [r3, #12]
 8007b2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b38:	d13a      	bne.n	8007bb0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	613b      	str	r3, [r7, #16]
 8007b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b42:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b56:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b64:	2303      	movs	r3, #3
 8007b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b68:	230a      	movs	r3, #10
 8007b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b6c:	f107 0314 	add.w	r3, r7, #20
 8007b70:	4619      	mov	r1, r3
 8007b72:	4812      	ldr	r0, [pc, #72]	@ (8007bbc <HAL_PCD_MspInit+0xa4>)
 8007b74:	f7f9 fe34 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b78:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b82:	6353      	str	r3, [r2, #52]	@ 0x34
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b92:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b94:	4b08      	ldr	r3, [pc, #32]	@ (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	2043      	movs	r0, #67	@ 0x43
 8007ba6:	f7f9 fde4 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007baa:	2043      	movs	r0, #67	@ 0x43
 8007bac:	f7f9 fdfd 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bb0:	bf00      	nop
 8007bb2:	3728      	adds	r7, #40	@ 0x28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40023800 	.word	0x40023800
 8007bbc:	40020000 	.word	0x40020000

08007bc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7fe fb7b 	bl	80062d2 <USBD_LL_SetupStage>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007bf6:	78fa      	ldrb	r2, [r7, #3]
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f7fe fbb5 	bl	800637c <USBD_LL_DataOutStage>
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	3320      	adds	r3, #32
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	4619      	mov	r1, r3
 8007c42:	f7fe fc4e 	bl	80064e2 <USBD_LL_DataInStage>
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe fd88 	bl	8006772 <USBD_LL_SOF>
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c72:	2301      	movs	r3, #1
 8007c74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	79db      	ldrb	r3, [r3, #7]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d001      	beq.n	8007c82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c7e:	f7f8 ffdf 	bl	8000c40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c88:	7bfa      	ldrb	r2, [r7, #15]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe fd2c 	bl	80066ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fe fcd4 	bl	8006646 <USBD_LL_Reset>
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fd27 	bl	800670a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6812      	ldr	r2, [r2, #0]
 8007cca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cce:	f043 0301 	orr.w	r3, r3, #1
 8007cd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7adb      	ldrb	r3, [r3, #11]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cdc:	4b04      	ldr	r3, [pc, #16]	@ (8007cf0 <HAL_PCD_SuspendCallback+0x48>)
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	4a03      	ldr	r2, [pc, #12]	@ (8007cf0 <HAL_PCD_SuspendCallback+0x48>)
 8007ce2:	f043 0306 	orr.w	r3, r3, #6
 8007ce6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	e000ed00 	.word	0xe000ed00

08007cf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fd1d 	bl	8006742 <USBD_LL_Resume>
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	4611      	mov	r1, r2
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fd75 	bl	8006816 <USBD_LL_IsoOUTIncomplete>
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	4611      	mov	r1, r2
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fd31 	bl	80067b2 <USBD_LL_IsoINIncomplete>
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fd87 	bl	800687a <USBD_LL_DevConnected>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe fd84 	bl	8006890 <USBD_LL_DevDisconnected>
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d13c      	bne.n	8007e1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007da0:	4a20      	ldr	r2, [pc, #128]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a1e      	ldr	r2, [pc, #120]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007dac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007db0:	4b1c      	ldr	r3, [pc, #112]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007db2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007db6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007db8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007dba:	2204      	movs	r2, #4
 8007dbc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007dbe:	4b19      	ldr	r3, [pc, #100]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007dc4:	4b17      	ldr	r3, [pc, #92]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007dca:	4b16      	ldr	r3, [pc, #88]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007dcc:	2202      	movs	r2, #2
 8007dce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007dd0:	4b14      	ldr	r3, [pc, #80]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007dd6:	4b13      	ldr	r3, [pc, #76]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ddc:	4b11      	ldr	r3, [pc, #68]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007de2:	4b10      	ldr	r3, [pc, #64]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007de8:	4b0e      	ldr	r3, [pc, #56]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007dee:	480d      	ldr	r0, [pc, #52]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007df0:	f7f9 feaa 	bl	8001b48 <HAL_PCD_Init>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dfa:	f7f8 ff21 	bl	8000c40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007dfe:	2180      	movs	r1, #128	@ 0x80
 8007e00:	4808      	ldr	r0, [pc, #32]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007e02:	f7fb f8d4 	bl	8002fae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e06:	2240      	movs	r2, #64	@ 0x40
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4806      	ldr	r0, [pc, #24]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007e0c:	f7fb f888 	bl	8002f20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e10:	2280      	movs	r2, #128	@ 0x80
 8007e12:	2101      	movs	r1, #1
 8007e14:	4803      	ldr	r0, [pc, #12]	@ (8007e24 <USBD_LL_Init+0x94>)
 8007e16:	f7fb f883 	bl	8002f20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20000f18 	.word	0x20000f18

08007e28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7f9 ff91 	bl	8001d66 <HAL_PCD_Start>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f942 	bl	80080d4 <USBD_Get_USB_Status>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	4608      	mov	r0, r1
 8007e68:	4611      	mov	r1, r2
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	70fb      	strb	r3, [r7, #3]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70bb      	strb	r3, [r7, #2]
 8007e74:	4613      	mov	r3, r2
 8007e76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e86:	78bb      	ldrb	r3, [r7, #2]
 8007e88:	883a      	ldrh	r2, [r7, #0]
 8007e8a:	78f9      	ldrb	r1, [r7, #3]
 8007e8c:	f7fa fc65 	bl	800275a <HAL_PCD_EP_Open>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f91c 	bl	80080d4 <USBD_Get_USB_Status>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ec4:	78fa      	ldrb	r2, [r7, #3]
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fa fcae 	bl	800282a <HAL_PCD_EP_Close>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 f8fd 	bl	80080d4 <USBD_Get_USB_Status>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f02:	78fa      	ldrb	r2, [r7, #3]
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fa fd66 	bl	80029d8 <HAL_PCD_EP_SetStall>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 f8de 	bl	80080d4 <USBD_Get_USB_Status>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fa fdaa 	bl	8002a9e <HAL_PCD_EP_ClrStall>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 f8bf 	bl	80080d4 <USBD_Get_USB_Status>
 8007f56:	4603      	mov	r3, r0
 8007f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da0b      	bge.n	8007f98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f86:	68f9      	ldr	r1, [r7, #12]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	3316      	adds	r3, #22
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	e00b      	b.n	8007fb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	440b      	add	r3, r1
 8007faa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007fae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fd6:	78fa      	ldrb	r2, [r7, #3]
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fa fb99 	bl	8002712 <HAL_PCD_SetAddress>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f874 	bl	80080d4 <USBD_Get_USB_Status>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b086      	sub	sp, #24
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	603b      	str	r3, [r7, #0]
 8008006:	460b      	mov	r3, r1
 8008008:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008018:	7af9      	ldrb	r1, [r7, #11]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	f7fa fca1 	bl	8002964 <HAL_PCD_EP_Transmit>
 8008022:	4603      	mov	r3, r0
 8008024:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	4618      	mov	r0, r3
 800802a:	f000 f853 	bl	80080d4 <USBD_Get_USB_Status>
 800802e:	4603      	mov	r3, r0
 8008030:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008032:	7dbb      	ldrb	r3, [r7, #22]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	607a      	str	r2, [r7, #4]
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	460b      	mov	r3, r1
 800804a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800805a:	7af9      	ldrb	r1, [r7, #11]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	f7fa fc2d 	bl	80028be <HAL_PCD_EP_Receive>
 8008064:	4603      	mov	r3, r0
 8008066:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f832 	bl	80080d4 <USBD_Get_USB_Status>
 8008070:	4603      	mov	r3, r0
 8008072:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008074:	7dbb      	ldrb	r3, [r7, #22]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f7fa fc4d 	bl	8002934 <HAL_PCD_EP_GetRxCount>
 800809a:	4603      	mov	r3, r0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080ac:	4b03      	ldr	r3, [pc, #12]	@ (80080bc <USBD_static_malloc+0x18>)
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	200013fc 	.word	0x200013fc

080080c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]

}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d817      	bhi.n	8008118 <USBD_Get_USB_Status+0x44>
 80080e8:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <USBD_Get_USB_Status+0x1c>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008101 	.word	0x08008101
 80080f4:	08008107 	.word	0x08008107
 80080f8:	0800810d 	.word	0x0800810d
 80080fc:	08008113 	.word	0x08008113
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73fb      	strb	r3, [r7, #15]
    break;
 8008104:	e00b      	b.n	800811e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008106:	2303      	movs	r3, #3
 8008108:	73fb      	strb	r3, [r7, #15]
    break;
 800810a:	e008      	b.n	800811e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800810c:	2301      	movs	r3, #1
 800810e:	73fb      	strb	r3, [r7, #15]
    break;
 8008110:	e005      	b.n	800811e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008112:	2303      	movs	r3, #3
 8008114:	73fb      	strb	r3, [r7, #15]
    break;
 8008116:	e002      	b.n	800811e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008118:	2303      	movs	r3, #3
 800811a:	73fb      	strb	r3, [r7, #15]
    break;
 800811c:	bf00      	nop
  }
  return usb_status;
 800811e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <memset>:
 800812c:	4402      	add	r2, r0
 800812e:	4603      	mov	r3, r0
 8008130:	4293      	cmp	r3, r2
 8008132:	d100      	bne.n	8008136 <memset+0xa>
 8008134:	4770      	bx	lr
 8008136:	f803 1b01 	strb.w	r1, [r3], #1
 800813a:	e7f9      	b.n	8008130 <memset+0x4>

0800813c <__libc_init_array>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	4d0d      	ldr	r5, [pc, #52]	@ (8008174 <__libc_init_array+0x38>)
 8008140:	4c0d      	ldr	r4, [pc, #52]	@ (8008178 <__libc_init_array+0x3c>)
 8008142:	1b64      	subs	r4, r4, r5
 8008144:	10a4      	asrs	r4, r4, #2
 8008146:	2600      	movs	r6, #0
 8008148:	42a6      	cmp	r6, r4
 800814a:	d109      	bne.n	8008160 <__libc_init_array+0x24>
 800814c:	4d0b      	ldr	r5, [pc, #44]	@ (800817c <__libc_init_array+0x40>)
 800814e:	4c0c      	ldr	r4, [pc, #48]	@ (8008180 <__libc_init_array+0x44>)
 8008150:	f000 f818 	bl	8008184 <_init>
 8008154:	1b64      	subs	r4, r4, r5
 8008156:	10a4      	asrs	r4, r4, #2
 8008158:	2600      	movs	r6, #0
 800815a:	42a6      	cmp	r6, r4
 800815c:	d105      	bne.n	800816a <__libc_init_array+0x2e>
 800815e:	bd70      	pop	{r4, r5, r6, pc}
 8008160:	f855 3b04 	ldr.w	r3, [r5], #4
 8008164:	4798      	blx	r3
 8008166:	3601      	adds	r6, #1
 8008168:	e7ee      	b.n	8008148 <__libc_init_array+0xc>
 800816a:	f855 3b04 	ldr.w	r3, [r5], #4
 800816e:	4798      	blx	r3
 8008170:	3601      	adds	r6, #1
 8008172:	e7f2      	b.n	800815a <__libc_init_array+0x1e>
 8008174:	080081fc 	.word	0x080081fc
 8008178:	080081fc 	.word	0x080081fc
 800817c:	080081fc 	.word	0x080081fc
 8008180:	08008200 	.word	0x08008200

08008184 <_init>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	bf00      	nop
 8008188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818a:	bc08      	pop	{r3}
 800818c:	469e      	mov	lr, r3
 800818e:	4770      	bx	lr

08008190 <_fini>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	bf00      	nop
 8008194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008196:	bc08      	pop	{r3}
 8008198:	469e      	mov	lr, r3
 800819a:	4770      	bx	lr
